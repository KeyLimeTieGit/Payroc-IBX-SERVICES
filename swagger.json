{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "emv.payroc.com",
  "basePath": "/services/api.asmx/",
  "info": {
    "description": "# 1. IBX Services \n## IBX Services WSDLs\nThe IBX services can be accessed via the following URLs\n\n- https://gateway.ibxpays.com/ws/transact.asmx?wsdl    \n- https://gateway.ibxpays.com/ws/cardsafe.asmx?wsdl\n- https://gateway.ibxpays.com/ws/customfields.asmx?wsdl\n- https://gateway.ibxpays.com/vt/ws/trxdetail.asmx?wsdl\n- https://gateway.ibxpays.com/vt/ws/recurring.asmx?wsdl\n\n## IBX Services\n \n**Transact WSDL** provides information for the following transaction processing services:\n\n  - ProcessCreditCard\n  \n  - ProcessDebitCard\n  - ProcessCheck\n  - ProcessEBTCard\n  - ProcessGiftCard\n  - ProcessSignature\n  - ProcessCheck (Recurring Billing)\n  - ProcessCreditCard (Recurring Billing)\n  \n**TRXdetail WSDL** provides information for the following report processing services:\n\n- GetCardTrx\n\n- GetCardTrxSummary\n- GetCheckTrx\n- GetOpenBatchSummary\n\n**Recurring WSDL** provides information for the following recurring billing processing services:\n\n- ManageCustomer\n\n- ManageCreditCardInfo\n- ManageCheckInfo\n- ManageContract\n- ManageContractAddDaysToNextBillDt\n- AddRecurringCreditCard\n\n**CardSafe WSDL** provides information for the following storing credit card information processing services:\n\n- StoreCard\n\n- ProcessCreditCard\n\n**CustomFields WSDL** provides information for adding custom fields programmatically to a gateway account:\n\n- AddCustomField\n\n\n\n# 2. IMPLEMENTATION GUIDE \n\n# 2.1. SOAP \n\nThe SOAP interface is most easily accessed through a .NET application. If you are developing in .Net, simply add the URL of the web service – or of the specific service method – you are attempting to consume as a service reference in Visual Studio. Once you have added the service reference, Visual Studio will handle the bulk of the heavy lifting and will create a class for the web service and/or method you are attempting to access which will build the SOAP object for you and return a response in the form of an object.\n\nIt is important to note that we use SSL accelerators in our infrastructure.  If you are having trouble communicating with the web service check to see if the endpoint URL’s included in the WSDL file generated by the web reference are incorrectly set to ‘http://’ .  If so simply change them to ‘https://’ in whatever IDE you are working in, and you should have no trouble communicating with the web service.\n\nIf you are using a program language other than VB.NET or C#, and are not familiar with interacting with .NET web services, it is recommended that you integrate using HTTPS as it is far less complicated then building SOAP objects outside of an IDE, and will save a tremendous amount of time and headache. If you are familiar and comfortable using SOAP to consume .NET web services, navigate to the URL for each web service method you plan to consume for additional details regarding the XML SOAP schema.\n\nIf you are not using a Microsoft .NET framework to access the services, refer to the cURL, PHP, Node.js and Ruby [Implementation Examples](#section/9.1.Implementation-Examples) for examples on how to use these services in alternative environments.\n\nMost integrators will only need to concern themselves with the ProcessCreditCard web service. However, if additional functionality is required, our web services have been labeled intuitively, and the functionality exposed in each service is implied in the title.\n\nThe API is broken up into categories according to functionality to ease this further.\n\nIf you have any development specific questions, please contact our technical support center at the following email address:  support@ibxpays.com.\n\n\n# 2.2. Name-Value Pairs \nThe Name-Value Pairs implementation relies on the .NET framework’s built in HTTP to SOAP translation layer. As a result, there are a few idiosyncracies that an integrator must be aware of when implementing using HTTPS.\n\n\n1. The .NET framework is taking the HTTPS request and building a SOAP object using the fields that it receives.\n\n2. As a result, regardless of whether or not a field’s VALUE is required, the field name must be sent along with the request.\n\n3. Although this may seem counter intuitive, the .NET web service will simply build the SOAP object using only the fields that are passed to it.\n\n4. If a field name is not included in the request, the SOAP object will be built without that parameter, thus resulting in an improperly formed SOAP object that will be rejected by the web service.\n\n5. To avoid this, each field name must be sent even if you are not passing a value to the service. You must send the field EVEN if the API indicates that the field is not required, but send the field with a ‘NULL’ value. Eg; “CustomerName=”\n\n6. Remember, the request MUST include all field names, but when deciding whether to send a value in a specific field you can rely on the API to indicate whether a specific field requires a value in order to return a valid result\n\nWhen calling a service using HTTPS, you must also use a slightly different URL. This URL is displayed for each web service in the API under the heading ‘Service Location’. Please make sure that when implementing using Name-Value Pairs over HTTPS that you are sending the request to the URL labeled ‘For standard HTTPS connections’.\n\nFor additional detail regarding HTTPS GET or POST format, navigate to the service URL labeled ‘For SOAP connections and scroll down to view properly formed GET and POST requests for each service.\n\nMost integrators will only need to concern themselves with the ProcessCreditCard web service. However, if additional functionality is required, our web services have been labeled intuitively, and the functionality exposed in each service is implied in the title.\n\nThe API is broken up into categories according to functionality type to ease this further.\n\nIf you have any development specific questions, please contact our technical support center at the following email address: support@ibxpays.com\n\nTable of contents for test forms can be located at: https://gateway.ibxpays.com/ws/\n\n# 3. Transaction Processing \n\n# 3.1. ProcessCreditCard \nThis web service is used whenever a transaction is completed via customer credit card.\n\n## Request\nProcessCreditCard(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Zip, Street, CVNum, ExtData)\n\n## Request Example\nNote: This example assumes that two [custom fields have been created](#section/8.1.-AddCustomField) (one a numeric the other a string). Remove the CustomFields XML if attempting to use without custom fields.\n\n\n```\nSmartPaymentsSoapClient transact = new SmartPaymentsSoapClient(\"SmartPaymentsSoap\");\n\ntransactResponse = transact.ProcessCreditCard(\n    \"username\", \"password\", \"Sale\", \"4012888888881881\",\n    \"1216\", \"\", \"Barney Rubble\", \"200\", \"666\", \"\", \"\", \"\", \"999\",\n    @\"<EntryMode>MANUAL</EntryMode><TipAmt>3.85</TipAmt><RegisterNum>2</RegisterNum>\n        <CustomFields>\n            <FruityPebbles>18</FruityPebbles>\n            <CocoaPebbles>Chocolate goodness</CocoaPebbles>\n        </CustomFields>\"\n        );\n```\n\n## Response\n\nAuthCode, ExtData, GetAVSResult, GetAVSResultTXT, GetCommercialCard, GetCVResult, GetCVResultTXT, GetStreetMatchTXT, GetZipMatchTXT, HostCode, Message, Message1, Message2, PNRef, RespMSG, Result\n\n## Response Example\n  ```\nAuthCode \"TAS202\" string\nAuthorizedAmount null string\nBalance null string\nExtData \"InvNum=666,CardType=VISA\" string\nGetAVSResult \"0\" string\nGetAVSResultTXT \"Issuer did not perform AVS\" string\nGetCVResult \"M\" string\nGetCVResultTXT \"Match\" string\nGetCommercialCard \"False\" string\nGetGetOrigResult \"\" string\nGetStreetMatchTXT \"Service Not Requested\" string\nGetZipMatchTXT \"Service Not Requested\" string\nHostCode \"000000000926896\" string\nHostURL \"\" string\nMessage \"\" string\nMessage1 \"\" string\nMessage2 \"\" string\nPNRef \"3413610\" string\nReceiptURL null string\nRespMSG \"Approved\" string\nResult 0 int\n```\n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessCreditCard Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name | Description \n|-----|-----\n| UserName | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n| Password | Password associated with the user name provided. \n| TransType | Identifies the type of credit card transaction being made.\n| | Valid values are:\n| |  - Sale – make a purchase using a credit card|\n| |  - Auth – authorize the amount on a credit card|\n| |  - Return – credits the card holder’s account\n| |  - Void – undo an unsettled transaction\n| |  - Force – force an Auth transaction in to the current batch (PostAuth) or place a transaction not processed through the payment server into the current batch (ForceAuth). Note: When using this transaction type for a ForceAuth, you must include an AuthCode under the ExtData parameter.\n| | - RepeatSale – perform a recurring billing or installment payment transaction|\n| | Processors supporting the restaurant adjustment function only:\n| |   - Adjustment – used to modify an existing tip amount for an original sale To call the service\n| | Terminal-based processors only:\n| |  - Capture – settle a single transaction in the current batch\n| |  - Reversal – perform a manual full reversal on a credit card or repeat sale within 24 hours of the original transaction. See [Reversal Transactions.](#section/reverse)\n| CardNum |Credit card number used to uniquely identify the card owner’s account.\n  Required on all swiped CC transactions|\n| ExpDate | Credit card date of expiration in MMYY format.\n|Required on all swiped CC transactions |\n| MagData | Track data encoded in the magnetic stripe of a credit card. The data will follow the following format:\n| Not required for CaptureAll | %B5149612222222229^FDCS/TEST CHECK CARD^12041011234567  \n| required for swiped/card present transactions | 440?;5149612222222229=12041011234567440?\n|  | This parameter must contain the full magnetic read in order to be classified as a ‘card present’ transaction\n| NameOnCard| Card owner’s name as it appears on the card.\n| Optional unless required by merchant’s processor setup | See  [Invalid Character Processing.](#section/invalidchar)\n| Amount| Total transaction amount in DDDD.CC format.\n| Required for swiped/card present transactions | \n| InvNum| The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice.\n| Optional | \n|  | See [Invalid Character Processing.](#section/invalidchar)\n|  | View the [ExtData Parameters Table](#section/_Toc455564524) for more information.\n| PNRef | Unique payment reference number used to identify a single transaction within the system. The payment reference number \n| Required on Force and Capture transactions | (PNRef) is assigned by the payment server at the time the transaction is created.\n| Zip | Card owner’s billing address five-digit postal/zip code.\n| Optional unless required by merchant’s setup | See [Invalid Character Processing.](#section/invalidchar)\n| CVNum | Card verification number.\n| Optional unless required by merchant’s setup| \n|ExtData| The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters.\n|Optional| ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags. View the [ExtData Parameters Table](#section/_Toc455564524) for more information.\n\n## ExtData Parameters Table\nView the ExtData Examples and Parameters Table below for available parameters.\n\n## ExtData Parameter Examples\nExample 1\n\n```\n<EntryMode>MANUAL</EntryMode>\n<TipAmt>3.85</TipAmt>\n<TaxAmt>1.12</TaxAmt>\n```\n\nExample 2\n```\n<LineItemDetail>\n<LineItem>\n<Amout>3.00</Amount>\n<CommodityCode>Commodity</CommodityCode>\n<Description>Description</Description>\n<DiscountAmount>.50</DiscountAmount>\n<DiscountIncluded>True</DiscountIncluded>\n<ProductCode>1234</ProductCode>\n<Quantity>1.00</Quantity>\n<TaxAmount>0</TaxAmount>\n<TaxInvoiceNumber></TaxInvoiceNumber>\n<TaxRate>0</TaxRate>\n<TaxIncluded>False</TaxIncluded>\n<UnitOfMeasure>BushelUS</UnitOfMeasure>\n<UnitPrice>3.5100</UnitPrice>\n<UPC>8675309</UPC>\n</LineItemDetail>\n```\n\n**To view the contents of the ExtData Parameters table click**\n\n| ExtData Parameters | Description \n|-----|-----\n| Authorization Code | Original authorization/approval code. \n| Required when | Valid format is:\n| TransType=Force |\n|  | <AuthCode>_AuthorizationCode_</AuthCode> where _Authorization Code_ is the original authorization or approval code.\n| Customer Code Optional| Customer or purchase order (PO) number used with Level II information for Global Payments only (if using another processor that supports Level II, use the PO Number to pass this information instead).\n|  | See [Invalid Character Processing.](#section/invalidchar) \n|  | Valid format is:\n|  | <CustCode>_CustomerCode_</CustCode> where _Customer Code_ is the number assigned to identify the customer or the PO number.\n| Convenience Amount Optional| Allows the merchant to add a flat fee to the total transaction to cover the cost of paying in a more convenient way for the customer (Eg. Online vs. in person at the municipal center). This function may be used by utility companies, government agencies, and schools.\n|  | Valid format is:\n|  | <ConvenienceAmt>_Amount_</ConvenienceAmt> where _Amount_ is the value to be added to the total transaction in DDDD.CC format.\n| Surcharge Amount Optional| Allows the merchant to add a fee to the total transaction to recoup the costs of offering the credit card transaction. This is different from a Convenience Fee (above) as that fee is for the added cost of offering the service in a more convenient way (pay for tickets online rather than in person).\n|  | Valid format is:\n|  | <SurchargeAmt>_Amount_</SurchargeAmt> where _Amount_ is the value to be added to the total transaction in DDDD.CC format.\n| Tip Amount Optional| Allows the customer to specify a dollar amount that is already included in the total amount for the purpose of tipping.\n|  | Valid format is:\n|  | <TipAmt>_Amount_</TipAmt> where _Amount_ is the value of the tip already included in the total transaction in DDDD.CC format.\n| Tax Amount Optional| Allows the merchant to add a dollar amount to the total transaction to cover sales tax.\n|  | Valid format is:\n|  | <TaxAmt>_Amount_</TaxAmt> where _Amount_ is the value to be added to the total transaction in DDDD.CC format.\n| Tax Exempt Optional| Allows the merchant to declare whether the transaction is tax exempt. The default value for this is F (false) when not supplied.\n|  | Valid format is:\n|  | <TaxExempt>_T_</TaxExempt> where _T_ or _TRUE_ denotes the transaction is tax exempt and _F_ or _FALSE_ would indicate it is taxable.\n| Sequence Number Optional| Identifies the payment order with a repeat sale or installment transaction. For example, payment 1 of 4.\n|  | Valid format is:\n|  | <SequenceNum>_SequenceNum_</SequenceNum> where _SequenceNum_ is any positive integer less than or equal to the SequenceCount.\n| Sequence Count Optional| Identifies the total number of charges that will be made for a repeat sale or installment transaction. For example, 4 payments must be made to complete the payment.\n|  | Valid format is:\n|  | <SequenceCount>_SequenceCount_</SequenceCount> where _SequenceCount_ is any positive integer greater than or equal to the _SequenceNum_.\n| Server ID | Unique server identification number. \n| Optional|  See [Invalid Character Processing.](#section/invalidchar). Valid format is:<ServerID>_ServerID_</ServerID> where _ServerID_ uniquely identifies the payment server used.\n| Time Out Optional| Processor time out value in seconds. The default value for the parameter is 30 seconds for a transaction and 300 seconds for a settlement transaction.\n|  | Valid format is:\n|  | <TimeOut>_TimeOut_</TimeOut> where _TimeOut_ is the processor time out value in seconds.\n| Training Mode Optional| This is an indicator that specifies whether transactions will be processed for local loop back testing or treated normally.\n|  | Valid formats are:\n|  | <TrainingMode>T</TrainingMode> where _T_ (true) indicates that training mode is active and transactions are processed for local loop back testing.\n|  | <TrainingMode>F</TrainingMode> where _F_ (false) indicates that training mode is inactive and transactions should be treated normally.\n| Transaction ID Optional | Merchant-assigned numerical string passed along with an original transaction that can be used for identification and voids.\n|  | Valid format is:\n|  | <TransactionID>_TransactionIdentifierValue_</TransactionID> where _TransactionIdentifierValueis_ a numerical string.\n| Target Optional | Identifies the target transaction ID for the original transaction you wish to void without the use of a PNRef.\n|  | Valid format is:\n|  | <Target>_TransactionIdentifierValue_</Target> where _TransactionIdentifierValue_ is a numerical string identifying the original transaction.\n| Force Optional |This is an indicator that specifies whether or not duplicate transactions will be processed.\n|  | Valid formats are:\n|  | <Force>_T_</Force> where _T_ (true) indicates that duplicate transactions are accepted.\n|  | <Force>_F_</Force> where _F_ (false) indicates that duplicate transactions are not accepted.\n|  | Note: Some processors, including Concord EFS, will not recognize this tag and delete duplicate transactions.\n| Register Number  | Unique identifier for a specific register.\n| Optional |See [Invalid Character Processing.](#section/invalidchar).\n|  | Valid format is:\n|  | <RegisterNum>_RegisterNum_</RegisterNum> where _RegisterNum_ is a valid unique identifier assigned to a specific register.\n| City  | City name for the card owner’s billing address.\n| Depending on processor, may be required |See [Invalid Character Processing.](#section/invalidchar).\n|  | Valid format is:\n|  | <City>_City_</City> where _City_ is the card owner’s city name.\n| Bill-To State  | Two-character state code for the card owner’s bill-to address.\n| Depending on processor, may be required |See [Invalid Character Processing.](#section/invalidchar).\n|  | Valid format is:\n|  | <BillToState>_BillToState_</BillToState> where _BillToState_ is the two-character state code for the card owner’s bill-to address.\n| Customer ID |Identification number assigned to the customer by the merchant.\n| Optional| \n|  | Valid format is:\n|  | <CustomerID>_CustomerID_</CustomerID> where _CustomerID_ is the customer’s assigned customer ID.\n| Purchase Order (PO) Number | Customer or PO number used with Level II information.\n| Optional| See [Invalid Character Processing.](#section/invalidchar).\n|  | Valid format is:\n|  | <PONum>_PONum_</PONum> where _‘PONum’_ is the number assigned to identify the customer or the PO.\n|  | Note: If using Level II with Global Payments, use the CustCode to pass this information instead.\n| Bill Payment | This is an indicator that specifies whether or not the transaction is being used to pay a utility bill. It is only supported when TransType = Sale or RepeatSale.\n| Optional| \n|  | Valid formats are:\n|  |<BillPayment>_T_</BillPayment> where _T_ (true) indicates that the transaction is being used to pay a utility bill.\n|  |<BillPayment>_F_</BillPayment> where _F_ (false) indicates that the transaction is being used for something other than a utility bill.\n|  | Note: This tag is only relevant to Retail, MOTO, and ecommerce markets. The information is currently supported by Vital, First Data North, and Global Payments processors. Other processors may be supported in the future.\n| Custom Fields | This tag is used to pass along information arbitrary custom information into a custom fields for the transaction.\n| Optional| Within the CustomFields tag a tag is created that has the name of the specific custom field to be defined where the value is then stored as the tag value. These names are not allowed to have spaces or special characters.\n|  | For example: If you had two custom fields (FruityPebbles and CocoaPebbles) and you wanted to pass the values of “18” FruityPebbles and a value of “Chocolate goodness” as the value of CocaoPebbles then the valid format would be:\n|  |<CustomFields>\n|  |<FruityPebbles>18</FruityPebbles>\n|  |<CocoaPebbles>Chocolate goodness</CocoaPebbles>\n|  |</CustomFields>”\n| Token Request | The RequestToken tag is used to request a token be returned for the initiating transaction. The token will be returned in the ExtData of the response\n| Optional| \n|  | Valid formats are:\n|  | <RequestToken>1</RequestToken> where “1” denotes a valid   “jstoken” type. Other types will be supported in future versions of the API\n| Entry Mode | Indicates how the values for payment information were obtained.\n| Optional| \n|  | Valid formats are:\n|  | <EntryMode>UNKNOWN</EntryMode> where _unknown_ indicates that the mode of entry is unknown.\n|  |<EntryMode>MANUAL</EntryMode> where _manual_ indicates that the payment values were manually entered.\n|  |<EntryMode>MagneticStripe</EntryMode> where _MagneticStripe_ indicates that the payment values were entered via magnetic stripe card reader (swiped card).\n|  |<EntryMode>ICC</EntryMode> where _ICC_ indicates that the mode of entry is Instant Card Clearing.\n|  |<EntryMode>PROXIMITY</EntryMode> where _proximity_ indicates that the payment values were entered via proximity card reader.\n| AMEX Batch Phase | When working with AMEX batch settlement, the Phase value can be used to determine the phase of the settlement file.\n| Optional| \n|  | Valid formats are:\n|  | <Phase>Confirm</Phase> where Confirm indicates that the batch is ready to settle\n|  |<Phase>Submit</Phase> where Submit indicates that the batch has been submitted to the payment processor\n|  |<Phase>None</Phase> where None indicates that no action has occurred\n|  |Note: Batches must be submitted before they can be settled (Confirm). If you send a “confirm” only, the most recently submitted batch will be settled.\n| IIAS Indicator |When working with healthcare applications it is necessary to comply with inventory information approval system merchant certifications.\n| Optional| The IIAS indicator will inform the gateway that it is about to process a healthcare transaction. Once that is configured associated parameters are passed to indicate the type of healthcare charges to be considered. The default value is F\n|  | Valid Examples are:\n|  | <IIAS_Indicator>T</IIAS_Indicator>\n|  |If this tag is not included the default is F (false) to indicate that this is not a healthcare transaction.\n|  |If the tag is included then some of the following parameters also need to be included in the ExtData\n|  |<QHP_Amount>120.00</QHP_Amount> where this denotes the total amount of Clinic or other qualified medical items.\n|  |<RX_Amount>100.00</RX_Amount> where this denotes the total amount of Prescription/Rx (℞) items.\n|  |<Vision_Amount>80.00</Vision_Amount> where this denotes the total amount of Vision or Optical items.\n|  |<Dental_Amount>300.00</Dental_Amount> where this denotes the total amount of Dental items.\n|  |<Clinical_Amount>600.00</Clinical_Amount> where this denotes the sum total of all medical items.\n|  |Note: These tags are not nested within the <IIAS_Indicator> tag but rather at the same level. They are only documented at this way to make it clear when to use these tags.\n| External IP| When using the Transact web service, the IP address defaults to the calling computer’s IP. If the request is coming from an external source, the external IP address can be substituted for the purpose of logging and fraud control.\n| Optional | To implement this IP pass through functionality, the following XML node should be included in the external data field of the web service call\n|  |<ExternalIP>IP Address Here</ExternalIP>\n|  | If the ExternalIP node is not included in the external data field, then the default behavior of using the callers IP address is used.\n| Client Data| When using the Transact web service, the API allows a client pass through data via the Client Data mechanism.  This data can be alphanumeric.\n| Optional | <ClientData>Arbitrary Data Here</ClientData>\n|  |The ClientData can be used to pass through various POS or Client data related to the transaction.\n\n# 3.2. ProcessDebitCard \nThis web service is used whenever a transaction is completed via a customer debit card.\n\n## Request\nProcessDebitCard(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNumber, SureChargeAmt, CashBackAmt, ExtData)\n\n## Response\nIBXTransact.Response\n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessDebitCard Input Parameters\nUnless noted otherwise, the parameter is **required**.\n\n| Parameter Name| Description \n|-----|-----\n| UserName | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password |    Password associated with the user name provided.\n| TransType| Identifies the type of debit card transaction being made.\n| | Valid values are:\n| | - Sale – make a purchase using a debit card\n| | - Return – credits the card holder’s account\n| | - Reversal – perform a manual full reversal on a debit card sale within 24 hours of the original transaction. The expected behavior of this transaction type is defined by the type of the payment processor the merchant account is configured for. See [Credit Card Reversals.](#section/reverse)\n| | - Inquire – check the balance\n| | BuyPass fuel transactions only:\n| | - Auth – authorize the amount on a debit card\n| | - Force – force an Auth transaction in to the current batch (PostAuth)Terminal-based processors only:\n| | - Capture – settle a single transaction in the current batch\n| | Terminal-based processors and host-based processors supporting batch release feature only:\n| | - CaptureAll – settle all transactions in the current batch\n| | Global Canadian Debit :\n| | - AddReversal – used when the host sends a response and the information is validated through the pin pad, if the information is found to be invalid. This transaction type can reverse the transaction sent to the host. The PNREF number of the original transaction can be sent along with the AddReversal transaction type to perform the reversal of that transaction.\n| CardNum\n  Not required for Capture and CaptureAll transactions| Debit card number used to uniquely identify the owner’s account.\n| ExpDate| Debit card date of expiration in MMYY format.\n| MagData| Data located the magnetic strip on the back of the card. The format of the MagData is CardNum=ExpDate followed by the service date and checksum. For example:\n| Required on all swiped transactions| 36438999960016=05121015432112345678\n| NameOnCard| Card owner’s name as it appears on the card.\n| Optional| \n| Amount| Total transaction amount in DDDD.CC format.\n| Not required on CaptureAll transactions| Note: This amount includes the CashBackAmt and SureChargeAmt.\n| InvNum| The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice.\n| Optional| View the [ExtData Field Definitions](#section/extdatadef) for more information.\n| PNRef| Unique payment reference number used to identify a single transaction within the system. The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created.\n| Required on Force and Capture transactions| \n| Pin| The encrypted PIN-block returned by the PIN pad.\n| Not required in Capture and CaptureAll transactions| Note: The transaction will fail if an unencrypted PIN is used.\n| | Note: This information is not required for PIN-less debit transactions. See [PIN-less Debit Transactions.](#section/pinless) \n| RegisterNumber| A string that uniquely identifies the register, terminal, or computer on which the transaction was performed. \n|Optional |  \n| SureChargeAmt|  The amount, in DDDD.CC format, charged by a merchant in exchange for processing a debit card transaction.\n|Optional |  \n|CashBackAmt | The amount, in DDDD.CC format, requested by the card holder in cash back from the debit transaction. \n|Optional |  \n|ExtData |  The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. \n|Optional |  ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n\n## ExtData Parameters Table\nView the ExtData Examples and Parameters Table below for available parameters.\n\n## ExtData Parameter Example\nExample\n\nTo view the ExtData Parameters table click &nbsp;\n\n| ExtData Parameters| Description \n|-----|-----\n|Timeout | Processor time out value in seconds. The default value for the parameter is 30 seconds for a transaction and 300 seconds for a settlement transaction.\n|Optional | \n| | Valid format is:\n| | <TimeOut>_TimeOut_</TimeOut> where _TimeOut_ is the processor time out value in seconds.\n|TrainingMode | This is an indicator that specifies whether transactions will be processed for local loop back testing or treated normally.\n| Optional|\n| | Valid formats are:\n| | <TrainingMode>T</TrainingMode> where _T_ (true) indicates that training mode is active and transactions are processed for local loop back testing.\n| | <TrainingMode>F</TrainingMode> where _F_ (false) indicates that training mode is inactive and transactions should be treated normally.\n| Key Serial Number| PIN pad serial number.\n|Required for all non-PIN-less debit transactions | Valid format is:\n| | <KeySerialNumber>_KeySerialNumber_</KeySerialNumber> where _KeySerialNumber_ is the PIN pad serial number used in managing DUKPT PIN pads.\n|Force | This is an indicator that specifies whether or not duplicate transactions will be processed.\n| Optional|\n| |Valid formats are:\n| |<Force>T</Force> where _T_ (true) indicates that duplicate transactions are accepted.\n| |<Force>F</Force> where _F_ (false) indicates that duplicate transactions are not accepted.\n| |Note: Some processors, including BuyPass, will not recognize this tag and reject duplicate transactions.\n\n# 3.3. ProcessCheck  \nThis web service is used whenever a transaction is completed via customer check.\n\n## Request\nProcessCheck(UserName, Password, TransType, CheckNum, TransitNum, AccountNum, Amount, MICR, NameOnCheck, DL, SS, DOB, StateCode, CheckType, ExtData)\n\n## Response\nNeed Response here    \n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessCheck Input Parameters\nUnless noted otherwise, the parameter is **required**.\n\n| Parameter Name| Description \n|-----|-----\n| UserName | User name assigned in the payment server. The user must have an appropriate level of access in order to utilize the web service.\n|Password |    Password associated with the user name provided.\n| TransType| Identifies the type of credit card transaction being made.\n| | Valid values are:\n| | - Sale – make a purchase using a check\n| | - Auth (Verify) – authorizes or verifies the amount of a check\n| | - Return – return the money of a settled check transaction to the check holder\n| | - Void – undo a settled check transaction\n| | - Force – (ForceSale) force a previous Sale transaction into the current batch\n| | Terminal-based Processors Only:\n| | - Capture – settle a single transaction in the current batch\n| | - CaptureAll – settle all transactions in the current batch\n| | Note: If using the Return, Void, Force, or Capture TransTypes, you must include a PNRef using the ExtData parameter.\n| | Note: If using the Sale or Return TransTypes, you may be required to include city of account, bill-to street, and bill-to postal code using the ExtData parameter.\n| CheckNum| Uniquely identifies an individual’s check.\n| Not required for Capture and CaptureAll transactions|\n|TransitNum | Uniquely identifies the bank holding funds. Also called routing number.\n|Not required for Capture and CaptureAll transactions |\n| AccountNum| Uniquely identifies the check owner’s bank account.\n|Not required for Capture and CaptureAll transactions |\n|Amount | Total transaction value in DDDD.CC format.\n|Not required for Capture and CaptureAll transactions |\n|MICR | Magnetic Ink Check Reader data line. This data string includes the TransitNum and AccountNum.\n|Required on all swiped card transactions |\n| |Note: This input is required for processing check/consumer present transactions.\n| |Note: The formats of the MICR is processor specific and if the developer is not sure about what format your Check processor accepts, pass the RAW MICR as well in the TOAD format and details of this are described in the extended data. If the developer is sure about the precise format for MICR that is supported by the Check processor, then there is no need to pass the Raw MICR in TOAD format.\n|NameOnCheck | Check owner’s name as it appears on the check.\n|Not required for Capture and CaptureAll transactions | See [Invalid Character Processing.](#section/invalidchar)\n|May be required by merchant’s processor setup |\n|DL | Check owner’s driver’s license number.\n| Optional|See [Invalid Character Processing.](#section/invalidchar)\n|SS | Check owner’s Social Security number.\n| Optional|See [Invalid Character Processing.](#section/invalidchar)\n|DOB |Check owner’s date of birth.\n|Optional |See [Date Formats.](#section/dateformat)\n|StateCode |Check owner’s two-character state code.\n|Optional unless required by merchant’s processor setup |See [Invalid Character Processing.](#section/invalidchar)\n|CheckType | Identifies the type of check used in the transaction.\n|Optional | Valid values are:\n| |- Personal\n| |- Corporate\n| |- Government\n|ExtData |The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. \n|Optional |ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n\n## ExtData Parameters Table\nView the ExtData Examples and Parameters Table below for available parameters.\n\n## ExtData Parameter Examples\nExample\n\nTo view the ExtData Parameters table click\n\n| ExtData Parameters| Description \n|-----|-----\n| Timeout | Processor time out value in seconds. The default value for the parameter is 30 seconds.\n|Optional | Valid format is:\n| | <TimeOut>_TimeOut_</TimeOut> where _TimeOut_ is the processor time out value in seconds.\n|PNRef | Unique payment reference number used to identify a single transaction within the system. The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created.\n|Required for TransType = Return, Void, Force, or Capture |\n| |Valid format is:\n| |<PNRef>PNRef</PNRef> where PNRef is the valid payment reference number assigned to the transaction that is to be returned, voided, forced, or captured.\n|Phone |Check owner’s phone number.\n|Optional | See [Invalid Character Processing.](#section/invalidchar)\n| |Valid format is:\n| |<Phone>_Phone_</Phone> where _Phone_ is the check owner’s phone number.\n|Email Address | Check owner’s email address.\n|Optional | See [Invalid Character Processing.](#section/invalidchar)\n| |Valid format is:\n| |<Email>_Email_</Email> where _Email_ is the check owner’s email address.\n|Raw MICR |Raw Magnetic Ink Check Reader data line from the check reader.\n|Required for check/consumer present transactions | Valid format is:\n| | <RawMICR>_RawMICR_</RawMICR> where _RawMICR_ is the transit number, account number, and check number in the following format:_TransitNumTAccountNumOCheckNum_\n| |Note: TOAD format is the accepted default format for raw MICR for all check processors supported.\n|Invoice Number | The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice.\n|Optional |\n| |Valid format is:\n| |<InvNum>_InvNum_</InvNum> where _InvNum_ is the merchant-assigned invoice number.\n| |Note: Many merchants use the invoice ID to store other values in the database. The exact nature of the value stored will vary by merchant.\n|TrainingMode | This is an indicator that specifies whether transactions will be processed for local loop back testing or treated normally.\n|Optional |\n| |Valid formats are:\n| |<TrainingMode>T</TrainingMode> where _T_ (true) indicates that training mode is active and transactions are processed for local loop back testing.\n| |<TrainingMode>F</TrainingMode> where _F_ (false) indicates that training mode is inactive and transactions should be treated normally.\n|Alliance Number | Check alliance number.\n|Optional | Valid formats are:\n| |<AccType>_Checking_</AccType> to indicate a checking account\n| |<AccType>_Savings_</AccType> to indicate a savings account\n|City of Account | City name for the check owner’s residential address.\n|Depending on merchant setup, may be required for TransType=Sale or Return | See [Invalid Character Processing.](#section/invalidchar)\n| |Valid format is:\n| |<CityOfAccount>_CityOfAccount_</CityOfAccount> where _CityOfAccount_ is the check owner’s city name.\n|Bill-To Street | Street address for the check owner’s bill-to address.\n|Depending on merchant setup, may be required for TransType=Sale or Return | See [Invalid Character Processing.](#section/invalidchar)\n| |Valid format is:\n| |<BillToStreet>_BillToStreet_</BillToStreet> where BillToStreet is the street name for the check owner’s bill-to address.\n|Bill-To City | City name for the check owner’s bill-to address.\n|Optional | See [Invalid Character Processing.](#section/invalidchar)\n| |Valid format is:\n| |<BillToCity>_BillToCity_</BillToCity> where _BillToCity_ is the city name for the check owner’s bill-to address.\n|Bill-To State |Two-character state code for the check owner’s bill-to address.\n|Optional | See [Invalid Character Processing.](#section/invalidchar)\n| |Valid format is:\n| |<BillToState>_BillToState_</BillToState> where _BillToState_ is the two-character state code for the check owner’s bill-to address.\n|Bill-To Postal Code | Postal/Zip code for the check owner’s bill-to address.\n|Depending on merchant setup, may be required for TransType=Sale or Return | See [Invalid Character Processing.](#section/invalidchar)\n| |Valid format is:\n| |<BillToPostalCode>_BillToPostalCode_</BillToPostalCode> where _BillToPostalCode_ is the street name for the check owner’s bill-to address.\n|Bill-To Country | Country name for the check owner’s bill-to address.\n| Optional| See [Invalid Character Processing.](#section/invalidchar)\n| |Valid format is:\n| |<BillToCountry>_BillToCountry_</BillToCountry> where _BillToCountry_ is the country name for the check owner’s bill-to address.\n|Customer ID |Identification number assigned to the customer by the merchant.\n|Optional |Valid format is:\n| |<CustomerID>_CustomerID_</CustomerID> where _CustomerID_ is the customer’s assigned customer ID.\n| Card Type|For use with image uploads specific to the processor RDM_ITMS.\n|Optional | Valid format is:\n| |<CardType>_IMAGE_<CardType>\n|External IP | When using the Transact web service, the IP address defaults to the calling computer’s IP. If the request is coming from an external source, the external IP address can be substituted for the purpose of logging and fraud control.\n|Optional | To implement this IP pass through functionality, the following XML node should be included in the external data field of the web service call…\n| |<ExternalIP>_IP Address Here_</ExternalIP>\n| |If the ExternalIP node is not included in the external data field, then the default behavior of using the callers IP address is used.\n\n# 3.4. ProcessEBTCard \n EBT is used in all U.S. states to issue government benefits to recipients. Benefits are automatically deposited onto the card by the state and recipients are issued an “EBT card” (similar to a bank ATM or debit card) to receive their food stamp and/or cash benefits. Recipients with food stamp benefits can use their EBT cards for eligible food purchases at most grocery stores and some other retailers.\n\n## Request\nProcessEBTCard(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmount, CashBackAmt, ExtData)\n\n## Response\nResponse here  \n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessEBTCard Input Parameters\nUnless noted otherwise, the parameter is **required**.\n\n| Parameter Name| Description \n|-----|-----\n| UserName | User name assigned in the payment server. The user must have an appropriate level of access in order to utilize the web service.\n|Password |Password associated with the user name provided.\n|TransType |Identifies the type of credit card transaction being made.\n| |Valid values are:\n| |- FoodStampSale – make a purchase on an EBT cardholder’s food stamp account \n| | - FoodStampReturn – credit to an EBT cardholder’s food stamp account\n| | - CashBenefitSale – make a purchase on an EBT cardholder’s cash benefit account\n| | - Inquire – check the balance on an EBT card\n| | - Capture – settle a single transaction in the current batch; only for terminal-based processors\n| | - CaptureAll – settle all transactions in the current batch; only for terminal-based processors or host-based processors that support a batch release feature\n| | - Force (Voucher Clear) – allow a merchant to pass a voucher number along with authorization code to perform a pin-less EBT sale. The voucher reference number is a reference number on the voucher slip to clear the transaction along with the authorization code obtained via a voice approval.\n| |The following transaction types apply to eWic processing.\n| |- EWICAUTHORIZATION – Authorize amount for eWic transaction\n| |- EWICCOMPLETION – Complete or capture the amount for an eWic authorization\n| |- EWICSALE – Perform an eWic Sale\n|CardNum | EBT card number used to uniquely identify the owner’s account.\n|Not required for Capture and CaptureAll transactions |\n|ExpDate | EBT card date of expiration in MMYY format.\n|MagData | Data located on the magnetic strip on the back of the card. The format of the MagData is CardNum=ExpDate followed by the service code and checksum.\n|Optional |\n| |For example:\n| |36438999960016=05121015432112345678\n|NameOnCard |Card owner’s name as it appears on the card.\n| Optional unless required by merchant’s processor setup| Note: Invalid characters will be removed from this entry. See [Invalid Character Processing.](#section/invalidchar)\n|Amount |Total transaction amount in DDDD.CC format.\n|Not required for Capture and CaptureAll transactions |Note: This amount includes the CashBackAmt and SureChargeAmt.\n|InvNum |The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice.\n|Optional |\n| |View the [ExtData Field Definitions](#section/extdatadef)   for more information.\n| PNRef| Unique payment reference number used to identify a single transaction within the system.\n|Required on all swiped card transactions | The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created.\n|Pin | The encrypted PIN-block returned by the PIN pad.\n|RegisterNum | A string that uniquely identifies the register, terminal, or computer on which the transaction was performed.\n| Optional|\n| SureChargeAmount| The amount, in DDDD.CC format, charged by a merchant in exchange for processing a debit card transaction.\n| Optional|\n|CashBackAmt | The amount, in DDDD.CC format, requested by the card holder in cash back from the debit transaction.\n|Optional |\n|ExtData | The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. \n|Optional | ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n\n## ExtData Parameters Table\nView the ExtData Examples and Parameters Table below for available parameters.\n\n## ExtData Parameter Examples\nTo view the ExtData Parameters table click\n\n| ExtData Parameters| Description \n|-----|-----\n| Timeout | Processor time out value in seconds. The default value for the parameter is 30 seconds and 300 seconds for a settlement transaction.\n|Optional |\n||Valid format is:\n| |<TimeOut>_TimeOut_</TimeOut> where _TimeOut_ is the processor time out value in seconds.\n|Training Mode |This is an indicator that specifies whether transactions will be processed for local loop back testing or treated normally.\n|Optional |\n| |Valid formats are:\n| |<TrainingMode>_T_</TrainingMode> where _T_ (true) indicates that training mode is active and transactions are processed for local loop back testing.\n| |<TrainingMode>_F_</TrainingMode> where _F_ (false) indicates that training mode is inactive and transactions should be treated normally.\n|Key Serial Number | Key Serial Number: (required for all non-PIN-less debit transactions) PIN pad serial number.\n|Optional |\n| |Valid format is:\n| |<KeySerialNumber>_KeySerialNumber_</KeySerialNumber> where _KeySerialNumberis_ the PIN pad serial number used in managing DUKPT PIN pads.\n|Force | This is an indicator that specifies whether or not duplicate transactions will be processed.\n|Optional |\n| |Valid formats are:\n| |<Force>_T_</Force> where _T_ (true) indicates that duplicate transactions are accepted.\n| |<Force>_F_</Force> where _F_ (false) indicates that duplicate transactions are not accepted.\n| |Note: Some processors, including BuyPass, will not recognize this tag and reject duplicate transactions.\n|External IP | When using the Transact web service, the IP address defaults to the calling computer’s IP. If the request is coming from an external source, the external IP address can be substituted for the purpose of logging and fraud control.\n|Optional |\n| |To implement this IP pass through functionality, the following XML node should be included in the external data field of the web service call…\n| | <ExternalIP>_IP Address Here_</ExternalIP>\n| |If the ExternalIP node is not included in the external data field, then the default behavior of using the callers IP address is used.\n|eWic transactions (Specific to RapidConnect)\n| |For eWic transactions, you can supply eWic detail using the following parameters and must be contained in the EWicDetail group:\n| | - UPCPLUInd – Indicator for UPC/PLU, 0 for UPC, 1 for PLU\n| | - UPCPLUData – Can be up to 16 characters\n| | - UPCPrice – Can only be up to 6 digits, which includes two implied decimals\n| | - UPCQty – Number of Items or total weight of items, Can only be up to 5 digits, which includes two implied decimals\n| |Below is an examples of what the string would look like without data:\n| |<EWicDetails><EWicDetail><UPCPLUData/><UPRPrice/>\n| |<UPCQty/></EWicDetail></EWicDetails>\n|Merchant FNS:\n| |For a Food benefit/snap transaction you can provide the Merchant FNS Number in the MerchantFNS tag:\n| | - <MerchantFNS>_12345_</MerchantFNS>\n\n# 3.5. ProcessGiftCard \n This web service is used to process gift card transactions for a merchant.\n\n## Request\nProcessGiftCard(UserName, Password, TransType, CardNum, ExpDate, MagData, Amount, InvNum, PNRef, ExtData)\n\n## Response\nResponse here  \n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessGiftCard Input Parameters\nUnless noted otherwise, the parameter is  **required**.\n\n| Parameter Name| Description \n|-----|-----\n| UserName | User name assigned in the payment server. The user must have an appropriate level of access in order to utilize the web service.\n|Password| Password associated with the user name provided.\n|TransType| Identifies the type of gift card transaction being made.\n||Valid values are:\n||- Redeem  – make a purchase on a gift card\n||- Reload  – increase the balance on a gift card\n||- Refund  – refund money back to a gift card\n||- Activate  – activate a gift card\n||- Deactivate  – deactivate a gift card\n||- Inquire  – check the balance on a gift card\n||- Void  – undo an unsettled transaction\n||_Paymentech/Tampa only:_\n||- Force – place a transaction not processed through the payment server into the current batch (ForceAuth).\n||_Terminal-based processors only:_\n|| - Capture – settle a single transaction in the current batch; only for terminal-based processors\n||_Processors supporting the batch release feature only:_\n||- CaptureAll – settle all transactions in the current batch.\n|CardNum| Gift card number used to uniquely identify the owner’s account.\n|ExpDate| Gift card date of expiration in MMYY format.\n|MagData|Data located the magnetic strip on the back of the card. The format of the MagData is CardNum=ExpDate followed by the service code and checksum. For example:\n|Required on all swiped transactions| 36438999960016=05121015432112345678\n|Amount| Total transaction amount in DDDD.CC format.\n|Not required for CaptureAll transactions| Note: This amount includes the CashBackAmt and SureChargeAmt.\n|InvNum| The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice.\n|Optional| View the [ExtData Field Definitions](#section/extdatadef) for more information.\n|PNRef| Unique payment reference number used to identify a single transaction within the system. \n|Required on Force and Capture transactions|The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created.\n|ExtData| The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters.\n|Optional| ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n\n## ExtData Parameters Table\nView the ExtData Examples and Parameters Table below for available parameters.\n\n## ExtData Parameter Examples\nExample\n\nTo view the ExtData Parameters table click\n\n| ExtData Parameters| Description \n|-----|-----\n| Training Mode | This is an indicator that specifies whether transactions will be processed for local loop back testing or treated normally.\n|Optional |\n||Valid formats are:\n| |<TrainingMode>T</TrainingMode> where _T_ (true) indicates that training mode is active and transactions are processed for local loop back testing.\n| |<TrainingMode>F</TrainingMode> where _F_ (false) indicates that training mode is inactive and transactions should be treated normally.\n|Force | This is an indicator that specifies whether or not duplicate transactions will be processed.\n|Optional |\n| |Valid formats are:\n| |<Force>_T_</Force> where _T_ (true) indicates that duplicate transactions are accepted.\n| |<Force>_F_</Force> where _F_ (false) indicates that duplicate transactions are not accepted.\n| |Note: Some processors, including BuyPass, will not recognize this tag and reject duplicate transactions.\n|Time out | Processor time out value in seconds. The default value for the parameter is 30 seconds for a transaction and 300 seconds for a settlement transaction.\n|Optional |\n| |Valid format is:\n| | <TimeOut>_TimeOut_</TimeOut> where _TimeOut_ is the processor time out value in seconds.\n|Register Number | This is unique identifier for the register, terminal or computer used to process the gift card transaction.\n|Optional |\n| |Valid format is:\n| | <RegisterNum>_RegisterNum_</RegisterNum> where _RegisterNum_ is equal to the register identification number stored on the merchant’s account record.\n|Paymentech/Tampa Only\n|Force Authorizatioln |  Places a previously authorized transaction (TransType = Redeem, Reload, or Activate) into the current batch.\n|Optional | \n| | <ForceAuth><AuthCode>_AuthCode_</AuthCode></ForceAuth> where _AuthCode_ is the previously obtained authorization code from Paymentech/Tampa.\n|External IP |  When using the Transact web service, the IP address defaults to the calling computer’s IP. If the request is coming from an external source, the external IP address can be substituted for the purpose of logging and fraud control.\n| Optional| \n| | To implement this IP pass through functionality, the following XML node should be included in the external data field of the web service call…\n| | <ExternalIP>IP Address Here</ExternalIP>\n| | If the ExternalIP node is not included in the external data field, then the default behavior of using the callers IP address is used.\n\n# 3.6. ProcessSignature \n The ProcessSignature web service allows you to capture customer signatures from an input device.\nThis web service is used to capture a customer signature electronically and store that data on the virtual terminal. Transactions with captured signatures appear in the Payment Server with a small icon to the left of the transaction ID.\n\n## Request\nProcessSignature(UserName, Password, SignatureType, SignatureData, PNRef, Result, AuthCode, ExtData)\n\nThis example combines the previous ProcessCreditCard call and appends a signature to it. An [example file is linked](https://www.payroc.com/Common/Images/Custom/5982/api-docs/gateway_signature.tif) (see “Path to File”) which you can download and save locally to try.\n\n```\nSmartPaymentsSoapClient transact =\nnew SmartPaymentsSoapClient(\"SmartPaymentsSoap\");\n\ntransactResponse = transact.ProcessCreditCard(\n\"username\", \"password\", \"Sale\", \"4012888888881881\",\n\"1216\", \"\", \"Barney Rubble\", \"200\", \"666\", \"\", \"\", \"\", \"999\",\n@\"<EntryMode>MANUAL</EntryMode><TipAmt>3.85</TipAmt>\n  <RegisterNum>2</RegisterNum>\"\n);\n\nByte[] signatureBytes = File.ReadAllBytes(@\"<Path To File>\");\nString signatureContents64 = Convert.ToBase64String(signatureBytes);\n\nresponse = transact.ProcessSignature(\"username\", \"password\", \"Receipt1\",\nsignatureContents64, transactResponse.PNRef, \"\",\ntransactResponse.AuthCode, \"\");\n\n```\n## Response\n\n\n```\nMessage  \"APPROVAL\"  string\nMessage1  \"\"  string\nMessage2  \"\"  string\nPNRef  \"\"  string\nReceiptURL  null  string\nRespMSG  \"OK\"  string\nResult  0  int\n```\n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessSignature Input Parameters\nUnless noted otherwise, the parameter is  **required**.\n\n| Parameter Name| Description \n|-----|-----\n| UserName | User name assigned in the payment server. The user must have an appropriate level of access in order to utilize the web service.\n|Password |Password associated with the user name provided.\n|SignatureType |   Identifies the format of the signature data being provided. Valid values are:\n| |Valid values are:\n| |- Signature1 – Lipman credit\n| |- Signature2 – Lipman check\n| |- Signature3 – no longer used\n| |- Signature4 – signature provided in a vector string\n| |- Receipt1 – TIFF file (compressed and encoded Base64)\n| SignatureData| This parameter holds the data string containing the signature data.\n| | If SignatureType = Signature4, the SignatureData will contain a string value of vector coordinates, delimited with a ^ character in the following format:\n| |x1,y1^x2,y2^xN,yN^~\n| |Where ^ is the coordinate delimiter, ~ is the ending delimiter, and a comma (,) is the vector delimiter.\n| |If there is a pen up event, use the coordinate 0,65535 to signal a break in the line.\n| |If SignatureType = Receipt1, you must compress and Base64 encode the image data. See [Compression and Encoding.](#section/comp)\n|PNRef | Unique payment reference number used to identify a single transaction within the system. The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created.\n|Result | Indicator that specifies whether the transaction was approved.\n|Optional | Valid entries are:\n| | - 1 (true) – transaction was approved\n| | - 0 (false) – transaction was not approved\n|AuthCode | The approval code is a 6-character string (alphanumeric) generated by the issuing bank. The code is used the card issuer to verify the specific authorization when transactions are being settled.\n|Optional | \n|ExtData | The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. \n|Optional | ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n| | The following information may be added via the ExtData parameter:\n| | Training Mode: This is an indicator that specifies whether transactions will be processed for local loop back testing or treated normally.\n| | Valid formats are:\n| | - <TrainingMode>_T_</TrainingMode> where _T_ (true) indicates that training mode is active and transactions are processed for local loop back testing.\n| | - <TrainingMode>_F_</TrainingMode> where _F_ (false) indicates that training mode is inactive and transactions should be treated normally.\n\n# 3.7. ProcessBatch \nThe ProcessBatch web service provides the ability to control closing open batches for a merchant across Credit, Debit, EBT, ALL payment types. It serves as a convenience function as an alternative to calling Process(Credit|Debit|EBT)Card with the “CaptureAll” or “Capture” transaction types.\n\n## Request\nProcessBatch(UserName, Password, TransType, PaymentType, BatchID, BatchStatus, PNRef, ExtData)\n\n```\nSmartPaymentsSoapClient transact =\nnew SmartPaymentsSoapClient(\"SmartPaymentsSoap\");\n\ntransactResponse = transact.ProcessBatch(\"username\", \"password\", \"CAPTURE\", \"EBT\", \"\", \"\", \"\", \"\");\n```\n\n## Response\n\n```\n<Response>\n<Result>0</Result>\n<RespMSG>Approved</RespMSG>\n<Message>OK</Message>\n<Message1></Message1>\n<Message2></Message2>\n<AuthCode>GB79</AuthCode>\n<PNRef></PNRef>\n<HostCode>GB79</HostCode>\n<HostURL></HostURL>\n<ReceiptURL></ReceiptURL>\n<GetAVSResult></GetAVSResult>\n<GetAVSResultTXT></GetAVSResultTXT>\n<GetStreetMatchTXT></GetStreetMatchTXT>\n<GetZipMatchTXT></GetZipMatchTXT>\n<GetCVResult></GetCVResult>\n<GetCVResultTXT></GetCVResultTXT>\n<GetGetOrigResult></GetGetOrigResult>\n<GetCommercialCard></GetCommercialCard>\n<WorkingKey></WorkingKey>\n<KeyPointer></KeyPointer>\n<ExtData>CardType=CREDIT<Batch><Record>Summary</Record><PaymentTypes>CREDIT</PaymentTypes><Summary>Net_Count=9,Net_Amount=9.32</Summary><VISA>Return=1.23,Sale=10.55,Return_Cnt=1,Sale_Cnt=5,Cnt=6</VISA></Batch></ExtData>\n<AuthorizedAmount></AuthorizedAmount>\n<Balance></Balance>\n</Response>\n```\n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessBatch Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n| UserName | User name assigned in the payment server. The user must have an appropriate level of access in order to utilize the web service.\n|Password |Password associated with the user name provided.\n|TransType |   Currently only CAPTURE is supported.\n|PaymentType |This parameter determines which open batches to attempt to close. If not supplied ALL is assumed. This would be the equivalent of calling each of the Process(Credit,Debit,EBT)Card functions in turn with a CaptureAll transaction type.\n| Optional|\n| |The valid values are:\n| |- ALL\n| |- CREDIT\n| |- DEBIT\n| |- EBT\n| |- CHECK\n|BatchID |\n| |Currently unused\n| Optional|\n|BatchStatus |\n| |Currently unused\n|Optional |\n|PNRef |Unique payment reference number used to identify a single transaction within the system. The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created.\n|Optional |If a PNRef is supplied a PaymentType must be provided as well. The gateway will settle the PNRef associated with the specific payment type.\n|ExtData | The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. \n|Optional |ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n| |The following information may be added via the ExtData parameter:\n| | Timeout: The timeout for the transaction in seconds. This defaults to 40 seconds\n| |Valid formats are:\n| |- <Timeout>60</Timeout>\n| |Training Mode: This is an indicator that specifies whether transactions will be processed for local loop back testing or treated normally.\n| |Valid formats are:\n| |- <TrainingMode>_T_</TrainingMode> where _T_ (true) indicates that training mode is active and transactions are processed for local loop back testing.\n| |<TrainingMode>_F_</TrainingMode> where _F_ (false) indicates that training mode is inactive and transactions should be treated normally.\n\n# 3.8. GetInfo \n The GetInfo web service allows for miscellaneous checks against the gateway. These include the status of a current batch or an end-to-end status check to see if the gateway is currently responding.\n\n## Request\nGetInfo(UserName, Password, TransType, ExtData)\n\n```\nSmartPaymentsSoapClient transact =\nnew SmartPaymentsSoapClient(\"SmartPaymentsSoap\");\n\ntransactResponse = transact.GetInfo(\"username\", \"password\", \"BatchInquiry\", \"\");\n```\n\n## Response\n```\n<Response>\n<Result>0</Result>\n<RespMSG>Approved</RespMSG>\n<Message>\n</Message>\n<Message1>\n</Message1>\n<Message2>\n</Message2>\n<AuthCode>\n</AuthCode>\n<PNRef>\n</PNRef>\n<HostCode>\n</HostCode>\n<HostURL>\n</HostURL>\n<ReceiptURL>\n</ReceiptURL>\n<GetAVSResult>\n</GetAVSResult>\n<GetAVSResultTXT>\n</GetAVSResultTXT>\n<GetStreetMatchTXT>\n</GetStreetMatchTXT>\n<GetZipMatchTXT>\n</GetZipMatchTXT>\n<GetCVResult>\n</GetCVResult>\n<GetCVResultTXT>\n</GetCVResultTXT>\n<GetGetOrigResult>\n</GetGetOrigResult>\n<GetCommercialCard>\n</GetCommercialCard>\n<WorkingKey>\n</WorkingKey>\n<KeyPointer>\n</KeyPointer>\n<ExtData>Net_Amount=9.32,Net_Count=6,Credit_Sale_Amount=10.55,Credit_Sale_Count=5,Credit_Return_Amount=1.23,Credit_Return_Count=1,Credit_Net_Amount=9.32,Credit_Net_Count=6,Debit_Sale_Amount=0.00,Debit_Sale_Count=0,Debit_Return_Amount=0.00,Debit_Return_Count=0,Debit_Net_Amount=0.00,Debit_Net_Count=0,EBT_Sale_Amount=0.00,EBT_Sale_Count=0,EBT_Return_Amount=0.00,EBT_Return_Count=0,EBT_Net_Amount=0.00,EBT_Net_Count=0,Check_Sale_Amount=0.00,Check_Sale_Count=0,Check_Net_Amount=0.00,Check_Net_Count=0</ExtData>\n<AuthorizedAmount>\n</AuthorizedAmount>\n<Balance>\n</Balance>\n</Response>\n```\n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## GetInfo Input Parameters\nUnless noted otherwise, the parameter is  **required**.\n\n| Parameter Name| Description \n|-----|-----\n| UserName | User name assigned in the payment server. The user must have an appropriate level of access in order to utilize the web service.\n|Password |Password associated with the user name provided.\n|TransType |   CThe transaction type for the GetInfo call.\n| |Valid Values:\n| | - BatchInquiry – return a summary of the current batch status for the merchant (counts and amounts) for all types (Credit, Debig, EBT, Check)\n| |- StatusCheck – Run a pseudo transaction through the API merchants processor to determine if the gateway is responding. Returns OK only in ExtData\n|ExtData |\n| |The ExtData input parameter is reserved for future use.\n|Optional |\n\n# 3.9. Transaction Response Fields \nThe following response fields may be part of the return value for web services using transact.asmx operations. These web services include:\n\n- GetInfo\n- ProcessCheck\n- ProcessCreditCard\n- ProcessDebitCard\n- ProcessEBTCard\n- ProcessGiftCard\n- ProcessSignature\n\n| Response Field  Data Value |  Description | \n|-----|-----\n|AuthCode|Returns the transaction result code from the payment processor.\n|String up to 50 characters| This value can be either an approval code, for approved transactions, or an error code, for declined transactions\n|ExtData| Returns extra data from the processed transaction.\n|String up to 500 characters| The value of ExtData will be in a specific format. The format typically consists of the name of the data field, an equal sign, and then the value for the data field. Multiple data fields are separated with a comma.\n||See the [ExtData Field Definitions](#section/extdatadef) for full description of data elements that can be returned.\n||The following is an example of the format: ExtName1=ExtValue1,ExtName2=ExtValue2\n|GetAVSResult| Returns the overall address verification result code from the payment processor.\n|String up to 1 character|\n||When programmatically validating an AVS Result, this value should ALWAYS be used instead of any formatted response message describing the result.\n||View the [AVS Response Fields.](#section/avs-response-fields) \n|GetAVSResultTXT| Returns the formatted response message when address verification is performed.\n|String up to 25 characters| \n|| Do NOT use this when programmatically validating a transaction’s AVS result; please see GetAVSResult field.\n|GetCommercialCard| Returns the payment processor’s response indicator that specifies if the card is a commercial card.\n|String representing Boolean value|\n||This value is only applicable to credit card transactions. The card verification number is typically printed on the back of the card and not embossed on the front. It is used as an extra authentication method for “card not present” transactions. When programmatically validating a CV Result, this value should ALWAYS be used instead of any formatted response message describing the result.\n|GetCVResult| Returns the card verification result code from the payment processor.\n|String up to 1 character|\n||This value is only applicable to credit card transactions. The card verification number is typically printed on the back of the card and not embossed on the front. It is used as an extra authentication method for “card not present” transactions. When programmatically validating a CV Result, this value should ALWAYS be used instead of any formatted response message describing the result.\n||View the [CV Response Fields.](#section/cv-response-fields) \n|GetCVResultTXT| Returns the formatted response message when card verification is performed.\n|String up to 25 characters|\n||This value is only applicable to credit card transactions.  Do NOT use this when programmatically validating a transaction’s CV result; please see GetCVResult field.\n|GetStreetMatchTXT| Returns the formatted response message when street number address verification is performed.\n|String up to 25 characters|\n||This value will typically be “Match”, for correctly matching the street address, or “No Match”, for an incorrect street address.\n|GetZipMatchTXT| Returns the formatted response message when zip code address verification is performed.\n|String up to 25 characters|\n||This value will typically be “Match”, for correctly matching the zip code, or “No Match”, for an incorrect zip code.\n|HostCode| Typically returns a number which uniquely identifies the transaction in the payment processor.\n|String up to 30 characters|\n||This value may not be returned for all payment processors.\n|Message| Returns a formatted response message concerning the processed transaction.\n|String up to 50 characters|\n||This value will typically be “APPROVAL”, for approved transactions, or an error message, for declined transactions. Do NOT use this when programmatically validating a transaction’s result; please see Result field below.\n|Message1| Returns an extra formatted response message giving more information about the processed transaction.\n|String up to 50 characters|\n||The Payment Server will only populate this field when there is applicable information from the payment processor to return.\n|Message2| Returns an extra formatted response message giving more information about the processed transaction.\n|String up to 50 characters|\n||The Payment Server will only populate this field when there is applicable information from the payment processor to return.\n|PNRef|Returns a number which uniquely identifies the transaction in the payment gateway.\n|String representing a signed 32-bit integer|\n|RespMSG|Returns the response message concerning the processed transaction.\n|String up to 50 characters|\n||This value is typically either Approved or Declined.  Do NOT use this when programmatically validating a transaction’s result; please see Result field below.\n|Result| Returns the transaction result code from the payment gateway which signifies the result of the transaction (i.e. approved, decline, etc.).\n|String representing a signed 32-bit integer|\n||When programmatically validating a transaction’s result, this value should ALWAYS be used instead of any response message describing the result.\n||See the [Result Response Field Definitions](#section/resultresp) for a full list of result values and descriptions.\n\n## ExtData Response Fields\n\n| Response Field| Description \n|-----|-----\n|BatchNum| Current batch number for transactions, settlement, and batch inquiries.\n||Note: Not all payment processors support returning this data element.\n|CardType| Credit card type (VISA, MASTERCARD, etc) or payment method (Debit, EBT, or EGC) for card-based payments.\n||Note: This value is not returned for Check/ACH payments.\n|InvNum| Invoice number for the transaction that was originally sent in the request to the Payment Server.\n|Token| This value contains the token result (up to 64 alphanumeric characters) if a token was requested during the initiating transaction. Please note that this is a base64 encoded value so when parsing the returned structure you must rely on the comma to delimit the fields and the first “=” sign to denote the key and value separator as “=” signs can exist at the end of the token.\n||Eg:\n||Token=7d4l2JLKFHzjQENGdQ8t6wP1C18JI59c6q5HCEAsJUBz0DK5I1pNxQ==\n|Balance|This XML tag contains the value for requests that require a balance response such as EBT balance inquiries.\n||Eg:\n||<Balance>12.50</Balance>\n|Trace|This XML tag contains the System Trace Audit Number returned for Debit / EBT transactions.\n||Eg:\n||<Trace>525982</Trace>\n|NetworkId|This XML tag contains the value for the identification code of the network on which the transaction was authorized.\n||Eg:\n||<NetworkId>K</NetworkId>\n|Approved Amount|This XML tag contains the approved amount for a transaction that results in a partial approval. It is always enclosed by a <ReceiptData> tag.\n||Eg:\n||<Approved_Amt>_5.55_</Approved_Amt>\n||Full Example:\n||<ReceiptData><Requested_Amt>11.10</Requested_Amt>\n||<Approved_Amt>5.55</Approved_Amt></ReceiptData>\n|Requested Amount|This XML tag contains the requested amount for a transaction that results in a partial approval. It is always enclosed by a <ReceiptData> tag.\n||Eg:\n||<Requested_Amt>11.10</Requested_Amt>\n||Full Example:\n||<ReceiptData><Requested_Amt>11.10</Requested_Amt>\n||<Approved_Amt>5.55</Approved_Amt></ReceiptData>\n\n# 3.10. Result Response Fields  \n\n## Result Response Field Definitions\n\n| Value |  Description | \n|-----|-----\n|-100|Transaction NOT Processes; Generic Host Error\n|0| Approved\n|1| User Authentication Failed\n|2| Invalid Transaction\n|3| Invalid Transaction Type\n|4| Invalid Amount\n|5| Invalid Merchant Information\n|7|Field Format Error\n|8|Not a Transaction Server\n|9|Invalid Parameter Stream\n|10|Too Many Line Items\n|11|Client Timeout Waiting for Response\n|12|Decline\n|13|Referral\n|14|Transaction Type Not Supported In This Version\n|19|Original Transaction ID Not Found\n|20|Customer Reference Number Not Found\n|22|Invalid ABA Number\n|23|Invalid Account Number\n|24|Invalid Expiration Date\n|25|Transaction Type Not Supported by Host\n|26|Invalid Reference Number\n|27|Invalid Receipt Information\n|28|Invalid Check Holder Name\n|29|Invalid Check Number\n|30|Check DL Verification Requires DL State\n|40|Transaction did not connect (to NCN because Secure NCIS is not running on the web server)\n|50|Insufficient Funds Available\n|99|General Error\n|100|Invalid Transaction Returned from Host\n|101| Timeout Value too Small or Invalid Time Out Value\n|102| Processor Not Available\n|103| Error Reading Response from Host\n|104|Timeout waiting for Processor Response\n|105|Credit Error\n|106|Host Not Available\n|107|Duplicate Suppression Timeout\n|108|Void Error\n|109|Timeout Waiting for Host Response\n|110|Duplicate Transaction\n|111|Capture Error\n|112|Failed AVS Check\n|113|Cannot Exceed Sales Cap\n|1000|Generic Host Error\n|1001|Invalid Login\n|1002|Insufficient Privilege or Invalid Amount\n|1003|Invalid Login Blocked\n|1004|Invalid Login Deactivated\n|1005|Transaction Type Not Available\n|1006|Unsupported Processor\n|1007|Invalid Request Message\n|1008|Invalid Version\n|1010|Payment Type Not Supported\n|1011|Error Starting Transaction\n|1012|Error Finishing Transaction\n|1013|Error Checking Duplicate\n|1014|No Records To Settle (in the current batch)\n|1015|No Records To Process (in the current batch)\n\n # 3.11. AVS Response Fields   \n\n| Value |  Description | \n|-----|-----\n|X|Exact: Address and nine-digit Zip match\n|Y|    Yes: Address and five-digit Zip match\n|A| Address: Address matches, Zip does not\n|Z|5-digit Zip: 5-digit Zip matches, address does not\n|W| Whole Zip: 9-digit Zip matches, address does not\n|N| No: Neither address nor Zip matches\n|U|Unavailable: Address information not available\n|G|Unavailable: Address information not available for international transaction\n|R|Retry: System unavailable or time-out\n|E|Error: Transaction unintelligible for AVS or edit error found in the message that prevents AVS from being performed\n|S|Not Supported: Issuer doesn’t support AVS service\n|B|Street Match: Street addresses match for international transaction, but postal code does not\n|C|Street Address: Street addresses and postal code not verified for international transaction\n|D|Match: Street addresses and postal codes match for international transaction\n|I|Not Verified: Address Information not verified for International transaction\n|M|Match: Street addresses and postal codes match for international transaction\n|P|Postal Match: Postal codes match for international transaction, but street address does not\n|O|No response sent\n|5|Invalid AVS response\n\n# 3.12. CV Response Fields   \n\n| Value |  Description | \n|-----|-----\n|M|CVV2/CVC2/CID Match\n|N|CVV2/CVC2/CID No Match\n|P|Not Processed\n|S|Issuer indicates that the CV data should be present on the card, but the merchant has indicated that the CV data is not present on the card.\n|U| Unknown / Issuer has not certified for CV or issuer has not provided Visa/MasterCard with the CV encryption keys.\n|X| Server Provider did not respond\n\n# 4. Reporting  \n\n# 4.1. GetCardTrx  \n\nThis web service returns one or more card transactions (with details) for a specific merchant.\n\nIn addition to the basic transaction search function, the GetCardTrx web service can help you:\n\n- Build a variety of custom reports, from customer billing histories to reports that help locate duplicate transactions.\n\n- Build data mining applications. For example, determining what percentage of sales derive from specific users or payment types. If you have multiple gateway accounts, you can compile the data from multiple sources into your own customized and aggregated reports.\n\n- Automate the reconciliation process between the payment server and the point-of-sale (POS) system or register.\n\n## Request\n\n## Request Example 1\n\nGetCardTrx(UserName, Password, RPNum, PNRef, BeginDt, EndDt, PaymentType, ExcludePaymentType, TransType, ExcludeTransType, ApprovalCode, Result, ExcludeResult, NameOnCard, CardNum, CardType, ExcludeCardType, ExcludeVoid, User, invoiceId, SettleFlag, SettleMsg, SettleDt, TransformType, Xsl, ColDelim, RowDelim, IncludeHeader, ExtData)\n\n## Request Example 2\n\nA second version of this API changes SettleDt to be a range comprising BeginSettleDt and EndSettleDt.\n\nGetCardTrx(UserName, Password, RPNum, PNRef, BeginDt, EndDt, PaymentType, ExcludePaymentType, TransType, ExcludeTransType, ApprovalCode, Result, ExcludeResult, NameOnCard, CardNum, CardType, ExcludeCardType, ExcludeVoid, User, invoiceId, SettleFlag, SettleMsg, BeginSettleDt, EndSettleDt, TransformType, Xsl, ColDelim, RowDelim, IncludeHeader, ExtData)\n\n```\nTrxDetailSoapClient reporting = new TrxDetailSoapClient(\"TrxDetailSoap\");\n\nreportingResponse = reporting.GetCardTrx(\n    \"username\", \"password\", \"5\", \"13612\",\n    \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n    \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"true\", \"\");\n```\n\n## Response\n\n```\n<RichDBDS>\n  <TrxDetailCard>\n    <TRX_HD_Key>13612</TRX_HD_Key>\n    <Invoice_ID>666</Invoice_ID>\n    <Date_DT>2016-08-05T18:16:12.867+00:00</Date_DT>\n    <Merchant_Key>5</Merchant_Key>\n    <User_Name_VC>username                 </User_Name_VC>\n    <Register_Number_CH>2         </Register_Number_CH>\n    <Reseller_Key>999</Reseller_Key>\n    <Payment_Type_ID>VISA      </Payment_Type_ID>\n    <Trans_Type_ID>Sale                </Trans_Type_ID>\n    <Processor_ID>TSYS      </Processor_ID>\n    <TRX_Settle_Key>13549</TRX_Settle_Key>\n    <Void_Flag_CH>0</Void_Flag_CH>\n    <Settle_Flag_CH>0</Settle_Flag_CH>\n    <Last_Update_DT>2016-08-05T18:16:13.663+00:00</Last_Update_DT>\n    <TRX_Card_Key>13549</TRX_Card_Key>\n    <Card_Info_Key>13550</Card_Info_Key>\n    <Auth_Amt_MN>200.0000</Auth_Amt_MN>\n    <Tip_Amt_MN>3.8500</Tip_Amt_MN>\n    <Total_Amt_MN>200.0000</Total_Amt_MN>\n    <Cash_Back_Amt_MN>0.0000</Cash_Back_Amt_MN>\n    <SureCharge_Amt_MN>0.0000</SureCharge_Amt_MN>\n    <Account_Type_CH>VISA      </Account_Type_CH>\n    <Result_CH>0    </Result_CH>\n    <Approval_Code_CH>TAS979</Approval_Code_CH>\n    <Host_Ref_Num_CH>000000000016865</Host_Ref_Num_CH>\n    <AVS_Resp_CH>0</AVS_Resp_CH>\n    <CV_Resp_CH>M</CV_Resp_CH>\n    <Host_Date_CH>080516    </Host_Date_CH>\n    <Host_Time_CH>131613    </Host_Time_CH>\n    <Acct_Num_CH>************1881</Acct_Num_CH>\n    <Exp_CH>1216      </Exp_CH>\n    <Type_CH>VISA      </Type_CH>\n    <Name_on_Card_VC>Barney Rubble            </Name_on_Card_VC>\n    <Street_CH xml:space=\"preserve\">                         </Street_CH>\n    <Zip_CH xml:space=\"preserve\">          </Zip_CH>\n    <Manual>true</Manual>\n    <TRX_Receipt_key>0</TRX_Receipt_key>\n    <IP_VC>192.168.1.2</IP_VC>\n    <Batch_Number>0</Batch_Number>\n    <Level3_Amt_MN>0.0000</Level3_Amt_MN>\n    <TRX_Receipt_Cnt>0</TRX_Receipt_Cnt>\n    <Auth_Date_DT>2016-08-05T18:16:12.867+00:00</Auth_Date_DT>\n    <Reversal_Flag_CH>0</Reversal_Flag_CH>\n    <CustomFields>\n      <CocoaPebbles>Chocolate goodness</CocoaPebbles>\n      <FruityPebbles>18</FruityPebbles>\n    </CustomFields>\n  </TrxDetailCard>\n</RichDBDS>\n```\nView [TrxDetail Response Fields.](#section/trxdetail-response-fields)\n\n## GetCardTrx Input Parameters\n\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n| UserName|User name assigned in the payment server. The user must have an appropriate security permissions in order for the system to return transaction records.\n|Password |Password for the user name assigned in the payment server.\n|RPNum |Unique value assigned to each gateway account used as a third credential to ensure security and\n| |Note: RPNum may also be called Merchant ID, Merchant Number, or Vendor Key.\n| PNRef| The unique payment reference number assigned to the transaction.\n|Optional | If this field is provided, all other query fields will be ignored when using PNRef parameter to query the system.\n| BeginDt| Beginning date of the transaction record query.\n|Required unless a PNRef value is provided |\n| EndDt| End date of the transaction record query.\n|Required unless a PNRef value is provided |\n|PaymentType |If provided, only those transactions matching the PaymentType will be included.\n|Optional |\n| |Valid values are:\n| |- ‘AMEX’ American Express card\n| |- ‘CARTBLANCH’ Carte Blanch card\n| |- ‘DEBIT’ Debit card\n| |- ‘DINERS’ Diners Club card\n| |- ‘DISCOVER’ Novus Discover card\n| |- ‘EBT’ Electronic Benefit Transfer\n| |- ‘JAL’ JAL card\n| |- ‘JCB’ Japanese Commercial Bank card\n| |- ‘MASTERCARD’ Master card\n| |- ‘VISA’ Visa card\n| |- ‘EGC’ Gift card\n| |- ‘PAYRECEIPT’ to retrieve receipt images that were uploaded to the payment server\n| |- ‘SETTLE’ to retrieve requests to settle transactions\n| |Note: The default value for this field is “All”. If no value is set, all payment types will be returned in the result set.\n| |Or any permutation of the above values, e.g. “‘PAYRECEIPT’,’SETTLE'” will pull all transactions with either PayReceipt or Settle payment types.\n|ExcludePaymentType | The ExcludePaymentType parameter allows you to exclude certain payment types from the result set. Any valid entry (or combination) listed under the PaymentType parameter may be used.\n|Optional |Note: If you pass the same value in the PaymentType and ExcludePaymentType parameters, the entry in the ExcludePaymentType parameter will override the PaymentType and results of that type will be excluded.\n|TransType | If provided, only those transactions matching the TransType will be included.\n|Optional | Valid values are\n| |- ‘Authorization’ to retrieve previously-authorized (pre-auth) transactions\n| | - ‘Capture’ to retrieve captured transactions\n| |- ‘Credit’ to retrieve return transactions\n| |- ‘ForceCapture’ to retrieve force-auth transactions\n| |- ‘GetStatus’ to make an inquiry to the EBT or gift card’s balance\n| |- ‘PostAuth’ to retrieve post-auth transactions\n| |- ‘Purged’ to remove a transaction from the current batch due to an error\n| |- ‘Receipt’ to retrieve receipt images that were uploaded to the payment server\n| |- ‘RepeatSale’ to retrieve repeat-sale transactions\n| |- ‘Sale’ to retrieve sale transactions\n| |- ‘Void’ to retrieve void transactions\n| |Or any permutation of the above values, e.g. “‘Credit’,’Sale'” will pull all transactions with either Credit or Sale transaction types.\n|ExcludeTransType | The ExcludeTransType parameter allows you to exclude certain transaction types from the result set. Any valid entry (or combination) listed under the TransType parameter may be used.\n|Optional | Note: If you pass the same value in the TransType and ExcludeTransType parameters, the entry in the ExcludeTransType parameter will override the TransType and results of that type will be excluded.\n| |Note: A value of ‘Void’ in the ExcludeTransType parameter will be overridden by the ExcludeVoid if both parameters are used.\n| |This parameter accepts multiple values.\n|ApprovalCode | The approval code is a 6-character string (alphanumeric) generated by the issuing bank. The code is used the card issuer to verify the specific authorization when transactions are being settled. This field may also be used by payment processors to return error messages.\n|Optional | Note: You may only query one approval code at a time; however, approval codes are not necessarily unique and there is potential (rare) for more than one record to be returned.\n| Result| If provided, only those transactions matching the Result will be included.\n|Optional | Valid values are:\n| | - ‘NULL’ returns both approved and declined transactions\n| |- ‘0’ returns only approved transactions\n| |- Any other value for Result will return transactions matching that Result code.\n| |Note: to return only declined transactions do not pass a value for this parameter and instead set ExcludeResult = 0.\n|ExcludeResult | If provided, any transactions matching the ExcludeResult will be excluded.\n|Optional | Note: To return a only declined transactions, set ExcludeResult = 0.\n|NameOnCard | Cardholder’s name as it is appears on the card. If provided, only those transactions with cardholder’s name matching NameOnCard will be included. \n|Optional |Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”.\n|CardNum |A card number. If provided, only those transactions with the card number matching CardNum will be included. Matching is done using wild cards.\n|Optional |\n|CardType | This field has been deprecated. Please use the PaymentType field to specify the type of card used in a transaction.\n|Optional | View [ExtData Field Definitions](#section/extdatadef) for more information.\n|ExcludeCardType |This field has been deprecated. Please use the ExcludePaymentType field to specify the type of cards you wish to be excluded from the result set.\n|Optional |\n|ExcludeVoid | The ExcludeVoid parameter allows you to exclude voided transactions from the result set.\n|Required unless a PNRef value is provided |\n| |Valid entries are:\n| |- ‘TRUE’ – voided transactions are excluded\n| |- ‘FALSE’ – voided transactions are included\n| |Note: A value of ‘Void’ in the ExcludeTransType parameter will be overridden by the ExcludeVoid if both parameters are used.\n|User |The user who originated the transactions. If provided, only those transactions created by the matching User will be included. \n|Optional | Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”.\n|InvoiceId |The invoice ID that was included in the original transaction. If provided, only those transactions with matching invoiceId will be included. \n|Optional | Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|SettleFlag | The SettleFlag parameter allows you to choose whether settled or unsettled transactions are included in the results. \n|Optional | Valid entries are:\n| |- Unused/blank returns all transactions\n| |- ‘1’ – returns only settled transactions\n| |- ‘0’ – returns only transactions that are not yet settled\n|SettleMsg | The settlement ID or message returned from the host.\n|Optional |\n|SettleDt | The date of settlement.\n|Optional |\n|TransformType | The type of format to transform the data into. Leave the field blank to default to XML\n|Optional |\n| | - ‘XML’ will output the plain XML string\n| |- ‘XSL’ will use XSL to transform the XML output\n| |- ‘DELIM’ uses ColDelim and RowDelim to format the output\n|Xsl | This field is used only if the TransformType is XSL.\n|Optional | If provided, the resulting dataset will be transformed using this XSL. You may pass in a URL to the XSL file, or the XSL string itself. If this field is not empty, the Web Services will try to locate the file from the URL. If that also fails, it will treat it as an XSL string. In any case, the final XSL string will be loaded and validated against the XSL schema; if it passes, then that XSL will be used for transformation.\n| |A sample predefined XSL is included with this Web Services: \n| |_‘https://gateway.ibxpays.com/admin/ws/TabDelim.xsl’_ for a tab delimited transformation.\n| ColDelim|This field is used only if the TransformType is DELIM. This defines the string that separates each column.\n|Optional |\n| |e.g. a value of ‘@’, would separate each column value with ‘@’\n|RowDelim | This field is used only if the TransformType is DELIM. This defines the string that separates each row.\n|Optional |\n| |e.g. a value of ‘!’ would start each row with ‘!’\n|IncludeHeader | This field is used only if the TransformType is DELIM. If TRUE, then field headers will be included in the first row using the same delimiter strings; must either be TRUE or FALSE.\n|ExtData | The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n|Optional |  Extended data in XML format. Valid values are:\n| |- ‘<IMAGE_TYPE>NO_IMAGE</IMAGE_TYPE>’ – Will only return transaction data that does not include image data (to include signature data and check images)\n| |- ‘<IMAGE_TYPE>ONLY_IMAGE</IMAGE_TYPE>’ – Will only return transaction data that includes image data (to include signature data and check images)\n| |- ‘<IMAGE_TYPE>ALL</IMAGE_TYPE>’- will return transaction with or without image data\n| |- ‘<CustomerID>CustomerID</CustomerID>’ – specifies the customer ID value to search by. Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n| |- ‘<Amount>Amount</Amount>’ – specifies the amount value of the transactions being searched for. In DDDDDD.CC format\n| |- ‘<RegisterNum>RegisterNum</RegisterNum>’ –  specifies the register number, originally passed with the transaction, to search by\n| |- <Timezone>Timezone</Timezone> – Used to convert the input and output (where applicable) date/time values to the desired timezone. When specified, the same timezone is used to convert the begin/end date parameters as well as the Date and Last Update output values. This field is optional, and if omitted all date/time values are treated as UTC.  Daylight savings time adjustments, where applicable, are handled automatically.  Accepted values are: \n| |   -- AKST – Alaskan Standard Time\n| |   -- CST – Central Standard Time\n| |   -- EST – Eastern Standard Time\n| |   -- HST – Hawaiian Standard Time\n| |   -- MST – Mountain Standard Time\n| |   -- AZMST – Arizona\n| |   -- PST – Pacific Standard Time\n\n\n# 4.2. GetCardTrxSummary   \n\nThe GetCardTrxSummary web service allows you to view summary data for one or more card transactions within a given date range. Optional filters allow you to collect summary data by card type, card owner, account number, register, settle or approval status, user, etc.\n\n## Request\nGetCardTrxSummary(UserName, Password, RPNum, BeginDt, EndDt, ApprovalCode, Register, NameOnCard, CardNum, CardType, ExcludeVoid, User, SettleFlag, SettleMsg, SettleDt, TransformType, Xsl, ColDelim, RowDelim, IncludeHeader, ExtData)\n\n```\nTrxDetailSoapClient reporting = new TrxDetailSoapClient(\"TrxDetailSoap\");\n\nreportingResponse = reporting.GetCardTrxSummary(\"username\", \"password\", \"5\",\n             \"7/11/2016\", \"7/11/2016\", \"\", \"\", \"\", \"\", \"\", \"true\",\n             \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\");\n```\n\n## Response\n\n```\n<PaymentMethod>\n    <Payment_Type_ID>VISA      </Payment_Type_ID>\n    <Authorization>0.0000</Authorization>\n    <Capture>0.0000</Capture>\n    <ForceCapture>0.0000</ForceCapture>\n    <PostAuth>0.0000</PostAuth>\n    <Return>0.0000</Return>\n    <Sale>57185.0000</Sale>\n    <Receipt>0.0000</Receipt>\n    <RepeatSale>0.0000</RepeatSale>\n    <Activate>0.0000</Activate>\n    <Deactivate>0.0000</Deactivate>\n    <Reload>0.0000</Reload>\n    <Authorization_Cnt>0</Authorization_Cnt>\n    <Capture_Cnt>0</Capture_Cnt>\n    <ForceCapture_Cnt>0</ForceCapture_Cnt>\n    <PostAuth_Cnt>0</PostAuth_Cnt>\n    <Return_Cnt>0</Return_Cnt>\n    <Sale_Cnt>11</Sale_Cnt>\n    <Receipt_Cnt>0</Receipt_Cnt>\n    <RepeatSale_Cnt>0</RepeatSale_Cnt>\n    <Activate_Cnt>0</Activate_Cnt>\n    <Deactivate_Cnt>0</Deactivate_Cnt>\n    <Reload_Cnt>0</Reload_Cnt>\n    <Cnt>11</Cnt>\n  </PaymentMethod>\n</CardTrxSummary>\n\n```\nView [TrxDetail Response Fields.](#section/trxdetail-response-fields)\n\n## GetCardTrxSummary Input Parameters\n Unless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|UserName| User name assigned in the payment server. The user must have an appropriate security permissions in order for the system to return transaction records.\n|Password| Password for the user name assigned in the payment server.\n|RPNum| Unique numeric value used to identify the merchant for the query. The RPNum is assigned by the gateway and acts as the primary key for the merchant table.\n||Note: RPNum may also be called Merchant ID, Merchant Number, or Vendor Key.\n|BeginDt| Identifies the beginning date range for a group of transactions.\n|EndDt| Identifies the ending date range for a group of transactions.\n|ApprovalCode| The approval code is a 6-character string (alphanumeric) generated by the issuing bank. The code is used the card issuer to verify the specific authorization when transactions are being settled. This field may also be used by payment processors to return error messages.\n|Optional| Note: You may only query one approval code at a time; however, approval codes are not necessarily unique and there is potential (rare) for more than one record to be returned.\n|Register  Optional| The register is a unique string used to identify the register where the transaction took place. If used, only transactions made with the matching register number will be returned.\n|NameOnCard   Optional| If a card holder name is provided for this parameter, only those transactions with matching cardholder names will be returned. Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|CardNum   Optional|If a card number is provided for this parameter, only those transactions with matching card numbers will be returned. Matching is done using wild cards. e.g. “test” will match “test”, “1test” and “1test234”\n|CardType| The card type identifies the type of card used to make the transaction. If one or more card types are provided, only transactions with matching CardType will be included in the results.\n|Optional| Valid entries are:\n|| - Unused/blank returns summary information for all card types\n|| - ‘AMEX’ – American Express card\n|| - ‘CARTBLANCH’ – Carte Blanch card\n|| - ‘DEBIT’ – Debit card\n|| - ‘DINERS’ – Diners club card\n|| - ‘DISCOVER’ – Discover card\n|| - ‘EBT’ – Electronic benefit transfer\n|| - ‘JAL’ – Japanese Airlines card\n|| - ‘JCB’ – Japanese Commercial Bank card\n|| - ‘MASTERCARD’ – Master card\n|| - ‘VISA’ – Visa card\n|| - ‘EGC’ – Gift card\n|| Or any permutation of the above values, e.g. “’AMEX’,’MASTERCARD’” will pull all transactions with either AMEX or MASTERCARD payment types.\n|| View [ExtData Field Definitions](#section/extdatadef) for more information.\n|ExcludeVoid| The ExcludeVoid parameter allows you to exclude voided transactions from the result set.\n||Valid entries are\n||- ‘TRUE’ – voided transactions are excluded from summary information\n||- ‘FALSE’ – voided transactions are included from summary information\n|User| If provided, only transactions generated by users with a matching user ID will be included in the results. Matching is done using wild cards.\n|Optional| e.g. “test” will match “test”, “1test” and “1test234”\n|SettleFlag| The SettleFlag parameter allows you to choose whether settled or unsettled transactions are included in the results.\n|Optional|Valid entries are:\n||- Unused/blank returns summary information for settled and unsettled transactions\n|| - ‘1’ – returns only summary information for settled transactions\n|| - ‘0’ – return only summary information for transactions that are not yet settled\n|SettleMsg  Optional| The settlement message is an ID or message returned from the host upon settlement of a transaction. If provided, only the transaction that exactly matches the SettleMsg provided will be returned.\n|SettleDt   Optional| If provided, only transactions that were settled on the same date will be included in the results.\n|TransformType| Indicates how the result set should be formatted.\n|Optional| Valid entries are:\n|| - ‘XML’ – outputs a plain XML string\n|| - ‘XSL’ – uses XSL to format the XML output. If ‘XSL’ is selected, use the Xsl parameter to identify the XSL string that will be used to format the output.\n||- ‘DELIM’ – outputs records in a delimited format. If ‘DELIM’ is selected, you may also pass values for the ColDelim, RowDelim, and IncludeHeader parameters.\n|Xsl| This field is used only if the TransformType is XSL.\n|Optional| If provided, the resulting dataset will be transformed using this XSL. You may pass in a URL to the XSL file, or the XSL string itself. If this field is not empty, the Web Services will try to locate the file from the URL. If that also fails, it will treat it as an XSL string. In any case, the final XSL string will be loaded and validated against the XSL schema; if it passes, then that XSL will be used for transformation. A sample predefined XSL is included with this Web Services:\n||_‘https://gateway.ibxpays.com/admin/ws/TabDelim.xsl’_ for a tab delimited transformation\n|ColDelim| This field is used only if the TransformType is DELIM. This defines the string that separates each column.\n|Optional| e.g. a value of ‘@’, would separate each column value with ‘@’\n|RowDelim| This field is used only if the TransformType is DELIM. This defines the string that separates each row.\n|Optional| e.g. a value of ‘!’ would start each row with ‘!’\n|IncludeHeader| This field is used only if the TransformType is DELIM. If TRUE, then field headers will be included in the first row using the same delimiter strings; must either be TRUE or FALSE\n|ExtData| The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n|Optional| Extended data in XML format. Valid values are:\n||- <IMAGE_TYPE>NO_IMAGE</IMAGE_TYPE>’ – Will only return transaction data _thatdoes not_ include image data (to include signature data and check images)\n||- ‘<IMAGE_TYPE>ONLY_IMAGE</IMAGE_TYPE>’ – Will only return transaction data that _includes_ image data (to include signature data and check images)\n||- ‘<IMAGE_TYPE>ALL</IMAGE_TYPE>’- will return transaction with or without image data\n||- ‘<CustomerID>CustomerID</CustomerID>’ – specifies the customer ID value to search by. Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n||- ‘<Amount>Amount</Amount>’ – specifies the amount value of the transactions being searched for. In DDDDDD.CC format\n||- ‘<RegisterNum>_RegisterNum_</RegisterNum>’ –  apecifies the register number, originally passed with the transaction, to search by\n||-<Timezone>Timezone</Timezone> – Used to convert the input and output (where applicable) date/time values to the desired timezone. When specified, the same timezone is used to convert the begin/end date parameters as well as the Date and Last Update output values. This field is optional, and if omitted all date/time values are treated as UTC.  Daylight savings time adjustments, where applicable, are handled automatically.  Accepted values are: \n|| -- AKST – Alaskan Standard Time\n|| -- CST – Central Standard Time\n|| -- EST – Eastern Standard Time\n|| -- HST – Hawaiian Standard Time\n|| -- MST – Mountain Standard Time\n|| -- AZMST – Arizona\n|| -- PST – Pacific Standard Time\n\n# 4.3. GetCheckTrx    \nThis web service returns one or more check transactions (with details) for a specific merchant.\n\nIn addition to the basic transaction search function, the GetCheckTrx web service can help you to build a variety of custom reports, aid in data mining applications, and help to automate reconciliation. Custom reports, from customer billing histories to reports that help locate duplicate transactions, and data mining applications – for example, determining what percentage of sales come through a given payment type, are easily constructed by filtering for only the data that is needed.\n\nGetCheckTrx can also be used to automate the reconciliation process between the payment server and the point-of-sale (POS) system or register.\n\n## Request\n\nGetCheckTrx(UserName, Password, RPNum, PNRef, BeginDt, EndDt, PaymentType, ExcludePaymentType, TransType, ExcludeTransType, ApprovalCode, Result, ExcludeResult, NameOnCheck, CheckNum, AcctNum, RouteNum, ExcludeVoid, User, InvoiceID, SettleFlag, SettleMsg, SettleDt, TransformType, Xsl, ColDelim, RowDelim, IncludeHeader, ExtData)\n\n## Response\n\nResponse here\n\nView [TrxDetail Response Fields.](#section/trxdetail-response-fields)\n\n## GetCheckTrx Input Parameters\n\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|UserName| User name assigned in the payment server. The user must have appropriate security permissions in order for the system to return transaction records.\n|Password| Password for the user name assigned in the payment server.\n|RPNum| Unique numeric value used to identify the merchant for the query. The RPNum is assigned by the gateway and acts as the primary key for the merchant table.\n|| Note: RPNum may also be called Merchant ID, Merchant Number, or Vendor Key.\n|PNRef| Unique payment reference number used to identify a single transaction within the system. The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created.\n|Optional| Note: If a PNRef is provided, all other query fields will be ignored.\n|BeginDt| Identifies the beginning date range for a group of transactions.\n|Required unless a value of PNRef is provided|\n|EndDt| Identifies the ending date range for a group of transactions.\n|Required unless a value of PNRef is provided|\n|PaymentType| The payment type identifies the payment venue. If one or more payment types are provided, only transactions with matching PaymentType will be included in the results; all other PaymentType values will be excluded.\n|Optional| Valid entries are:\n|| - ‘ACH’ – Automated Clearing House\n|| - ‘ECHECK’ – Electronic check\n|| - ‘GUARANTEE’ – Guarantee check\n|| - ‘PAYRECEIPT’ – receipt images uploaded to the server\n|| - ‘SETTLE’ – transactions that have been finalized with the payment host\n|| - ‘VERIFY’ – Pre-authorized checks\n|| Note: The default value for this field is “All”. If no value is set, all payment types will be returned in the result set.\n|| Or any permutation of the above values, e.g. “’ACH’,’ECHECK’” will pull all transactions with either ACH or ECHECK payment types.\n|ExcludePaymentType| The ExcludePaymentType parameter allows you to exclude certain payment types from the result set. Any valid entry (or combination) listed under the PaymentType parameter may be used.\n|Optional| Note: If you pass the same value in the PaymentType and ExcludePaymentType parameters, the entry in the ExcludePaymentType parameter will override the PaymentType and results of that type will be excluded.\n|| This parameter accepts multiple values.\n|TransType| If provided, only those transactions matching the TransType will be included.\n|Optional| Valid values are\n|| - ‘Authorization’ to retrieve previously-authorized (pre-auth) transactions\n|| - ‘Capture’ to retrieve captured transactions\n|| - ‘Credit’ to retrieve return transactions\n|| - ‘ForceCapture’ to retrieve force-auth transactions\n|| - ‘GetStatus’ to make an inquiry to the EBT or gift card’s balance\n|| - ‘PostAuth’ to retrieve post-auth transactions\n|| - ‘Purged’ to remove a transaction from the current batch due to an error\n|| - ‘Receipt’ to retrieve receipt images that were uploaded to the payment server\n|| - ‘RepeatSale’ to retrieve repeat-sale transactions\n|| - ‘Sale’ to retrieve sale transactions\n|| - ‘Void’ to retrieve void transactions\n|| Or any permutation of the above values, e.g. “‘Credit’,’Sale'” will pull all transactions with either Credit or Sale transaction types.\n|ExcludeTransType| The ExcludeTransType parameter allows you to exclude certain transaction types from the result set. Any valid entry (or combination) listed under the TransType parameter may be used.\n|Optional| Note: If you pass the same value in the TransType and ExcludeTransType parameters, the entry in the ExcludeTransType parameter will override the TransType and results of that type will be excluded.\n|| Note: A value of ‘Void’ in the ExcludeTransType parameter will be overridden by the ExcludeVoid if both parameters are used.\n||This parameter accepts multiple values.\n|ApprovalCode| The approval code is a 6-character string (alphanumeric) generated by the issuing bank. The code is used the card issuer to verify the specific authorization when transactions are being settled.\n|Optional| Note: You may only query one approval code at a time; however, approval codes are not necessarily unique and there is potential (rare) for more than one record to be returned.\n|Result| The result indicates whether a transaction was approved (Result = 0) or declined (Result ≠ 0).\n|Optional| Valid entries are:\n|| - Unused/blank returns both approved and declined transactions\n|| - 0 – returns only approved transactions\n|| Note: To return only declined transactions, leave this parameter blank and use the ExcludeResult parameter.\n|ExcludeResult| The result indicates whether a transaction was approved (Result = 0) or declined (Result ≠ 0). If provided, any transactions matching the ExcludeResult input will be excluded.\n|Optional| Note: To return a only declined transactions, set ExcludeResult = 0\n|NameOnCheck  Optional| If an owner’s name is provided for this parameter, only those transactions with matching names will be returned. Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|CheckNum  Optional| If a check number is provided for this parameter, only those transactions with a matching check number will be returned.\n|AcctNum  Optional| If a checking account number is provided, only those transactions with matching account numbers will be returned.  Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|RouteNum  Optional | If a route number (transit number) is provided, only those transactions with matching route numbers will be returned. Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|ExcludeVoid| The ExcludeVoid parameter allows you to exclude voided transactions from the result set.\n|Optional| Valid entries are:\n|| - ‘TRUE’ – voided transactions are excluded\n|| - ‘FALSE’ – voided transactions are included\n|User  Optional| If provided, only transactions generated by users with a matching user ID will be included in the results. Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|InvoiceID  Optional | The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice. If provided, only transactions with a matching invoice ID will be included in the results. Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|SettleFlag| The SettleFlag parameter allows you to choose whether settled or unsettled transactions are included in the results.\n|Optional| Valid entries are:\n|| - Unused/blank returns all transactions\n|| - ‘1’ – returns only settled transactions\n|| - ‘0‘- return only transactions that are not yet settled\n|SettleMsg| The settlement message is an ID or message returned from the host upon settlement of a transaction. If provided, only the transaction that exactly matches the SettleMsg provided will be returned. \n|Optional| Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|SettleDt   Optional| If provided, only transactions that were settled on the same date will be included in the results.\n|TransformType| Indicates how the result set should be formatted.\n|Optional | Valid entries are:\n|| - ‘XML’ – outputs a plain XML string\n|| - ‘XSL’ – uses XSL to format the XML output. If ‘XSL’ is selected, use the Xsl parameter to identify the XSL string that will be used to format the output.\n|| - ‘DELIM’ – outputs records in a delimited format. If ‘DELIM’ is selected, you may also pass values for the ColDelim, RowDelim, and IncludeHeader parameters.\n|Xsl| This field is used only if the TransformType is XSL.\n|Optional| If provided, the resulting dataset will be transformed using this XSL. You may pass in a URL to the XSL file, or the XSL string itself. If this field is not empty, the Web Services will try to locate the file from the URL. If that also fails, it will treat it as an XSL string. In any case, the final XSL string will be loaded and validated against the XSL schema; if it passes, then that XSL will be used for transformation. A sample predefined XSL is included with this Web Services:\n|| _‘https://gateway.ibxpays.com/admin/ws/TabDelim.xsl’_ for a tab delimited transformation\n|ColDelim| This field is used only if the TransformType is DELIM. This defines the string that separates each column.\n|Optional| e.g. a value of ‘@’, would separate each column value with ‘@’\n|RowDelim| This field is used only if the TransformType is DELIM. This defines the string that separates each row.\n|Optional| e.g. a value of ‘!’ would start each row with ‘!’\n|IncludeHeader | This field is used only if the TransformType is DELIM.\n|Optional| If TRUE, then field headers will be included in the first row using the same delimiter strings; must either be TRUE or FALSE.\n|ExtData| The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n|Optional| Extended data in XML format. Valid values are:\n||- ‘<IMAGE_TYPE>NO_IMAGE</IMAGE_TYPE>’ – Will only return transaction data that _does not_ include image data (to include signature data and check images)\n|| - ‘<IMAGE_TYPE>ONLY_IMAGE</IMAGE_TYPE>’ – Will only return transaction data that _includes_ image data (to include signature data and check images)\n|| - ‘<IMAGE_TYPE>ALL</IMAGE_TYPE>’- will return transaction with or without image data\n|| ‘<CustomerID>_CustomerID_</CustomerID>’ – specifies the customer ID value to search by. Matching is done using wild cards: e.g. “test” will match “test”, “1test” and “1test234”\n|| ‘<Amount>_Amount_</Amount>’ – specifies the amount value of the transactions being searched for. In DDDDDD.CC format\n||‘<RegisterNum>_RegisterNum_</RegisterNum>’ –  apecifies the register number, originally passed with the transaction, to search by\n||<Timezone>Timezone</Timezone> – Used to convert the input and output (where applicable) date/time values to the desired timezone. When specified, the same timezone is used to convert the begin/end date parameters as well as the Date and Last Update output values. This field is optional, and if omitted all date/time values are treated as UTC.  Daylight savings time adjustments, where applicable, are handled automatically.  Accepted values are: \n|| -- AKST – Alaskan Standard Time\n|| -- CST – Central Standard Time\n|| -- EST – Eastern Standard Time\n|| -- HST – Hawaiian Standard Time\n|| -- MST – Mountain Standard Time\n|| -- AZMST – Arizona\n|| -- PST – Pacific Standard Time\n\n# 4.4. GetOpenBatchSummary \n  This web service retrieves a payment type transaction summary of the current open batch for a specified merchant.\n\n## Request\n\n  GetOpenBatchSummary(username, password, rpNum, beginDt, endDt, extData)\n\n## Response\n\nResponse here\n\nView [TrxDetail Response Fields.](#section/trxdetail-response-fields)\n\n## GetOpenBatchSummary Input Parameters\n\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|UserName| User name assigned in the payment server. The user must have appropriate security permissions in order for the system to return transaction records.\n|Password| Password for the user name assigned in the payment server.\n|RPNum| Unique numeric value used to identify the merchant for the query. The RPNum is assigned by the gateway and acts as the primary key for the merchant table.\n|| Note: RPNum may also be called Merchant ID, Merchant Number, or Vendor Key.\n|BeginDt| Identifies the beginning date range for a group of transactions.\n|EndDt| Identifies the ending date range for a group of transactions.\n|ExtData| The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n|Optional| Extended data in XML format. Valid values are:\n||<Timezone>Timezone</Timezone> – Used to convert the input and output (where applicable) date/time values to the desired timezone. When specified, the same timezone is used to convert the begin/end date parameters as well as the Date and Last Update output values. This field is optional, and if omitted all date/time values are treated as UTC.  Daylight savings time adjustments, where applicable, are handled automatically.  Accepted values are: \n|| -- AKST – Alaskan Standard Time\n|| -- CST – Central Standard Time\n|| -- EST – Eastern Standard Time\n|| -- HST – Hawaiian Standard Time\n|| -- MST – Mountain Standard Time\n|| -- AZMST – Arizona\n|| -- PST – Pacific Standard Time\n\n# 4.5. TRXDetail Response Fields \nThe following response fields may be part of the return value for web services using TrxDetail.asmx operations. These web services include:  \n\n- GetCardTrx\n- GetCardTrxSummary\n- GetCheckTrx\n- GetOpenBatchSummary\n\n| Response Field and Data Value| Description \n|-----|-----\n|Account_Type_CH | Returns the card type of the transaction, e.g. VISA, Diners, EBT.\n|String up to 10 characters |\n|AccountNum_VC | Returns the check account number.\n|String up to 200 characters | This field will be masked out with asterisk (*) characters except for the last 4 digits if the System Security Level of the user is set to 1.\n|Acct_Num_CH | Returns credit card number.\n|String up to 200 characters | This field will be masked out with asterisk (*) characters except for the last 4 digits if the System Security Level of the user is set to 1.\n| Amount_MN| Returns the check’s total amount.\n|String representing a signed 64-bit real number |\n| Approval_Code_CH| Returns the response code from the payment processor.\n|String up to 50 characters |\n|Auth_Amt_MN | Returns the authorized amount of a card transaction.\n|String representing a signed 64-bit real number |\n|Authorization | Returns the dollar amount of all Authorization (PreAuth) transactions.\n|String representing a signed 64-bit real number |\n|Authorization_Cnt | Returns the transaction count of all Authorization (PreAuth) transactions.\n|String representing a signed 32-bit integer |\n|AVS_Resp_CH | Returns the address verification result code from the payment processor.\n|String up to 1 character |\n|AVS_Resp_Txt_VC | Returns the formatted response message when address verification is performed.\n|String up to 25 characters |\n|Batch_Number | Returns the batch number for the transaction that was returned by the payment processor.\n|String up to 10 characters | Not all payment processors support returning this data element.\n|Capture | Returns the dollar amount of all Capture transactions.\n|String representing a signed 64-bit real number | This value will always return “0”.\n| Capture_Cnt| Returns the transaction count of all Capture transactions.\n|String representing a signed 32-bit integer | This value will always return “0”.\n|Card_Info_Key | Returns the primary key of the CC_Info_T table in the database.\n|String representing a signed 32-bit integer |\n|Cash_Back_Amt_MN | Returns the cash back amount for a debit or EBT transaction.\n|String representing a signed 64-bit real number |\n|CheckNum_CH | Returns the check number.\n|String up to 10 characters |\n|Cnt | Returns the transaction count of all transactions.\n|String representing a signed 32-bit integer |\n|CustomerID | Returns the Customer ID of a customer to which the transaction belongs to\n|String up to 50 characters |\n|CV_Resp_CH | Returns the card verification result code from the payment processor.\n|String up to 1 character |\n|CV_Resp_Txt_VC | Returns the formatted response message when card verification is performed.\n|String up to 25 characters |\n|Date_DT | Returns the date on which the transaction is first made.\n|String representing a date and time |\n|ERROR |Returns an error message when a problem occurs during the transaction processing.\n|String up to 200 characters |\n|Exp_CH |Returns the credit card expiration date.\n|String up to 10 characters |\n|ForceCapture |Returns the dollar amount of all ForceCapture (ForceAuth) transactions.\n|String representing a signed 64-bit real number |\n|ForceCapture_Cnt | Returns the transaction count of all ForceCapture (ForceAuth) transactions.\n|String representing a signed 32-bit integer |\n|Host_Date_CH | Returns the payment processor’s date on which the transaction is performed.\n|String up to 10 characters |\n|Host_Ref_Num_CH | Returns a number which uniquely identifies the transaction for the payment processor.\n|String up to 30 characters |\n|Host_Time_CH | Returns the payment processor’s time at which the transaction was performed.\n|String up to 10 characters |\n|Invoice_ID | Returns the transaction’s Invoice number.\n|String up to 100 characters |\n|IP_VC | Returns the IP address of the client machine from which the transaction was processed.\n|String up to 15 characters |\n|Last_Update_DT | Returns the date and time on which the transaction is last modified.\n|String representing a date and time |\n|Manual | Returns the card was swiped or not.\n|String representing a Boolean value |\n|Merchant_Key | Returns a number which uniquely identifies a merchant.\n|String representing a signed 32-bit integer |\n|Name_on_Card_VC | Returns the name of the cardholder.\n|String up to 25 characters |\n|NameOnCheck_VC | Returns the check payer’s name on the check.\n|String up to 25 characters |\n| Orig_TRX_HD_Key| Returns the TRX_HD_Key on which the current transaction is based.\n|String representing a signed 32-bit integer |\n|Payment_Type_ID | Returns the payment type, e.g. ECHECK.\n|String up to 10 characters |\n|PostAuth | Returns the dollar amount of all PostAuth transactions.\n|String representing a signed 64-bit real number |\n|PostAuth_Cnt | Returns the transaction count of all PostAuth transactions.\n| String representing a signed 32-bit integer|\n| Processor_ID| Returns the name the payment processor, e.g. Vital.\n|String up to 10 characters |\n|Receipt |Returns the dollar amount of all transactions with a Receipt.\n|String representing a signed 64-bit real number |This value will always return “0”.\n|Receipt_Cnt | Returns the transaction count of all transactions with a Receipt.\n|String representing a signed 32-bit integer | This value will always return “0”.\n|Ref_Number_CH | Not currently used.\n|String | This field is not the unique transaction identifier (also called PNRef) of the Payment Server.  See the field TRX_HD_Key for the PNRef value.\n|Register_Number_CH | Returns the register number of a transaction.\n|String up to 10 characters |\n|RepeatSale |Returns the dollar amount of all RepeatSale (Recurring Billing/Installment) transactions.\n|String representing a signed 64-bit real number |\n|RepeatSale_Cnt | Returns the transaction count of all RepeatSale (Recurring Billing/Installment) transactions.\n|String representing a signed 32-bit integer |\n| Reseller_Key| Returns the primary key of the Reseller_T table in the database.\n|String representing a signed 32-bit integer |\n|Result_CH | Returns the transaction processing result.\n| String up to 50 characters| e.g. 0, 12.  “0” for approval, “12” for decline\n|Result_Msg_VC | Returns the check transaction’s processing result.\n|String up to 50 characters |\n|Result_Msg1_VC | Returns an extra formatted response message giving more information about the processed transaction.\n|String up to 50 characters |\n|Result_Msg2_VC | Returns an extra formatted response message giving more information about the processed transaction.\n|String up to 50 characters |\n| Result_Txt_VC| Returns the text message of either approval or decline for the transaction processing result.\n|String up to 150 characters |\n|Return | Returns the dollar amount of all Return (Credit) transactions.\n|String representing a signed 64-bit real number |\n|Return_Cnt | Returns the transaction count of all Return (Credit) transactions.\n|String representing a signed 32-bit integer |\n|Sale | Returns the dollar amount of all Sale transactions.\n|String representing a signed 64-bit real number |\n|Sale_Cnt | Returns the transaction count of all Sale transactions.\n| String representing a signed 32-bit integer|\n|Settle_Date_DT | Returns the date on which the transaction is settled.\n|String representing a date and time |\n|Settle_Flag_CH | Returns if the transaction is settled or not.\n| String representing value of\n|0=Not Settled |\n|1=Settled |\n|2=Rolled Back/Indeterminate |\n|5=In Progress |\n|StateCode_CH | Returns the state code.\n|String up to 10 characters |\n|Street_CH | Returns the billing street address of the credit card.\n|String up to 25 characters |\n|SureCharge_Amt_MN | Returns the sure charge amount of a transaction.\n|String representing a signed 64-bit real number |\n|Tip_Amt_MN | Returns the tip amount of a transaction.\n|String representing a signed 64-bit real number |\n|Trans_Type_ID | Returns the transaction type, e.g. Sale, Credit.\n|String up to 20 characters |\n|Transport_Method | Returns the Transportation Method.\n|String | Only for use with Dial-up transactions.\n|Transport_EndPoint | Returns the Transportation’s Ending Destination.\n|String | Only for use with Dial-up transactions.\n|TransitNum_VC | Returns the transit/routing number.\n|String up to 200 characters | This field will be masked out with asterisk (*) characters except for the last 4 digits if the System Security Level  of the user is set to 1.\n|TRX_Card_Key | Returns the primary key of the TRX_Card_T table in the database.\n|String representing a signed 32-bit integer |\n|TRX_Check_Key | Returns the primary key of the TRX_Check_T table in the database.\n|String representing a signed 32-bit integer |\n|TRX_HD_Key | Returns the primary key of the TRX_Header_T table in the database.\n|String representing a signed 32-bit integer | This field is the unique transaction identifier (also called PNRef) of the Payment Server. Use its value when submitting transactions based on a previous transaction (i.e. Voids) through the Transact.asmx Web Service.\n| TRX_Settle_Key| Returns the primary key of the TRX_Settle_T table in the database.\n|String representing a signed 32-bit integer |\n|TRX_Settle_Msg_VC |Returns the transaction’s settlement message.\n|String up to 25 characters |\n|Type_CH | Returns the credit card type, e.g. VISA, MASTERCARD.\n|String up to 10 characters |\n|User_Name_VC | Returns the username, under which the transactions were made.\n|String up to 25 characters |\n|Void_Flag_CH | Returns the transaction is voided or not.\n|String representing a Boolean value |\n|Zip_CH | Returns the billing zip code of the credit card.\n|String up to 10 characters |\n|Auth_Amt_MN | Returns the authorized amount of a card transaction.\n|String representing a signed 64-bit real number |\n|Authorization | Returns the dollar amount of all Authorization (PreAuth) transactions.\n|String representing a signed 64-bit real number |\n| Authorization_Cnt| Returns the transaction count of all Authorization (PreAuth) transactions.\n|String representing a signed 32-bit integer |\n|AVS_Resp_CH | Returns the address verification result code from the payment processor.\n|String up to 1 character |\n|AVS_Resp_Txt_VC | Returns the formatted response message when address verification is performed.\n|String up to 25 characters |\n|Batch_Number | Returns the batch number for the transaction that was returned by the payment processor.\n|String up to 10 characters | Not all payment processors support returning this data element.\n|Capture | Returns the dollar amount of all Capture transactions.\n| String representing a signed 64-bit real number| This value will always return “0”.\n|Capture_Cnt | Returns the transaction count of all Capture transactions.\n|String representing a signed 32-bit integer | This value will always return “0”.\n|Card_Info_Key | Returns the primary key of the CC_Info_T table in the database.\n|String representing a signed 32-bit integer |\n|Cash_Back_Amt_MN | Returns the cash back amount for a debit or EBT transaction.\n|String representing a signed 64-bit real number |\n|CheckNum_CH | Returns the check number.\n|String up to 10 characters |\n|Cnt | Returns the transaction count of all transactions.\n|String representing a signed 32-bit integer |\n|CustomerID | Returns the Customer ID of a customer to which the transaction belongs to.\n|String up to 50 characters |\n|CV_Resp_CH | Returns the card verification result code from the payment processor.\n|String up to 1 character |\n| CV_Resp_Txt_VC| Returns the formatted response message when card verification is performed.\n|String up to 25 characters |\n|Date_DT | Returns the date on which the transaction is first made.\n|String representing a date and time |\n|ERROR | Returns an error message when a problem occurs during the transaction processing.\n|String up to 200 characters |\n|Exp_CH |Returns the credit card expiration date.\n|String up to 10 characters |\n|ForceCapture | Returns the dollar amount of all ForceCapture (ForceAuth) transactions.\n|String representing a signed 64-bit real number |\n|ForceCapture_Cnt | Returns the transaction count of all ForceCapture (ForceAuth) transactions.\n|String representing a signed 32-bit integer |\n| Host_Date_CH| Returns the payment processor’s date on which the transaction is performed.\n|String up to 10 characters |\n|Host_Ref_Num_CH | Returns a number which uniquely identifies the transaction for the payment processor.\n|String up to 30 characters |\n|Host_Time_CH | Returns the payment processor’s time at which the transaction was performed.\n|String up to 10 characters |\n|Invoice_ID |Returns the transaction’s Invoice number.\n|String up to 100 characters |\n|IP_VC | Returns the IP address of the client machine from which the transaction was processed.\n|String up to 15 characters |\n|Last_Update_DT | Returns the date and time on which the transaction is last modified.\n|String representing a date and time |\n|Manual | Returns the card was swiped or not.\n|String representing a Boolean value |\n|Merchant_Key | Returns a number which uniquely identifies a merchant.\n|String representing a signed 32-bit integer |\n|Name_on_Card_VC | Returns the name of the cardholder.\n|String up to 25 characters |\n|NameOnCheck_VC | Returns the check payer’s name on the check.\n|String up to 25 characters |\n|Orig_TRX_HD_Key |Returns the TRX_HD_Key on which the current transaction is based.\n|String representing a signed 32-bit integer |\n|Payment_Type_ID | Returns the payment type, e.g. ECHECK.\n|String up to 10 characters |\n|PostAuth | Returns the dollar amount of all PostAuth transactions.\n|String representing a signed 64-bit real number |\n|PostAuth_Cnt | Returns the transaction count of all PostAuth transactions.\n|String representing a signed 32-bit integer |\n|Processor_ID | Returns the name the payment processor, e.g. Vital.\n|String up to 10 characters |\n|Receipt | Returns the dollar amount of all transactions with a Receipt.\n|String representing a signed 64-bit real number | This value will always return “0”.\n|Receipt_Cnt | Returns the transaction count of all transactions with a Receipt.\n|String representing a signed 32-bit integer | This value will always return “0”.\n|Ref_Number_CH | Not currently used.\n|String | This field is not the unique transaction identifier (also called PNRef) of the Payment Server.  See the field TRX_HD_Key for the PNRef value.\n| Register_Number_CH| Returns the register number of a transaction.\n|String up to 10 characters | \n|RepeatSale | Returns the dollar amount of all RepeatSale (Recurring Billing/Installment) transactions.\n|String representing a signed 64-bit real number |\n|RepeatSale_Cnt | Returns the transaction count of all RepeatSale (Recurring Billing/Installment) transaction.\n|String representing a signed 32-bit integer |\n|Reseller_Key | Returns the primary key of the Reseller_T table in the database.\n|String representing a signed 32-bit integer |\n|Result_CH | Returns the transaction processing result, e.g. 0, 12.  “0” for approval, “12” for decline.\n|String up to 50 characters |\n|Result_Msg_VC | Returns the check transaction’s processing result.\n|String up to 50 characters |\n|Result_Msg1_VC | Returns an extra formatted response message giving more information about the processed transaction.\n|String up to 50 characters |\n|Result_Msg2_VC | Returns an extra formatted response message giving more information about the processed transaction.\n|String up to 50 characters |\n|Result_Txt_VC | Returns the text message of either approval or decline for the transaction processing result.\n|String up to 150 characters |\n|Return | Returns the dollar amount of all Return (Credit) transactions.\n| String representing a signed 64-bit real number|\n|Return_Cnt | Returns the transaction count of all Return (Credit) transactions.\n|String representing a signed 32-bit integer |\n|Sale | Returns the dollar amount of all Sale transactions.\n|String representing a signed 64-bit real number |\n|Sale_Cnt |Returns the transaction count of all Sale.\n|String representing a signed 32-bit integer |\n|Settle_Date_DT | Returns the date on which the transaction is settled.\n|String representing a date and time |\n|Settle_Flag_CH | Returns if the transaction is settled or not.\n|String representing a Boolean value |\n|StateCode_CH | Returns the state code.\n|String up to 10 characters |\n|Street_CH | Returns the billing street address of the credit card.\n|String up to 25 characters |\n|SureCharge_Amt_MN | Returns the sure charge amount of a transaction.\n|String representing a signed 64-bit real number |\n|Tip_Amt_MN | Returns the tip amount of a transaction.\n|String representing a signed 64-bit real number |\n|Total_Amt_MN | Returns the total amount of a transaction.\n|String representing a signed 64-bit real number |\n|Trans_Type_ID | Returns the transaction type, e.g. Sale, Credit.\n|String up to 20 characters |\n|Transport_Method | Returns the Transportation Method.\n|String | Only for use with Dial-up transactions.\n|Transport_EndPoint | Returns the Transportation’s Ending Destination.\n|String | Only for use with Dial-up transactions.\n|TransitNum_VC | Returns the transit/routing number.\n|String up to 200 characters | This field will be masked out with asterisk (*) characters except for the last 4 digits if the System Security Level of the user is set to 1.\n|TRX_Card_Key | Returns the primary key of the TRX_Card_T table in the database.\n|String representing a signed 32-bit integer |\n|TRX_Check_Key | Returns the primary key of the TRX_Check_T table in the database.\n|String representing a signed 32-bit integer |\n|TRX_HD_Key | Returns the primary key of the TRX_Header_T table in the database.\n|String representing a signed 32-bit integer | This field is the unique transaction identifier (also called PNRef) of the Payment Server. Use its value when submitting transactions based on a previous transaction (i.e. Voids) through the Transact.asmx Web Service.\n|TRX_Settle_Key | Returns the primary key of the TRX_Settle_T table in the database.\n|String representing a signed 32-bit integer |\n|TRX_Settle_Msg_VC | Returns the transaction’s settlement message.\n|String up to 25 characters |\n|Type_CH | Returns the credit card type, e.g. VISA, MASTERCARD..\n|String up to 10 characters |\n|User_Name_VC | Returns the username, under which the transactions were made.\n|String up to 25 characters |\n|Void_Flag_CH |Returns the transaction is voided or not.\n|String representing a Boolean value |\n|Zip_CH | Returns the billing zip code of the credit card.\n|String up to 10 characters |\n\n# 5. Recurring Billing \n\n# 5.1. ManageCustomer \nThis service is used to add, update, or delete a recurring billing customer record. Calling this service is the first step towards succesfully storing and initiating recurring payments.\n\nSee Developer’s Notes for information about [Recurring Billing Web Services.](#section/recur)\n\n## Request\n\nManageCustomer(Username, Password, TransType, Vendor, CustomerKey, CustomerID, CustomerName, FirstName, LastName, Title, Department, Street1, Street2, Street3, City, StateID, Province, Zip, CountryID, Email, DayPhone, NightPhone, Fax, Mobile, Status, ExtData)\n\n```\nRecurringSoapClient recurring = new RecurringSoapClient(\"RecurringSoap\");\n\nrecurringResult = recurring.ManageCustomer(\"username\", \"password\", \"ADD\",\n    \"5\", \"\", \"Stonebreaker\", \"Rocks and Stones\", \"Barney\", \"Rubble\",\n    \"Senior VP\", \"Countertops\", \"111 Bedrock Lane\", \"Suite 555\", \"\",\n    \"Bedrock\", \"IL\", \"\", \"90210\", \"USA\", \"barney@rubble.net\",\n    \"630-555-1212\", \"847-555-1212\", \"\", \"630-555-1313\", \"\", \"\");\n```\n\n## Response\n\n```\nAuthCode    null    string\nCcInfoKey    null    string\nCheckInfoKey    null    string\nContractKey    null    string\nCustomerKey    \"26\"    string\nExtData    null    string\nMessage    null    string\nPNRef    null    string\nPartner    \"\"    string\nResult    null    string\nUsername    \"username\"    string\nVendor    \"5\"    string\ncode    OK    ResultCode\nerror    \"OK\"    string\n```\nView [RecurringResult Response Fields.](#section/recurringresult-response-fields)\n\n## ManageCustomer Input Parameters\n\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|TransType | Indicates whether the contract is being added, updated, or deleted.\n| | Valid entries are:\n| | - ADD\n| | - UPDATE\n| | - DELETE\n| |**Important Note:** Passing in ‘NULL’ values to this service with a TransType of ‘UPDATE’ will override existing values to ‘NULL’. It is very important that all data be updated when making this web service call.\n| Vendor| Unique numeric value used to identify the merchant.\n| | Note: Vendor key may also be called Merchant ID, Merchant Number, or RPNum. To locate your Vendor key on the virtual terminal, click Password under the Preferences menu.\n|CustomerKey | Unique identifier assigned to the customer record by the system at the time the customer record is created.\n|Required when TransType=UPDATE | Note: The CustomerKey value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerKey appears in the Key column.\n|CustomerID | Unique identifier assigned to the customer by the merchant at the time the customer record is created.\n| |Note: The CustomerID value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerID appears in the Customer ID column.\n|CustomerName | Individual or customer business name.\n| |Note: The CustomerName can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerName appears in the Customer Name column.\n|FirstName | Customer contact first name.\n|Optional |\n|LastName | Customer contact last name.\n|Optional |\n|Title | Customer contact job or professional title. For example, “Business Unit Manager,” or “Dr.”\n|Optional |\n|Department | Customer contact department. For example, “Sales,” or “Operations.”\n|Optional |\n|Street1 | Customer contact street address – line 1.\n|Optional |\n|Street2 | Customer contact street address – line 2.\n|Optional |\n|Street3 | Customer contact street address – line 3.\n|Optional |\n|City | Customer contact city.\n|Optional |\n|StateID | Customer contact’s standard U.S. postal service two-character state code (U.S. customers only).\n|Optional | Note: Valid entries are standard U.S. Postal service two-character state codes. For more information, see [http://pe.usps.gov/text/pub28/28apb.htm.]\n|Province | Customer contact’s province (countries outside the U.S., only).\n|Optional |\n|Zip | Customer contact’s zip or postal code.\n|Optional |\n|CountryID | Customer contact’s three-character country code. For example, USA = United States or CAN = Canada.\n|Optional |\n|DayPhone | Customer contact’s daytime phone number.\n|Optional |\n|NightPhone | Customer contact’s after-hours phone number.\n|Optional |\n|Fax | Customer contact’s fax number.\n|Optional |\n|Email | Customer contact’s email address.\n|Optional |\n|Mobile |Customer contact’s mobile phone number.\n|Optional |\n|Status | Indicates whether the customer record is currently active or inactive.\n|Optional | Valid values are:\n| | - ACTIVE\n| | - INACTIVE\n| | - PENDING\n| | - CLOSED\n|ExtData | Reserved for future use.\n|Optional |\n\n# 5.2. ManageCreditCardInfo \nThis service allows you to store a credit card number securely within the Payment Server database. Calling this service is the second step towards successfully storing and initiating recurring payments if a credit card is to be the preferred method of payment.\n\nSee Developer’s Notes for information about [Recurring Billing Web Services.](#section/recur)\n\n## Request\n\nManageCreditCardInfo(Username, Password, TransType, Vendor, CustomerKey, CardInfoKey, CcAccountNum, CcExpDate, CcNameOnCard, CcStreet, CcZip, ExtData)\n\nNote: The customerKey in the call below is obtained in the response to the [ManageCustomer](#section/managecustomer) call.\n\n```\nRecurringSoapClient recurring = new RecurringSoapClient(\"RecurringSoap\");\n\nrecurringResult = recurring.ManageCreditCardInfo(\n\"username\", \"password\", \"ADD\", \"5\", customerKey, \"\",\n\"4012888888881881\", \"1216\", \"Barney Rubble\", \"\",\n\"90210\", \"\");\n```\n\n## Response\n\n```\nAuthCode    null    string\nCcInfoKey    \"13581\"    string\nCheckInfoKey    \"\"    string\nContractKey    \"\"    string\nCustomerKey    \"26\"    string\nExtData    null    string\nMessage    null    string\nPNRef    null    string\nPartner    \"100\"    string\nResult    null    string\nUsername    \"username\"    string\nVendor    \"5\"    string\ncode    OK    ResultCode\n```\nView [RecurringResult Response Fields.](#section/recurringresult-response-fields)\n\n## ManageCreditCardInfo Input Parameters \n\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username| User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password| Password associated with the user name provided.\n|TransType| Indicates whether the contract is being added, updated, or deleted.\n||Valid entries are:\n|| - ADD\n|| - UPDATE\n|| - DELETE\n|Vendor| Unique numeric value used to identify the merchant.\n|| Note: Vendor key may also be called Merchant ID, Merchant Number, or RPNum. To locate your Vendor key on the virtual terminal, click Password under the Preferences menu.\n|CustomerKey| Unique identifier assigned to the customer record by the system at the time the customer record is created.\n||Note: The CustomerKey value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerKey appears in the Key column.\n|CardInfoKey| Numerical key value assigned to the payment method when it was added to the system.\n|Optional|\n|CcAccountNum| Credit card number used to uniquely identify the card owner’s account.\n|Optional|\n|CcExpDate| Credit card date of expiration in MMYY format.\n|CcNameOnCard| Card owner’s name as it appears on the card.\n|Optional|\n|CcStreet|Card owner’s billing address street name and number.\n|Optional|\n|CcZip| Card owner’s billing address postal/zip code.\n|Optional|\n|ExtData| Reserved for future use.\n|Optional|\n\n# 5.3. ManageCheckInfo  \nThis service allows you to store a checking account number securely within the Payment Server database. Calling this service is the second step towards successfully storing and initiating recurring payments if ACH or ECHECKs are to be the preferred method of payment.\n\nSee Developer’s Notes for information about [Recurring Billing Web Services.](#section/recur)\n\n## Request\n\nManageCheckInfo(Username, Password, Vendor, TransType, CustomerKey, CheckInfoKey, CheckType, AccountType, CheckNum, MICR, AccountNum, TransitNum, RawMICR, SS, DOB, BranchCity, DL, StateCode, NameOnCheck, Email, DayPhone, Street1, Street2, Street3, City, StateID, Province, PostCode, CountryID, ExtData)\n\n## Response\n\nResponse here\n\nView [RecurringResult Response Fields.](#section/recurringresult-response-fields)\n\n## ManageCheckInfo  Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n | Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|TransType | Indicates whether the contract is being added, updated, or deleted.\n| | Valid entries are:\n| | - ADD\n| | - UPDATE\n| | - DELETE\n|CustomerKey | Unique identifier assigned to the customer record by the system at the time the customer record is created.\n| | Note: The CustomerKey value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerKey appears in the Key column. \n|CheckInfoKey | Numerical key value assigned to the payment method when it was added to the system.\n|Required when TransType=UPDATE or DELETE |\n|CheckType | Identifies the type of check as a personal or business check.\n| |Valid values are:\n| |- PERSONAL – Check is made from an individual (personal) checking account\n| | - BUSINESS – Check is made from a business checking account\n|AccountType | Indicates whether the funds come from a checking or savings account.\n| |Valid values are:\n| |- CHECKING – Check is made from a standard checking account or ACH\n| | - SAVINGS – Check is made from a savings account\n|CheckNum | Uniquely identifies an individual’s check.\n|Optional |\n|MICR | Magnetic Ink Check Reader data line. This data string includes the TransitNum and AccountNum.\n|Optional | Note: This parameter should be used if the developer knows the precise format for the MICR that is supported by the check processor. If the precise format is unknown, the raw MICR should also be included with the transaction. See the <RawMICR> tag under the ExtData parameter for additional information.\n|AccountNum | Uniquely identifies the check owner’s bank account.\n| TransitNum| Uniquely identifies the bank holding funds. Also called routing number.\n|RawMICR | The raw MICR format certain check readers produce.\n|Optional |\n|SS | Check owner’s Social Security number.\n|Optional |\n|DOB | Check owner’s date of birth.\n|Optional |\n|BranchCity |City where the issuing bank branch is located.\n|Optional |\n|DL| Check owner’s driver’s license number.\n|Optional|\n|StateCode| Check owner’s standard U.S. postal service two-character state code or other standard province code.\n|Optional|Note: Valid entries should follow USPS two-character state code standards. For more information, see [http://pe.usps.gov/text/pub28/28apb.htm].\n||See [Invalid Character Processing.](#section/invalidchar)\n|NameOnCheck| Check owner’s name as it appears on the check.\n|Optional| See [Invalid Character Processing.](#section/invalidchar)\n|NameOnCheck| Check owner’s name as it appears on the check.\n|Email| Customer contact’s email address.\n|Optional|\n|DayPhone| Customer contact’s daytime phone number.\n|Optional| \n|Street1| Customer contact street address – line 1.\n|Optional|\n|Street2| Customer contact street address – line 2.\n|Optional|\n|Street3| Customer contact street address – line 3.\n|Optional|\n|City| Customer contact city.\n|Optional|\n|StateID| Customer contact’s standard U.S. postal service two-character state code (U.S. customers only).\n|Optional|\n|Province| Customer contact’s province (countries outside the U.S., only).\n|Optional|\n|PostCode| Customer contact’s zip or postal code.\n|Optional|\n|CountryID| Customer contact’s three-character country code. For example, USA = United States or CAN = Canada.\n|Optional|\n|ExtData| Reserved for future use.\n|Optional|\n\n# 5.4. ManageContract  \nThis service allows the integrator to add, update, or delete the terms and interval of a recurring billing contract.\nSee Developer’s Notes for information about  [Recurring Billing Web Services.](#section/recur)\n\n## Request\n\nManageContract(Username, Password, TransType, Vendor, CustomerKey, ContractKey, PaymentInfoKey, PaymentType, CustomerID, CustomerName, FirstName, LastName, Department, Street1, Street2, Street3, City, StateID, Province, Zip, CountryID, DayPhone, NightPhone, Fax, Email, Mobile, ContractID, ContractName, BillAmt, TaxAmt, TotalAmt, StartDate, EndDate, NextBillDt, BillingPeriod, BillingInterval, MaxFailures, FailureInterval, EmailCustomer, EmailMerchant, EmailCustomerFailure, EmailMerchantFailure, Status, ExtData)\n\nNote: The ccInfoKey in the call below is obtained in the response to the [ManageCreditCardInfo](#section/recur) call\n\n```\nRecurringSoapClient recurring = new RecurringSoapClient(\"RecurringSoap\");\n\nrecurringResult = recurring.ManageContract(\n\"username\", \"password\", \"ADD\", \"5\",\ncustomerKey, \"\", ccInfoKey, \"CC\", \"Stonebreaker1\", \"Rocks and Stones\",\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"barney@rubble.com\",\"\",\n\"\", \"\", \"\", \"Sidewalk deliveries ID\", \"Sidewalk deliveries name\",\n\"200.87\", \"1.37\", \"202.24\", \"7/1/2016\", \"12/1/2016\", \"8/1/2016\",\n\"MONTH\", \"1\", \"2\", \"\", \"TRUE\", \"FALSE\", \"TRUE\", \"FALSE\", \"\", \"\");\n```\n\n## Response\n\n```\nAuthCode    null    string\nCcInfoKey    \"13581\"    string\nCheckInfoKey    \"\"    string\nContractKey    \"8\"    string\nCustomerKey    \"26\"    string\nExtData    null    string\nMessage    null    string\nPNRef    null    string\nPartner    \"100\"    string\nResult    null    string\nUsername    \"username\"    string\nVendor    \"5\"    string\ncode    OK    ResultCode\nerror    \"OK\"    string\n```\nView [RecurringResult Response Fields.](#section/recurringresult-response-fields)\n\n## ManageContract Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|TransType | Indicates whether the contract is being added, updated, or deleted.\n| | Valid entries are:\n| | - ADD\n| | - UPDATE\n| | - DELETE\n|Vendor | Unique numeric value used to identify the merchant.\n| | Note: Vendor key may also be called Merchant ID, Merchant Number, or RPNum. To locate your Vendor key on the virtual terminal, click Password under the Preferences menu.\n|CustomerKey | Unique identifier assigned to the customer record by the system at the time the customer record is created.\n| | Note: The CustomerKey value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerKey appears in the Key column.\n|ContractKey | Unique identifier assigned to the contract by the system at the time the contract record is created.\n|Required when TransType=UPDATE or DELETE | Note: The ContractKey value appears in the return results (see <ContractKey></ContractKey> tags) when a new contract is added to the system.\n|PaymentInfoKey | Information passed in the PaymentInfoKey parameter will vary depending on the PaymentType value passed.\n|Required when TransType=ADD or UPDATE | - If a PaymentType of CC (credit card) is passed, send the CardInfoKey value\n| | - If a PaymentType of CK (check) is passed, send the CheckInfoKey value\n|PaymentType | Identifies the type of payment method used.\n|Required when TransType=ADD or UPDATE | Valid values are:\n| | - CC – Credit card\n| | - CK – Check/ACH\n| | Note: This parameter is case sensitive. Lower case entries will result in an error.\n|CustomerID | Unique identifier assigned to the customer by the merchant at the time the customer record is created.\n| |Note: The CustomerID value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerID appears in the Customer ID column.\n|CustomerName | Individual or customer business name.\n| |Note: The CustomerName can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerName appears in the Customer Name column.\n|FirstName | Customer contact first name.\n|Optional |\n|LastName | Customer contact last name.\n|Optional |\n|Department | Customer contact department. For example, “Sales,” or “Operations.”\n| Optional|\n|Street1 | Customer contact street address – line 1.\n|Optional |\n|Street2 | Customer contact street address – line 2.\n|Optional |\n|Street3 | Customer contact street address – line 3.\n|Optional |\n|City | Customer contact city.\n|Optional |\n|StateID | Customer contact’s standard U.S. postal service two-character state code (U.S. customers only).\n|Optional | Note: Valid entries are standard U.S. Postal service two-character state codes. For more information, see [http://pe.usps.gov/text/pub28/28apb.htm.]\n|Province | Customer contact’s province (countries outside the U.S., only).\n|Optional |\n|Zip | Customer contact’s zip or postal code.\n|Optional |\n|CountryID | Customer contact’s three-character country code. For example, USA = United States or CAN = Canada.\n|Optional |\n|DayPhone | Customer contact’s daytime phone number.\n|Optional |\n|NightPhone | Customer contact’s after-hours phone number.\n|Optional |\n|Fax | Customer contact’s fax number.\n|Optional |\n|Email | Customer contact’s email address.\n|Optional |\n|Mobile |Customer contact’s mobile phone number.\n|Optional |\n|ContractID | Unique identifier assigned to the contract by the merchant at the time the contract record is created.\n| |Note: The ContractKey value can be found on the virtual terminal by accessing the View Contracts option under the Recurring Billing menu. Display a list of contracts by entering search criteria. The ContractKey appears in the Contract ID column.\n|ContractName | Name assigned to the contract (used for easier identification).\n|Optional |\n|BillAmt | Amount billed each time the contract comes due in DD.CCCC format.\n|TaxAmt | Additional tax amount applied to the BillAmt each time the contract comes due in DD.CCCC format.\n|Optional |\n|TotalAmt | Total amount billed each time the contract comes due in DD.CCCC format.\n| |BillAmt + TaxAmt = TotalAmt\n|StartDate | Date that the contract becomes effective in MM/DD/YYYY format. The start date must be greater than today’s date.\n| |The StartDate represents the first time the customer will be billed per the contract. Future bill dates are calculated using the BillingPeriod and BillingInterval parameters.\n|EndDate | Date that the contract is completed in MM/DD/YYYY format. The end date must be greater than the start date.\n|NextBillDt |Identifies the next time the contract will come due in MM/DD/YYYY format.\n|Required when TransType=ADD or UPDATE | Note: The NextBillDe can be found on the contract detail in the virtual terminal. Click View Contracts under the Recurring Billing menu and search for the contract you want to work with. Click the linked Contract ID and locate the Next Bill Date field.\n| |See also ManageContractAddDaysToNextBillDt for simplified processing where only NextBillDt will be updated.\n| BillingPeriod| This value is used in conjunction with the BillingInterval to compute the next bill date for a contract.\n| | Valid values are:\n| |- DAY\n| |- WEEK\n| |- MONTH\n| |- YEAR\n| |Note: The system will automatically account for 31 day months and/or leap years. For example:\n| | - Recurring billing is set to run once monthly\n| | - The contract start date is set for the 31st\n| | If the next month only has 30 days, recurring billing will automatically run the transaction on the 30th.\n| | Note: This parameter is case sensitive.\n| | Examples of billing cycles and how are shown in this table:\n| **Billing Cycle** | **BillingPeriod**| **BillingInterval**\n|Weekly |WEEK |  1\n|Every Two Weeks |DAY |  14\n|Every Four Weeks |DAY |  28\n|Monthly |MONTH |  1\n|Quarterly |YEAR |  4\n|Twice Yearly |YEAR |  2\n|Yearly |YEAR |  1\n|BillingInterval | This value is used in conjunction with the BillingPeriod to compute the next bill date for a contract.\n| |Valid values are:\n| |- 1\n| |- 2\n| |- 4\n| |- 14\n| |- 21\n| |- 28\n|MaxFailures | The number of times the system will try to re-process a failed payment before the contract is placed in suspended state. Valid entries are integers 0-10.\n|Optional | If left blank, the default value is zero (0). A MaxFailure = 0 means that the system will not try to reprocess a failed payment.\n| | IMPORTANT: When a payment fails to process and the MaxFailures parameter is set to a value greater than zero (0), all future payments will be ignored until the failed payment is either successfully processed or the contract is suspended.\n|FailureInterval | Note: This parameter has been deprecated.\n|Optional |\n|EmailCustomer | Indicates whether the system will send an email to the customer after successfully processing a scheduled payment.\n|Optional | Valid values are:\n| | - TRUE – Email is sent to the customer after successful payment\n| | - FALSE – (default) Customer is not notified after successful payment\n| |Note: Email notifications can only be sent if a valid customer contact email has been provided in the customer record.\n|EmailMerchant | Indicates whether the system will send an email to the merchant after successfully processing a scheduled payment.\n|Optional |Valid values are:\n| |- TRUE – Email is sent to the merchant after successful payment\n| |- FALSE – (default) Merchant is not notified after successful payment\n|EmailCustomerFailure| Indicates whether the system will send an email to the customer after failing to process a scheduled payment.\n|Optional | Valid values are:\n| | - TRUE – Email is sent to the customer after failed payment\n| | - FALSE – (default) Customer is not notified after failed payment\n| |Note: mail notifications can only be sent if a valid customer contact email has been provided in the customer record.\n|EmailMerchantFailure | Indicates whether the system will send an email to the merchant after failing to process a scheduled payment.\n| |Valid values are:\n| |- TRUE – Email is sent to the merchant after failed payment\n| |- FALSE – (default) Merchant is not notified after failed payment\n| |Note: Email notifications can only be sent if a valid merchant contact email has been provided in the merchant record.\n| Status|Indicates whether the contract is currently active (reviewed each day for pending payments due) or inactive.\n|Optional |Valid values are:\n| |- ACTIVE – Contract is reviewed each day for pending payments\n| |- INACTIVE – Contract is not reviewed for pending payments\n| |- PENDING – Payment had failed to process\n| |- CLOSED – contract has been programmatically closed and is no longer used\n|ExtData | Reserved for future use.\n|Optional |\n\n# 5.5. MANAGECONTRACTADDDAYSTONEXTBILLDT \nThis web service allows the integrator to update the NextBillDate in the event that a payment was declined and a contract suspended.\n\nSee Developer’s Notes for information about [Recurring Billing Web Services.](#section/recur)\n\n## Request\nManageContractAddDaysToNextBillDt(Username, Password, Vendor, CustomerKey, ContractKey, NumOfDays, ExtData)\n\n## Response\nResponse here\n\nView [RecurringResult Response Fields.](#section/recurringresult-response-fields)\n\n## ManageContractAddDaysToNextBillDt  Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|Vendor |  Unique numeric value used to identify the merchant for the query.\n| |Note: Vendor key may also be called Merchant ID, Merchant Number, or RPNum. To locate your Vendor key on the virtual terminal, click Password under the Preferences menu.\n|CustomerKey | Unique identifier assigned to the customer record by the system at the time the customer record is created.\n| |Note: The CustomerKey value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerKey appears in the Key column.\n|ContractKey | Unique identifier assigned to the contract by the system at the time the contract record is created.\n| |Note: The ContractKey value appears in the return results (see <ContractKey></ContractKey> tags) when a new contract is added to the system.\n|NumOfDays | The number of days to be added to the NextBillDt field. This value must be a positive integer.\n|ExtData | Reserved for future use.\n|Optional |\n\n# 5.6. ADDRECURRINGCREDITCARD  \nThe AddRecurringCreditCard web service is a convenience function that allows an integrator to wrap the functionality of three separate calls into one. Rather than having to call ManageCustomer then ManageCreditCardInfo and finally ManageContract (while passing along various return values into subsequent calls) one can simply call AddRecurringCreditCard.\n\n\n## Request\nAddRecurringCreditCard(Username, Password, Vendor, CustomerID, CustomerName, FirstName, LastName, Title, Department, Street1, Street2, Street3, City, StateID, Province, Zip, CountryID, Email, DayPhone, NightPhone, Fax, Mobile, ContractID, ContractName, BillAmt, TaxAmt, TotalAmt, StartDate, EndDate, BillingPeriod, BillingInterval, MaxFailures, FailureInterval, EmailCustomer, EmailMerchant, EmailCustomerFailure, EmailMerchantFailure, CcAccountNum, CcExpDate, CcNameOnCard, CcStreet, CcZip, ExtDat)\n\n## Request Example\n```\nRecurringSoapClient recurring = new RecurringSoapClient(\"RecurringSoap\");\n\nrecurringResult = recurring.AddRecurringCreditCard(\n\"username\", \"password\", \"5\",\"Stonebreaker2\",\n\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n\"barney@rubble.com\", \"\", \"\", \"\", \"\",\n\"mycontract1\", \"Payment for stones\", \"234.11\", \"5.00\", \"239.11\",\n\"8/1/2016\", \"12/1/2016\", \"DAY\", \"1\", \"0\", \"\",\n\"TRUE\", \"FALSE\", \"TRUE\", \"FALSE\",\n\"4012888888881881\", \"1216\", \"Barney Rubble\", \"111 Bedrock Lane\",\n\"90210\", \"\");\n```\n\n## Response\nAuthCode, CcInfoKey, CheckInfoKey, ContractKey, CustomerKey, ExtData, Message, PNRef, Partner, Result, Username, Vendor, code, error\n\n```\nAuthCode    null    string\nCcInfoKey    \"13582\"    string\nCheckInfoKey    \"\"    string\nContractKey    \"9\"    string\nCustomerKey    \"27\"    string\nExtData    null    string\nMessage    null    string\nPNRef    null    string\nPartner    \"100\"    string\nResult    null    string\nUsername    \"username\"    string\nVendor    \"5\"    string\ncode    OK    ResultCode\nerror    \"OK\"    string\n```\n\nView [RecurringResult Response Fields.](#section/recurringresult-response-fields)\n\n## AddRecurringCreditCard   Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have the appropriate security permissions in order for the system to return transaction records.\n|Password | Password for the user name assigned in the payment server.\n|Vendor |  Unique numeric value used to identify the merchant.\n|CustomerID |Uniques identifier assigned to the customer by the merchant at the time the customer record is created.\n|CustomerName | Individual or customer business name.\n|FirstName |Customer contact first name.\n|Optional | \n|LastName |Customer contact last name.\n|Optional |  \n|Title | Customer contact job or professional title. For example, “Business Unit Manager,” or “Dr.”\n|Optional |\n|Department | Customer contact department. For example, “Sales,” or “Operations.”\n|Optional |\n|Street1 | Customer contact street address – line 1.\n|Optional |\n|Street2 |Customer contact street address – line 2.\n|Optional |\n|Street3 |Customer contact street address – line 3.\n|Optional |\n|City | Customer contact city.\n|Optional |\n|StateID | Customer contact’s standard U.S. postal service two-character state code (U.S. customers only).\n|Optional |\n|Province |Customer contact’s province (countries outside the U.S., only).\n|Optional |\n|Zip | Customer contact’s zip or postal code.\n|Optional |\n|CountryID | Customer contact’s three-character country code. For example, USA = United States or CAN = Canada.\n|Optional |\n|Email | Customer contact’s email address.\n|Optional |\n|DayPhone | Customer contact’s daytime phone number.\n|Optional |\n|NightPhone | Customer contact’s after-hours phone number.\n|Optional |\n|Fax |Customer contact’s fax number.\n|Optional |\n|Mobile |Customer contact’s mobile phone number.\n|Optional |\n|ContractID |Unique identifier assigned to the contract by the merchant at the time the contract record is created.\n|Optional |\n|ContractName |Name assigned to the contract (used for easier identification).\n|Optional |\n|BillAmt |Amount billed each time the contract comes due in DD.CCCC format.\n|Optional |\n|TaxAmt |Additional tax amount applied to the BillAmt each time the contract comes due in DD.CCCC format.\n|Optional |\n|TotalAmt | Total amount billed each time the contract comes due in DD.CCCC format.\n| |BillAmt + TaxAmt = TotalAmt\n|StartDate | Date that the contract becomes effective in MM/DD/YYYY format. The start date must be greater than today’s date.\n| |The Start Date represents the first time the customer will be billed per the contract. Future bill dates are calculated using the BillingPeriod and BillingInterval parameters.\n|EndDate | Date that the contract is completed in MM/DD/YYYY format. The end date must be greater than the start date.\n|BillingPeriod   |This value is used in conjunction with the Billing Interval to compute the next bill date for a contract.\n| |Valid values are:\n| |- DAY\n| |- WEEK\n| |- MONTH\n| |- YEAR\n| |Note: The system will automatically account for 31 day months and/or leap years. For example:\n| | - Recurring billing is set to run once monthly\n| | - The contract start date is set for the 31st\n| |If the next month only has 30 days, recurring billing will automatically run the transaction on the 30th.\n| |Note: This parameter is case sensitive.\n| |Examples of billing cycles and how are shown in this table:\n|**Billing Cycle** |**BillingPeriod**|**BillingInterval**\n|Weekly |WEEK |1\n|Every Two Weeks   |DAY  |14\n|Every Four Weeks   | DAY | 28\n|Monthly | MONTH |1\n|Quarterly |YEAR | 4\n|Twice Yearly   |YEAR |2\n|Yearly |YEAR |1\n| BillingInterval|  This value is used in conjunction with the BillingPeriod to compute the next bill date for a contract.\n| |Value values are:\n| |-1\n| |-2\n| |-4\n| |-14\n| |-21\n| |-28\n|MaxFailures |  The number of times the system will try to re-process a failed payment before the contract is placed in suspended state. Valid entries are integers 0-10.\n|Optional | If left blank, the default value is zero (0). A MaxFailure = 0 means that the system will not try to reporcess a failed payment.\n| |IMPORTANT: When a payment fails to process and the MaxFailures parameter is set to a value greater than zero (0), all future payments will be ignored until the failed payment is either successfull processed or the contract is suspended.\n|FailureInterval |  Note: This parameter has been deprecated.\n|Optional |\n|EmailCustomer | Indicates whether the system will send an email to the customer after successfully processing a scheduled payment.\n|Optional | Valid values are:\n| |-TRUE – Email is sent to the customer after successful payment\n| |- FALSE – (default) Customer is not notified after successful payment\n| |Note: Email notification can only be sent if a valid customer contact email has been provided in the customer record.\n|EmailMerchant | Indicates whether the system will send an email to the merchant after successfully processing a scheduled payment.\n|Optional | Valid values are:\n| |-TRUE – Email is sent to the merchant  after successful payment\n| |- FALSE – (default) Merchant  is not notified after successful payment\n|EmailCustomerFailure |  Indicates whether the system will send an email to the customer after failing to process a scheduled payment.\n|Optional | Valid values are:\n| |- TRUE – Email is sent to the customer after failed payment\n| |- FALSE – (default) Customer is not notified after failed payment\n| |Note: Email notification can only be sent if a valid customer contact email has been provided in the customer record.\n|EmailMerchantFailure |\n|Optional |  Indicates whether the system will send an email to the merchant after failing to process a scheduled payment.\n| |Valid values are:\n| |- TRUE – Email is sent to the merchant after failed payment\n| |- FALSE – (default) Merchant is not notified after failed payment\n|CcAccountNum |  Credit care number used to uniquely identify the card owner’s account.\n|Optional |\n|CcExpDate | Credit card date of expiration in MMYY format.\n|Optional |\n|CcNameOnCard | Card owner’s name as it appears on the card.\n|Optional |\n|CcStreet |Card owner’s billing address street name and number.\n|Optional |\n|CcZip |Card owner’s billing address postal/zip code.\n|Optional |\n|ExtData |Reserved for future use.\n|Optional |\n\n# 5.7. PROCESSCREDITCARD  (RECURRING BILLING)  \nThis web service allows an integrator to process a Credit Card Transaction against a checking account that has been stored using ManageCreditCardInfo\n\nThis web service is for processing ‘Sale’ transactions only.\n\n\n## Request\nProcessCreditCard(Username, Password, Vendor, CcInfoKey, Amount, InvNum, ExtData)\n\nNote: The CcInfoKey in the call below is obtained in the response to the [ManageCreditCardInfo](#section/recur) call\n\n\n```\n  RecurringSoapClient recurring = new RecurringSoapClient(\"RecurringSoap\");\n\n  recurringResult = recurring.ProcessCreditCard(\"username\", \"password\", \"5\",\n  CcInfoKey, \"12.34\", \"888\", \"\");\n```\n\n## Response\n\n```\nAuthCode null string\nCcInfoKey null string\nCheckInfoKey null string\nContractKey null string\nCustomerKey null string\nExtData \"<CardType>VISA</CardType>\n<LastFour>1881</LastFour>\n<ExpDate>1216</ExpDate>\" string\nMessage \"Duplicate transaction\" string\nPNRef \"13621\" string\nPartner null string\nResult \"110\" string\nUsername null string\nVendor null string\ncode OK ResultCode\nerror \"DECLINED\" string\n```\n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessCreditCard    Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|Vendor | Unique numeric value used to identify the merchant for the query. The Vendor key is assigned by the gateway and acts as the primary key for the merchant table.\n| |Note: Vendor key may also be called Merchant ID, Merchant Number, or RPNum. To locate your Vendor key on the virtual terminal, click Password under the Preferences menu.\n|CcInfoKey | Numerical key value assigned to the payment method when it was added to the system.\n| |This value appears in the return result when a new payment method is added (see <CcInfoKey></CcInfoKey> tags) or can be found in the result set from the InfoCustomer web service.\n|Amount |Total transaction amount in DDDD.CC format.\n|InvNum | The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice.\n| Optional| View [ExtData Field Definitions](#section/extdatadef) for more information.\n|ExtData | Reserved for future use.\n|Optional |\n\n# 5.8. PROCESSCHECK (RECURRING BILLING)   \nThis web service allows an integrator to process a Check Transaction against a checking account that has been stored using ManageCheckInfo.\n\nThis web service is for processing ‘Sale’ transactions only.\n\n\n## Request\nProcessCheck(Username, Password, Vendor, CheckInfoKey, Amount, InvNum, ExtData)\n\n## Response\n\nResponse here\n\nView [Transaction Response Fields.](#section/transaction-response-fields)\n\n## ProcessCheck     Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|Vendor | Unique numeric value used to identify a specific gateway account.\n| |Note: Vendor key may also be called Merchant ID, Merchant Number, or RPNum. To locate your Vendor key on the virtual terminal, click Password under the Preferences menu.\n|CheckInfoKey | Numerical key value assigned to the payment method when it was added to the system.\n| |This value appears in the return result when a new payment method is added using ManageCheckInfo (see <CheckInfoKey></CheckInfoKey> tags) or can be found in the result set from the InfoCustomer web service.\n|Amount |Total transaction amount in DDDD.CC format.\n|InvNum | The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice.\n| Optional| View [ExtData Field Definitions](#section/extdatadef) for more information.\n|ExtData | Reserved for future use.\n|Optional |\n\n  # 5.9. RECURRINGRESULT RESPONSE FIELDS   \nThe following response fields may be part of the return value for web services using Recurring Billing operations. These web services include:\n\n- ManageCustomer\n- ManageCreditCardInfo\n- ManageCheckInfo\n- ManageContract\n- ManageContractAddDaysToNextBillDt\n- AddRecurringCreditCard\n\n| Response Field  | Data Value \n|-----|-----\n|AuthCode | String\n|CcInfoKey | String\n|CheckInfoKey | String\n|code | Result Code object\n|ContractKey |String\n|CustomerKey | String\n|error | String\n|ExtData |Reserved for future use.\n|Message |String\n|Partner |String\n|PNRef |String\n|Result |String\n|Username |String\n|Vendor |String\n\n# 6. CARD SAFE \n\n# 6.1. STORECARD \nThis service is used to add a stored payment method to an existing customer record. Calling this service is the first step towards succesfully storing and initiating recurring payments.\n\nSee Developer’s Notes for information about [Card Safe Web Services.](#section/cardsafe)\n\n## Request\nStoreCard(UserName, Password, TokenMode, CardNum, ExpDate, CustomerKey, NameOnCard, Street, Zip, ExtData)\n\n## Response\nResponse example\n\nView [StoreCardResult Response Fields.](#section/storecardresult-response-fields)\n\n## StoreCard Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|TokenMode |Indicates what type of token will be returned when calling the service.\n| | - DEFAULT – Returns a numeric CcInfoKey\n| | - CARDFORMAT – Returns a randomly generated number in the format of a credit card matching the card type of the actual card\n| | - JSTOKEN – Returns a 64 digit alphanumeric token that doesn’t have to be tied to a specific customer\n|CardNum | Credit card number used to uniquely identify the card owner’s account.\n| ExpDate| Credit card date of expiration in MMYY format.\n|CustomerKey | Unique identifier assigned to the customer record by the system at the time the customer record is created.\n| | Note: The CustomerKey value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerKey appears in the Key column. This field is optional when using JSTOKEN mode\n|NameOnCard | Card owner’s name as it appears on the card.\n|Optional |\n|Street |Card owner’s billing address street name and number.\n|Optional |\n|Zip | Card owner’s billing address postal/zip code.\n|Optional |\n|ExtData | Reserved for future use.\n|Optional |\n\n# 6.2. STORECARDFROMPNREF  \nThis service is used to add a stored payment method to an existing customer record using a previous transaction as the basis.\n\nSee Developer’s Notes for information about [Card Safe Web Services.](#section/cardsafe)\n\n## Request\nStoreCardFromPNRef(UserName, Password, TokenMode, PnRef, CustomerKey, Street, Zip, ExtData)\n\n\n```\n safeResponse = safe.StoreCardFromPNRef(\"username\", \"password\", \"DEFAULT\",\n\"34586\", \"876565\", \"\", \"\", \"\");\n```\n\n## Response\nResponse example\n\nView [StoreCardResult Response Fields.](#section/storecardresult-response-fields)\n\n## StoreCardFromPNRref  Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|TokenMode |Indicates what type of token will be returned when calling the service.\n| | - DEFAULT – Returns a numeric CcInfoKey\n| | - CARDFORMAT – Returns a randomly generated number in the format of a credit card matching the card type of the actual card\n|PnRef | Unique payment reference number used to identify a single transaction within the system. The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created. Provide the PNRef that was created by the original transaction that you want to convert to a CardSafe entry\n|CustomerKey | Unique identifier assigned to the customer record by the system at the time the customer record is created.\n| | Note: The CustomerKey value can be found on the virtual terminal by accessing the View Customers option under the Recurring Billing menu. Display a list of customers by entering search criteria. The CustomerKey appears in the Key column.\n|Street |Card owner’s billing address street name and number.\n|Optional |\n|Zip | Card owner’s billing address postal/zip code.\n|Optional |\n|ExtData | Reserved for future use.\n|Optional |\n\n # 6.3. PROCESSCREDITCARD   \nThis web service allows an integrator to process a Credit Card Transaction against an account that has been stored using AddCard\n\n\nSee Developer’s Notes for information about [Card Safe Web Services.](#section/cardsafe)\n\n## Request\nProcessCreditCard(UserName, Password, TransType, CardToken, TokenMode, Amount, InvNum, PNRef, ExtData)\n\n## Response\nResponse example\n\nView [StoreCardResult Response Fields.](#section/storecardresult-response-fields)\n\n## ProcessCreditCard   Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|Username | User name assigned in the payment server. The user must have an appropriate level of access within the system in order to utilize the web service.\n|Password | Password associated with the user name provided.\n|TransType |Identifies the type of credit card transaction being made.\n| | Valid values are:\n| | - Sale – make a purchase using a credit card\n| | - Auth – authorize the amount on a credit card\n| | - Return – credits the card holder’s account\n| | - Void – undo an unsettled transaction\n| | - Force – force an Auth transaction in to the current batch (PostAuth) or place a transaction not processed through the payment server into the current batch (ForceAuth).\n| | Note: When using this transaction type for a ForceAuth, you must include an AuthCode under the ExtData parameter.\n| | - RepeatSale – perform a recurring billing or installment payment transaction.\n| | Processors supporting the restaurant adjustment function only:\n| | - Adjustment – used to modify an existing tip amount for an original sale To call the service.\n|CardToken | Numerical key value assigned to the payment method when it was added to the system.\n| TokenMode|  The type of token that is being used for the transaction.\n| | - DEFAULT – Returns a numeric CcInfoKey\n| | - CARDFORMAT – Returns a randomly generated number in the format of a credit card matching the card type of the actual card\n| | - JSTOKEN – Randomly generated string of characters returned when JavaScript Tokenization is requested.\n|Amount | Total transaction amount in DDDD.CC format.\n|InvNum Optional | The invoice ID is assigned by the merchant. This identifier can be used to locate a specific transaction or multiple transactions grouped under a single invoice.\n| PNRef| Unique payment reference number used to identify a single transaction within the system. The payment reference number (PNRef) is assigned by the payment server at the time the transaction is created.\n|Required when TransType=Return, Void, Force, RepeatSale, and Adjustment|\n|ExtData | Reserved for future use.\n|Optional |\n\n # 6.4. STORECARDRESULT RESPONSE FIELDS   \n  The following response fields may be part of the return value for web services using Card Save operations. These web services include:\n\n- StoreCard\n- ProcessCreditCard\n\n\n| Response Field  | Data Value \n|-----|-----\n|AuthorizedAmount | String\n|Balance | String\n|Result | String\n|RespMSG | String\n|Message |String\n|Message1   | String\n|Message2 | String\n|AuthCode | String\n|PNRef |String\n|HostCode |String\n|HostURL |String\n|ReceiptURL |String\n|GetAVSResult |String\n|GetAVSResultTXT   |String\n|GetStreetMatchTXT |String\n|GetZipMatchTxt |String\n|GetCVResult   |String\n|GetCVResultTXT   |String\n|GetGetOrigResult |String\n|GetCommercialCard   |String\n|WorkingKey   |String\n|KeyPointer   |String\n|ExtData   |String\n\n# 7. BATCH REPORTING   \n\n# 7.1. GETBATCHDETAIL \nThis web service retrieves details about the batch based on a batch number.\n\n## Request\nGetBatchDetail(UserName, Password, BatchNumber, SettleDate, PaymentType, ExtData)\n\n## Request Example\n```\nvar svc = new BatchInfoService.BatchInfoSoapClient(\"BatchInfoSoap\");\nvar result = svc.GetBatchDetail(\"username\", \"password\", \"0\", \"4/24/2017\", \"Credit\", \"\");\n```\n\n## Response\nResponse example\n\n```\n<Response>\n<Result>0</Result>\n<RespMSG>Batch Detail Retrieved</RespMSG>\n<Message>  </Message>\n<Message1>  </Message1>\n<Message2>  </Message2>\n<AuthCode>  </AuthCode>\n<PNRef>  </PNRef>\n<HostCode>  </HostCode>\n<HostURL>  </HostURL>\n<ReceiptURL>  </ReceiptURL>\n<GetAVSResult>  </GetAVSResult>\n<GetAVSResultTXT>  </GetAVSResultTXT>\n<GetStreetMatchTXT>  </GetStreetMatchTXT>\n<GetZipMatchTXT>  </GetZipMatchTXT>\n<GetCVResult>  </GetCVResult>\n<GetCVResultTXT>  </GetCVResultTXT>\n<GetGetOrigResult>  </GetGetOrigResult>\n<GetCommercialCard>  </GetCommercialCard>\n<WorkingKey>  </WorkingKey>\n<KeyPointer>  </KeyPointer>\n<ExtData>\n  <BatchDetail>\n    <PNRef>15276</PNRef>\n  </BatchDetail>\n</ExtData>\n<AuthorizedAmount>  </AuthorizedAmount>\n<Balance>  </Balance>\n```\n\n## View [GetBatch Response Fields.](#section/GetBatch-Response-Fields) \n\n\n## GetBatchDetail Input Fields\nUnless noted otherwise, the parameter is required.\n\n| Parameter Name| Description \n|-----|-----\n|UserName (string) | User name assigned in the payment server. The user must have appropirate security permissions in order for the system to return transaction records.\n|Password (string) | Password for the user name assigned in the payment server.\n|BatchNumber (string) | Current batch number for transactions, settlement, and batch inquiries.\n|SettleDate (string) | The date of settlement.\n|PaymentType (string) | The payment type identifies the payment venue. If one or more payment types are provided, only transactions with matching PaymentType will be included in the results; all other Payment Type values will be excluded.\n| | Valid entries are:\n| | - ‘ACH’ – Automated Clearing House\n| | - ‘ECHECK’ – Electronic check\n| | - ‘GUARANTEE’ – Guarantee check\n| | - ‘PAYRECEIPT’ – receipt images uploaded to the server\n| | - ‘SETTLE’ – transactions that have been finalized with the payment host\n| | - ‘VERIFY’ – Pre-authorized checks\n| |Note: The default value for this field is “ALL”. If no value is set, all payment types will be returned in the result set.\n| |Or any permutation of the above values, e.g. “’ACH’,’ECHECK’” will pull all transactions with either ACH or ECHECK payment types.\n|ExtData (string, optional) | The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n| |Extended data in XML format. Valid values are:\n| |- <Timezone>Timezone</Timezone> – Used to convert the input and output (where applicable) date/time values to the desired timezone. When specified, the same timezone is used to convert the begin/end date parameters as well as the Date and Last Update output values. This field is optional, and if omitted all date/time values are treated as UTC.  Daylight savings time adjustments, where applicable, are handled automatically.  Accepted values are:\n| |- AKST – Alaskan Standard Time\n| |- CST – Central Standard Time\n| |- EST – Eastern Standard Time\n| |- HST – Hawaiian Standard Time\n| |- MST – Mountain Standard Time\n| |- AZMST – Arizona\n| |- PST – Pacific Standard Time\n\n# 7.2. GETBATCHNUMBERS  \nThis web service retrieves all the batch numbers between start and end dates based on a payment type.\n\n\n## Request\nGetBatchNumbers(UserName, Password, StartDate, EndDate, PaymentType, ExtData)\n\n\n## Request Example\n```\nvar svc = new BatchInfoService.BatchInfoSoapClient(\"BatchInfoSoap\");\nvar result = svc.GetBatchNumbers(\"username\", \"password\", \"4/24/2015\", \"5/1/2017\",\"Credit\", \"\");\n```\n\n## Response\nResponse example\n\n```\n<Response>\n  <Result>0</Result>\n  <RespMSG>Batch Numbers Retrieved</RespMSG>\n  <Message>  </Message>\n  <Message1>  </Message1>\n  <Message2>  </Message2>\n  <AuthCode>  </AuthCode>\n  <PNRef>  </PNRef>\n  <HostCode>  </HostCode>\n  <HostURL>  </HostURL>\n  <ReceiptURL>  </ReceiptURL>\n  <GetAVSResult>  </GetAVSResult>\n  <GetAVSResultTXT>  </GetAVSResultTXT>\n  <GetStreetMatchTXT>  </GetStreetMatchTXT>\n  <GetZipMatchTXT>  </GetZipMatchTXT>\n  <GetCVResult>  </GetCVResult>\n  <GetCVResultTXT>  </GetCVResultTXT>\n  <GetGetOrigResult>  </GetGetOrigResult>\n  <GetCommercialCard>  </GetCommercialCard>\n  <WorkingKey>  </WorkingKey>\n  <KeyPointer>  </KeyPointer>\n  <ExtData>\n    <BatchNumbers>\n      <BatchNumber>0</BatchNumber>\n    </BatchNumbers>\n  </ExtData>\n  <AuthorizedAmount>  </AuthorizedAmount>\n  <Balance>  </Balance>\n</Response>\n```\n## View [GetBatch Response Fields.](#section/GetBatch-Response-Fields) \n\n\n## GetBatchNumbers Input Fields \nUnless noted otherwise, the parameter is required.\n\n| Parameter Name| Description \n|-----|-----\n|UserName (string) | User name assigned in the payment server. The user must have appropirate security permissions in order for the system to return transaction records.\n|Password (string) | Password for the user name assigned in the payment server.\n|EndDate (string) | Last date to end the search.\n|PaymentType (string) | The payment type identifies the payment venue. If one or more payment types are provided, only transactions with matching PaymentType will be included in the results; all other Payment Type values will be excluded.\n| | Valid entries are:\n| | - ‘ACH’ – Automated Clearing House\n| | - ‘ECHECK’ – Electronic check\n| | - ‘GUARANTEE’ – Guarantee check\n| | - ‘PAYRECEIPT’ – receipt images uploaded to the server\n| | - ‘SETTLE’ – transactions that have been finalized with the payment host\n| | - ‘VERIFY’ – Pre-authorized checks\n| |Note: The default value for this field is “ALL”. If no value is set, all payment types will be returned in the result set.\n| |Or any permutation of the above values, e.g. “’ACH’,’ECHECK’” will pull all transactions with either ACH or ECHECK payment types.\n|ExtData (string, optional) | The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n| |Extended data in XML format. Valid values are:\n| |- <Timezone>Timezone</Timezone> – Used to convert the input and output (where applicable) date/time values to the desired timezone. When specified, the same timezone is used to convert the begin/end date parameters as well as the Date and Last Update output values. This field is optional, and if omitted all date/time values are treated as UTC.  Daylight savings time adjustments, where applicable, are handled automatically.  Accepted values are:\n| |- AKST – Alaskan Standard Time\n| |- CST – Central Standard Time\n| |- EST – Eastern Standard Time\n| |- HST – Hawaiian Standard Time\n| |- MST – Mountain Standard Time\n| |- AZMST – Arizona\n| |- PST – Pacific Standard Time\n\n# 7.3. GETBATCHSTATUS  \nThe web service retrieves the status of a batch based on a batch number and payment type.\n\n\n## Request\nGetBatchStatus(UserName, Password, BatchNumber, SettleDate, PaymentType, ExtData)\n\n\n## Request Example\n```\nvar svc = new BatchInfoService.BatchInfoSoapClient(\"BatchInfoSoap\");\nvar result = svc.GetBatchStatus(\"username\", \"password\", \"0\", \"4/24/2017\", \"Credit\", \"\");\n```\n\n## Response\n## Response example\n\n```\n<Response>\n  <Result>0</Result>\n  <RespMSG>Batch Status Retrieved</RespMSG>\n  <Message>  </Message>\n  <Message1>  </Message1>\n  <Message2>  </Message2>\n  <AuthCode>  </AuthCode>\n  <PNRef>  </PNRef>\n  <HostCode>  </HostCode>\n  <HostURL>  </HostURL>\n  <ReceiptURL>  </ReceiptURL>\n  <GetAVSResult>  </GetAVSResult>\n  <GetAVSResultTXT>  </GetAVSResultTXT>\n  <GetStreetMatchTXT>  </GetStreetMatchTXT>\n  <GetZipMatchTXT>  </GetZipMatchTXT>\n  <GetCVResult>  </GetCVResult>\n  <GetCVResultTXT>  </GetCVResultTXT>\n  <GetGetOrigResult>  </GetGetOrigResult>\n  <GetCommercialCard>  </GetCommercialCard>\n  <WorkingKey>  </WorkingKey>\n  <KeyPointer>  </KeyPointer>\n  <ExtData>\n    <BatchStatus>\n      <Message>Settled</Message>\n      <Response>DEMO851</Response>\n    </BatchStatus>\n  </ExtData>\n  <AuthorizedAmount>  </AuthorizedAmount>\n  <Balance>  </Balance>\n</Response>\n```\n## View [GetBatch Response Fields.](#section/GetBatch-Response-Fields) \n\n\n## GetBatchStatus  Input Fields\nUnless noted otherwise, the parameter is required.\n\n| Parameter Name| Description \n|-----|-----\n|UserName (string) | User name assigned in the payment server. The user must have appropirate security permissions in order for the system to return transaction records.\n|Password (string) | Password for the user name assigned in the payment server.\n|BatchNumber (string) | Current batch number for transactions, settlement, and batch inquiries.\n|SettleDate (string) |The date of settlement.\n|PaymentType (string) | The payment type identifies the payment venue. If one or more payment types are provided, only transactions with matching PaymentType will be included in the results; all other Payment Type values will be excluded.\n| | Valid entries are:\n| | - ‘ACH’ – Automated Clearing House\n| | - ‘ECHECK’ – Electronic check\n| | - ‘GUARANTEE’ – Guarantee check\n| | - ‘PAYRECEIPT’ – receipt images uploaded to the server\n| | - ‘SETTLE’ – transactions that have been finalized with the payment host\n| | - ‘VERIFY’ – Pre-authorized checks\n| |Note: The default value for this field is “ALL”. If no value is set, all payment types will be returned in the result set.\n| |Or any permutation of the above values, e.g. “’ACH’,’ECHECK’” will pull all transactions with either ACH or ECHECK payment types.\n|ExtData (string, optional) | The ExtData parameter allows you to pass additional information to the web service that is not covered under the input parameters. ExtData values need not be placed in any particular order; however, they must be properly formatted using XML tags.\n| |Extended data in XML format. Valid values are:\n| |- <Timezone>Timezone</Timezone> – Used to convert the input and output (where applicable) date/time values to the desired timezone. When specified, the same timezone is used to convert the begin/end date parameters as well as the Date and Last Update output values. This field is optional, and if omitted all date/time values are treated as UTC.  Daylight savings time adjustments, where applicable, are handled automatically.  Accepted values are:\n| |- AKST – Alaskan Standard Time\n| |- CST – Central Standard Time\n| |- EST – Eastern Standard Time\n| |- HST – Hawaiian Standard Time\n| |- MST – Mountain Standard Time\n| |- AZMST – Arizona\n| |- PST – Pacific Standard Time\n\n# 7.4. GETBATCH RESPONSE FIELDS    \nThe following response fields may be part of the return value for web services using Get Batch operations. These web services include:\n\n- GetBatchDetail\n- GetBatchNumbers\n- GetBatchStatus\n\n## GetBatch Response Fields\n\n| Parameter Name| Description \n|-----|-----\n|AuthorizedAmount   (string)  |\n|Balance    (string)  |\n|Result    integer  |\n|RespMSG    (string)  |\n|Message    (string)|  \n|Message1    (string)  |\n|Message2    (string)|  \n|AuthCode    (string)|  \n|PNRef    (string)  |\n|HostCode    (string)  |\n|HostURL    (string)  |\n|ReceiptURL     (string)  |\n|GetAVSResult     (string)  |\n|GetAVSResultTXT     (string)|  \n|GetStreetMatchTXT    (string)|  \n|GetZipMatchTxt     (string)  |\n|GetCVResult     (string)  |\n|GetCVResultTXT     (string)  |\n|GetGetOrigResult     (string)  |\n|GetCommercialCard     (string)  |\n|WorkingKey     (string)|  \n|KeyPointer     (string)|  \n|ExtData    (string)  |\n\n# 8. CUSTOM FIELDS   \n\n# 8.1. ADDCUSTOMFIELD  \nThis web service allows an integrator to add custom fields programmatically to a gateway account. The data in these fields is not passed to the processor.\n\nSee Developer’s Notes for information about [Adding Custom Fields.](#section/addcus) \n\n## Request\nAddCustomField(UserName, Password, RPNum, FieldName, IsNumeric, DecimalPlaces, MaxLength, RegEx, IsRequired, Description, MinValue, MaxValue, DisplayOnReceipt)\n\n\n## Request Example\n```\nCustomFieldsSoapClient custom =\n    new CustomFieldsSoapClient(\"CustomFieldsSoap\");\n\ncustomResponse = custom.AddCustomField(\"username\", \"password\",\n            \"5\", \"CocoaPebbles\", false, \"\", \"10\", \"\", false,\n            \"Barney's treat\", \"\", \"\", true, \"All out\");\n```\n\n## Response\nResponse example\n\n```\nRespMSG  \"Field added successfully.\"  string\nResult  0  int\n```\n## View [ AddCustomField Response Fields.](#section/addcustomfield-response-fields) \n\n\n## AddCustomField  Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|UserName | User name assigned in the payment server. The user must have the appropriate security permissions in order for the system to return transaction records.\n|Password | Password for the user name assigned in the payment server.\n|RPNum | Unique value assigned to each gateway account used as a third credential to ensure security.\n| |Note: RPNum may also be called Merchant ID, Merchant Number, or Vendor Key.\n|FieldName | The name of the field. This value must be unique and will be used to programmatically access the field when passing additional data using the ProcessCreditCard web service.\n|IsNumeric  Optional |This is a boolean parameter. It is only necessary to pass in a value if the integrator wishes to allow only numeric data to be passed as input values.\n|DecimalPlaces | Integer value indicating the number of decimal places the integrator wishes this field to contain. For accurate storage of the value “2.79” the integrator would want to pass in a value of ‘2’. For accurate storage of the value “2.99999” the integrator would want to pass in a value of ‘5’.\n|Optional | Leave this field ‘Null’ if not keeping track of numeric values\n|MaxLength  Optional| Maximum string length allowed in the field being added. Default value is ‘25’.\n|RegEx Optional| Enter any regular expressions needed to validate that the values being submitted to this field conform to a specific data type and/or format.\n|Description | This is the human readable description that will display in the virtual terminal and on the cardholder receipt.\n|MinValue | Minimum numeric value\n|Optional |\n|MaxValue | Maximum numeric value\n|Optional |\n|DisplayOnReceipt | This is a boolean parameter. Indicates whether or not the field will display on the cardholder receipt.\n|Optional |\n\n# 8.2. GETCUSTOMFIELDS   \nThe GetCustomFields web service allows an integrator to retrieve the custom fields that have been programmatically added to a gateway account. The response contains an XML definition of the field, type, etc.\n\n\n## Request\n\n```\nCustomFieldsSoapClient custom =\nnew CustomFieldsSoapClient(\"CustomFieldsSoap\");\n\ncustomResponse = custom.GetCustomFields(\"username\", \"password\", \"5\");\n```\n\n## Response\nThe response to this call is contained as an XML string within the ExtData field.\n\nResponse example\n\n```\n<NewDataSet>\n    <xs:schema id=\"NewDataSet\" xmlns=\"\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\">\n    <xs:element name=\"NewDataSet\" msdata:IsDataSet=\"true\" msdata:MainDataTable=\"CustomFields\" msdata:UseCurrentLocale=\"true\">\n    <xs:complexType>\n    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n    <xs:element name=\"CustomFields\">\n    <xs:complexType>\n        <xs:sequence>\n            <xs:element name=\"Custom_Field_Key\" type=\"xs:int\" minOccurs=\"0\"/>\n            <xs:element name=\"Custom_Field_Name\" type=\"xs:string\" minOccurs=\"0\"/>\n            <xs:element name=\"Merchant_Key\" type=\"xs:int\" minOccurs=\"0\"/>\n            <xs:element name=\"IsNumeric\" type=\"xs:boolean\" minOccurs=\"0\"/>\n            <xs:element name=\"DecimalPlaces\" type=\"xs:int\" minOccurs=\"0\"/>\n            <xs:element name=\"MaxLength\" type=\"xs:int\" minOccurs=\"0\"/>\n            <xs:element name=\"RegEx\" type=\"xs:string\" minOccurs=\"0\"/>\n            <xs:element name=\"IsRequired\" type=\"xs:boolean\" minOccurs=\"0\"/>\n            <xs:element name=\"Status\" type=\"xs:int\" minOccurs=\"0\"/>\n            <xs:element name=\"Description\" type=\"xs:string\" minOccurs=\"0\"/>\n            <xs:element name=\"ErrorMessage\" type=\"xs:string\" minOccurs=\"0\"/>\n            <xs:element name=\"MinValue\" type=\"xs:double\" minOccurs=\"0\"/>\n            <xs:element name=\"MaxValue\" type=\"xs:double\" minOccurs=\"0\"/>\n            <xs:element name=\"Position\" type=\"xs:int\" minOccurs=\"0\"/>\n            <xs:element name=\"DisplayOnVTReceipt\" type=\"xs:boolean\" minOccurs=\"0\"/>\n            <xs:element name=\"DisplayinTrxReports\" type=\"xs:boolean\" minOccurs=\"0\"/>\n            <xs:element name=\"DisplayOnHostedPage\" type=\"xs:boolean\" minOccurs=\"0\"/>\n            <xs:element name=\"ReadOnlyOnHostedPage\" type=\"xs:boolean\" minOccurs=\"0\"/>\n            <xs:element name=\"VisibleOnHostedPage\" type=\"xs:boolean\" minOccurs=\"0\"/>\n        </xs:sequence>\n    </xs:complexType>\n    </xs:element>\n    </xs:choice>\n    </xs:complexType>\n    </xs:element>\n</xs:schema>\n<CustomFields>\n    <Custom_Field_Key>2</Custom_Field_Key>\n    <Custom_Field_Name>FruityPebbles</Custom_Field_Name>\n    <Merchant_Key>5</Merchant_Key>\n    <IsNumeric>true</IsNumeric>\n    <DecimalPlaces>0</DecimalPlaces>\n    <MaxLength>25</MaxLength>\n    <RegEx />\n    <IsRequired>false</IsRequired>\n    <Status>1</Status>\n    <Description>The number of Fruity Pebbles</Description>\n    <ErrorMessage>Bad Fruity Pebbles.</ErrorMessage>\n    <MinValue>0</MinValue>\n    <MaxValue>42</MaxValue>\n    <Position>1</Position>\n    <DisplayOnVTReceipt>true</DisplayOnVTReceipt>\n    <DisplayOnHostedPage>false</DisplayOnHostedPage>\n    <ReadOnlyOnHostedPage>false</ReadOnlyOnHostedPage>\n    <VisibleOnHostedPage>false</VisibleOnHostedPage>\n</CustomFields>\n<CustomFields>\n    <Custom_Field_Key>3</Custom_Field_Key>\n    <Custom_Field_Name>CocoPebbles</Custom_Field_Name>\n    <Merchant_Key>5</Merchant_Key>\n    <IsNumeric>false</IsNumeric>\n    <DecimalPlaces>0</DecimalPlaces>\n    <MaxLength>10</MaxLength>\n    <RegEx />\n    <IsRequired>false</IsRequired>\n    <Status>1</Status>\n    <Description>Barney's treat</Description>\n    <ErrorMessage>All out</ErrorMessage>\n    <MinValue>0</MinValue>\n    <MaxValue>0</MaxValue>\n    <Position>2</Position>\n    <DisplayOnVTReceipt>true</DisplayOnVTReceipt>\n</CustomFields>\n</NewDataSet>\"\n```\n## View [ AddCustomField Response Fields.](#section/addcustomfield-response-fields) \n\n\n## GetCustomFields Input Parameters\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n|UserName| User name assigned in the payment server. The user must have the appropriate security permissions in order for the system to return transaction records.\n|Password| Password for the user name assigned in the payment server.\n|RPNum| Unique value assigned to each gateway account used as a third credential to ensure security.\n||Note: RPNum may also be called Merchant ID, Merchant Number, or Vendor Key.\n\n# 8.3. AddCustomField Response Fields \nThe following response fields may be part of the return value for web services using Add Custom Field operations. These web services include:\n\n- AddCustomField\n\n- GetCustomFields\n\n|Response Field |  Data Value\n|-----|-----\n|Result  |   Integer\n|RespMSG |   String\n|Message |   String\n|Message1 |    String\n|Message2 |   String\n|AuthCode |   String\n|PNRef |   String\n|HostCode |   String\n|HostURL   | String\n|ReceiptURL |   String\n|GetAVSResults |   String\n|GetAVSResultsTXT |   String\n|GetStreetMatchTXT |   String\n|GetZipMatchTXT |   String\n|GetCVResult |   String\n|GetGetOrigResult |   String\n|GetCommercialCard |   String\n|WorkingKey |   String\n|KeyPointer |   String\n|ExtData |   String\n\n# 9. Developer Notes \n## Invalid Character Processing\n\n  Some parameters and XML tags contain data that will automatically remove invalid characters from the user-entered data. These parameters and tags include:\n\n  - MagData\n  - NameOnCard\n  - DL\n  - SS\n  - DOB\n  - InvNum\n  - Zip\n  - Street\n  - StateCode\n  - RegisterNum\n  - ExtData: <CustCode>\n  - Extdata: <RegisterNum>\n  - ExtData: <City>\n  - ExtData: <BillToState>\n  - ExtData: <PONum>\n  - ExtDate: <Phone>\n  - ExtData: <Email>\n  - ExtData: <City of Account>\n  - ExtData: <BillToStreet>\n  - ExtData: <BillToPostalCode>\n  - ExtData: <BillToCountry>\n  - ExtData: <CustomerID>\n\n## Reversal Transactions \n## Credit Card Reversals\n\nReversal is supported for Visa and MasterCard transactions made within the direct marketing and ecommerce industries. Reversals must be processed within 24 hours of the original credit card transaction.\n\n## Debit Card Reversals\nAll reversals must be processed as card-present transactions.\n\nReversal is supported for supported issuers for all debit card issuers. The supported industries are only retail and restaurant. Reversals must be processed within 2 hours of the original debit card transaction.\n\nTIP: Requires the debit card number and expiration date along with the original sale PNREF number to process reversals.\n\n## PIN-less Debit Transactions\n\nIn some cases, debit transactions can be processed without the customer’s entering a PIN number (a “PIN-less” debit transaction). Essentially, the same information is sent as in a typical PIN-based debit transaction, with the exception of the encrypted PIN-block and key serial number. This transaction type is currently only available with BuyPass and Global Payments processors.\n\nIf the designated processor is BuyPass or Global, the transaction will be accepted either with both the PIN-block and key serial number (interpreted as a PIN-based debit transaction) or accepted with neither piece of data (interpreted as a PIN-less debit transaction).\n\nIf the above requirements are met for a transaction, PIN-less debit transactions will be allowed through the Payment Server. However, when working with BuyPass, additional setup is required to ensure that the transaction is accepted by the processor:\n\n- **Application ID Setup** – To process PIN-less debit through BuyPass, the application ID sent must identify the application in use. Contact your administrator for additional details.\n\n## Register Number and Terminal ID Setup\n\nWhen processing transactions with BuyPass, the Payment Server will attempt to match the RegisterNum passed from the client-side with the register number set up in the merchant account.  Once it has made the match, it will send the corresponding terminal ID assigned to that register number to BuyPass. When no terminal ID is sent to BuyPass, the default value is sent (usually terminal ID “01”).\n\nIf you are also doing VRU (phone-originated) transactions, a separate terminal ID must be set up in the registers on the merchant account and submitted in your request through the web service.\n\nIf the merchant will be doing both internet and VRU transactions at the same time, the terminal ID value will be required to differentiate between the two. For example, you may set up “01” for Internet and “02” for VRU. The request sent through the ProcessDebitCard operation must then send the appropriate register number to reflect the appropriate transaction type.\n\n## Fuel Purchases: Debit Card Use\n\nDebit card processing for fuel purchases is now available through BuyPass only.  This functionality allows for fuel purchases with standard debit cards (Visa, MasterCard, etc.).  Debit fuel purchases (TransTypes Sale and Force) require item-level purchase information.  If all the required information for a certain purchase is not provided, the transaction will be rejected and an error message generated.  The main implication for the developer is that additional data must be passed to the gateway in order for fuel purchases to process correctly.\n\nItem-level debit fuel purchase information is passed inside the <Items> tag in ExtData.  Fuel purchases are differentiated at the gateway from other purchases by the Fuel designation placed within the <Category> tag in item. In effect, a transaction will only be treated as a fuel transaction if at least one of the items within <Items> is designated as category Fuel.\n\n## Date Formats\n\n  Dates entered through input parameters are automatically formatted to YYYY-MM-DDThh:mm:ss (time is in 24-hour format using Coordinated Universal Time (UTC). Valid entry formats are:\n\n  - MM/DD/YYYY\n  - YYYY-MM-DD\n  - YYYY-MM-DDThh:mm:ss\n  \n  ## Date Query String\n  The query string used to obtain transactions in a date range is constructed as follows:\n  \n  (Date DT >=BeginDt) AND (Date DT <EndDt)\n  \n  *Date DT is the transaction timestamp.\n  \n  ## Parameters Accepting Multiple Values\n  \n  Some parameters (for example, PaymentType and TransType) will accept multiple values and return results using an either/or filter. When inputting multiple parameter values, use the following format:\n\n  ’VALUE1’,’VALUE2’,’VALUE3’\n  \n  Important: When entering any values in parameters accepting multiple entries, the values must be enclosed in single quotes (‘  ‘) to be accepted.  Values are not case sensitive.\n  \n  For example, the following values entered in the PaymentType parameter would return results with either the PayReceipt or Settle payment types:\n  \n  ’PAYRECEIPT’,’SETTLE’\n  \n  ## Compression and Encoding\n  \n  It is possible to send a receipt image file through the ProcessSignature web service operation from a client-side application in order to associate it with a transaction.  Due to the overall complexity of creating a receipt image with ProcessSignature, here is a general list of steps your client-side application must perform in order to send images to the payment server.\n  \n1. Get image file from hardware device, etc. and convert image to TIFF image format, if it isn’t already in that format.\n\n2. Perform an LZW compression on the image data to reduce the file size (the payment server will only accept image data up to 25KB).\n\n  Note: LZW compression decompresses and decompresses without information loss, achieving compression ratios up to 5:1. It may be somewhat slower to compress and decompress than the PackBits scheme.\n\n3. Compress the file itself with Zip compression to reduce the file size. Any PKZip-compatible Zip compressor and decompressor will work.\n\n  Note: IPWorks (www.ipworks.com) is a third-party provider of software tools and they have a product called “IPWorks! Zip” that can simplify the programmatic compression.\n\n4. Base64 encode the image. This ensures that the binary-based information transported can be converted properly into text-based characters to send in the SignatureData parameter of ProcessSignature\n\n5. Input the compressed/base64 encoded image data into the SignatureData parameter of ProcessSignature, and send it to the Payment Server.\n\n## Recurring Billing Web Services\n\nIt is very important to understand that the Recurring Billing Web Service is used for storing data, and is not for querying previously stored data. It is the responsibility of the integrator to store and maintain all returned ‘info Keys’ for later use.\n\n## ManageCustomer\n\n- When calling this service with the Transtype value of ‘UPDATE” it is also important to note that any values that are left “NULL’ will overwrite existing data with a ‘NULL’ value.\n\n## ManageCreditCardInfo\n\n- This service returns a CCInfoKey value which takes the place of the cardholder data with which it is associated. It is the responsibility of the integrator to keep track of and store these keys.\n- An unlimited number of credit card profiles can be stored for any given customer.\n\n## ManageCheckInfo\n\n- The service returns a CheckInfoKey value which takes the place of the checking account data with which it is associated. It is the responsibility of the integrator to keep track of and store these keys.\n- An unlimited number of checking account profiles can be stored for any given customer.\n\n## ManageContract\n\n- When calling this service with a TransType value of ‘UPDATE’ it is also important to note that any values that are left ‘NULL’ will overwrite existing data with a ‘NULL’ value.\n- If the desired effect is to simply update the net bill date, call ManageContractAddDaysToNextBillDt.\n\n## ManageContractAddDaysToNextBillDt\n\n- Call this service in place of ManageContract if the NextBillDate is the only value being updated to minimize the possibility of overwriting data.\n\n## Card Safe Web Services\nThis service is used to add a stored payment method to an existing customer record. Calling this service is the first step towards successfully storing and initiating recurring payments.\n\n## StoreCard\n\n- It is very important to understand that this web service is used for storing payment methods, and is not for querying previously stored data. It is the responsibility of the integrator to store and maintain all returned ‘Info Keys’ for later use.\n- It should also be noted that all information stored via the CardSafe will be accessible through the Recurring web services and vice versa.\n\n## ProcessCreditCard\n\n- See Recurring Billing Web Services for more information on Credit Card Data Storage.\n\n## Adding Custom Fields\n\nTo pass in custom field data to any transactional web service, please observe the following field format:\n\n*The following example assumes that the integrator has stored 2 custom fields, one named ‘SampleFieldName1’ and the other named ‘SampleFieldName2’\n\n<CustomFields>\n<SampleFieldName1>Sample String Data</SampleFieldName1>\n<SampleFieldName2>8675309</SampleFieldName2>\n</CustomFields>\n\nAll data passed through the custom fields parameters will be returned in the GetCardTrx web service call following the same format.\n\nIn order for the data to be passed in correctly, the FieldName must reflect EXACTLY the field name of the custom field as it was added via the AddCustomField web service (see the Reporting Web Services portion of the API for additional information) or the Custom Fields menu in the virtual terminal.\n\nThe < /CustomFields> tag must be passed in the ExtData field of the web service you are consuming. The </CustomFields> tag must contain no spaces, and must conform to XML standards.\n\nAdding a custom field creates a new column in the Transaction Reports grid and any data passed into this field by an integrator or in the virtual terminal will be stored in that column and accessible through the GetCardTrx web service.\n\n# 9.1. Implementation Examples \n\nThe following examples (cURL, PHP, Node.js, and Ruby) can be used when you are not using a SOAP based, .NET service. The examples show similar ways of doing the same thing in each environment. Note that we also have a postman collection that can quickly bring you up to speed for basic transaction processing using our easy HTTP GET/POST wrapper for our SOAP API as well as REST APIs. Once you open the link below look for the “IBX Beginner Collection”.\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://www.getpostman.com/run-collection/dd06f5a44925cb0e1b3a)        \n\n## CURL\nHow to execute the call:\n\n```\ncurl \"https://sandbox.ibxpays.com/paygate/ws/trxdetail.asmx/GetCardTrxSummary?UserName=username&Password=password&RPNum=5&BeginDt=7/11/2016&EndDt=7/11/2016&ApprovalCode=&Register=2&NameOnCard=&CardNum=&CardType=&ExcludeVoid=true&User=&invoiceId=&SettleFlag=&SettleMsg=&SettleDt=&TransformType=&Xsl=&ColDelim=&RowDelim=&IncludeHeader=true&ExtData=\" | sed -e \"s/&gt;/>/g\" | sed -e \"s/&lt;/</g\"\n```\n\nSample Results:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<string xmlns=\"https://gw-v1.ibxpays.com/vt/ws\"><CardTrxSummary>\n<PaymentMethod>\n<Payment_Type_ID>VISA      </Payment_Type_ID>\n<Authorization>0.0000</Authorization>\n<Capture>0.0000</Capture>\n<ForceCapture>0.0000</ForceCapture>\n<PostAuth>0.0000</PostAuth>\n<Return>0.0000</Return>\n<Sale>11564.0000</Sale>\n<Receipt>0.0000</Receipt>\n<RepeatSale>0.0000</RepeatSale>\n<Activate>0.0000</Activate>\n<Deactivate>0.0000</Deactivate>\n<Reload>0.0000</Reload>\n<Authorization_Cnt>0</Authorization_Cnt>\n<Capture_Cnt>0</Capture_Cnt>\n<ForceCapture_Cnt>0</ForceCapture_Cnt>\n<PostAuth_Cnt>0</PostAuth_Cnt>\n<Return_Cnt>0</Return_Cnt>\n<Sale_Cnt>3</Sale_Cnt>\n<Receipt_Cnt>0</Receipt_Cnt>\n<RepeatSale_Cnt>0</RepeatSale_Cnt>\n<Activate_Cnt>0</Activate_Cnt>\n<Deactivate_Cnt>0</Deactivate_Cnt>\n<Reload_Cnt>0</Reload_Cnt>\n<Cnt>3</Cnt>\n</PaymentMethod>\n```\n\n## PHP\nPHP w/SOAP:\n\n```\n<?php\n\n$client = new SoapClient(\"https://sandbox.ibxpays.com/vt/ws/trxdetail.asmx?wsdl\");\n\n// We use SSL accelerator so make sure the right url is set manually if you find you're hitting non-secure site which isn't listening\n// $client->__setLocation(\"https://sandbox.ibxpays.com/vt/ws/trxdetail.asmx\");\n\n$params = array(\n 'UserName' => \"username\",\n 'Password' => \"password\",\n 'RPNum' => \"5\",\n 'BeginDt' => \"7/11/2016\",\n 'EndDt' => \"7/11/2016\",\n 'ApprovalCode' => \"\",\n 'Register' => \"\",\n 'NameOnCard' => \"\",\n 'CardNum' => \"\",\n 'CardType' => \"\",\n 'ExcludeVoid' => \"true\",\n 'User' => \"\",\n 'SettleFlag' => \"\",\n 'SettleMsg' => \"\",\n 'SettleDt' => \"\",\n 'TransformType' => \"\",\n 'Xsl' => \"\",\n 'ColDelim' => \"\",\n 'RowDelim' => \"\",\n 'IncludeHeader' => \"true\",\n 'ExtData' => \"\"\n);\n\n$response = $client->GetCardTrxSummary($params);\n\n$xml = new SimpleXmlElement($response->GetCardTrxSummaryResult);\nprint(\"Count: \");\n// Have to cast to get underlying element as a object you want\nprint_r((int)$xml->PaymentMethod->Cnt);\nprint (\"\\n\");\n\n// How to iterate through them all\n// See: http://php.net/manual/en/class.simplexmlelement.php for more\nforeach ($xml->PaymentMethod->children() as $node) {\n        print (\"node=\".$node->getName());     // get the name of this element\n        print (\"  value=\".$node);             // get the value of this element\n        // $arr = $node->attributes();        // returns an array if we needed attrbutes\n        // print (\"attribute=\".$arr[\"ID\"]);   // get the value of this attribute\n        print (\"\\n\");\n}\n\n//echo $xml->asXML();\n?>\n```\n\nPHP w/cURL:\n```\n<?php\n\n$url = \"https://sandbox.ibxpays.com/vt/ws/trxdetail.asmx/GetCardTrxSummary\";\n\n$handle = curl_init($url);\n\ncurl_setopt($handle, CURLOPT_POST, 1);    \ncurl_setopt($handle, CURLOPT_POSTFIELDS, \"UserName=username&Password=password&RPNum=5&BeginDt=7/11/2016&EndDt=7/11/2016&ApprovalCode=&Register=&NameOnCard=&CardNum=&CardType=&ExcludeVoid=true&User=&SettleFlag=&SettleMsg=&SettleDt=&TransformType=&Xsl=&ColDelim=&RowDelim=&IncludeHeader=true&ExtData=\");\n\ncurl_setopt($handle, CURLOPT_RETURNTRANSFER, true);\n\n$response = curl_exec($handle);\nprint_r($response);\n    $responseCode = curl_getinfo($handle, CURLINFO_HTTP_CODE);\n\n    if($responseCode == 200) {\n\n        $xml = new SimpleXMLElement(new SimpleXMLElement($response));\n\n        // Have to cast to get underlying element as a object you want\n        print(\"Count: \");\n        print_r((int)$xml->PaymentMethod->Cnt);\n        print (\"\\n\");\n\n        // How to iterate through them all\n        // See: http://php.net/manual/en/class.simplexmlelement.php for more\n        foreach ($xml->PaymentMethod->children() as $node) {\n                print(\"node=\".$node->getName());     // get the name of this element\n                print(\"  value=\".$node);             // get the value of this element\n                // $arr = $node->attributes();        // returns an array if we needed attrbutes\n                // print (\"attribute=\".$arr[\"ID\"]);   // get the value of this attribute\n                print(\"\\n\");\n        }\n    }\n    else {\n        print(\"Error: \" . curl_error($handle));\n        print (\"\\n\");\n    }\n    curl_close($handle);\n?>\n```\n\nHow to execute the code:\n\n```\nphp ibx-example.php\n```\n\nSample Results:\n\n```\nCount: 3\nnode=Payment_Type_ID  value=VISA      \nnode=Authorization  value=0.0000\nnode=Capture  value=0.0000\nnode=ForceCapture  value=0.0000\nnode=PostAuth  value=0.0000\nnode=Return  value=0.0000\nnode=Sale  value=11564.0000\nnode=Receipt  value=0.0000\nnode=RepeatSale  value=0.0000\nnode=Activate  value=0.0000\nnode=Deactivate  value=0.0000\nnode=Reload  value=0.0000\nnode=Authorization_Cnt  value=0\nnode=Capture_Cnt  value=0\nnode=ForceCapture_Cnt  value=0\nnode=PostAuth_Cnt  value=0\nnode=Return_Cnt  value=0\nnode=Sale_Cnt  value=3\nnode=Receipt_Cnt  value=0\nnode=RepeatSale_Cnt  value=0\nnode=Activate_Cnt  value=0\nnode=Deactivate_Cnt  value=0\nnode=Reload_Cnt  value=0\nnode=Cnt  value=3\n```\n\n## Node.js\n\nYou can [try our npm package.](https://www.npmjs.com/package/payroc_ibx) It supports a basic subset of transactions and can be easily modified for additional transactions. Note that if you use RunKit to run the examples it is required to remove the “use strict” command from the example as RunKit doesn’t currently support that.\n\nNode.js w/SOAP:\n\n```\nvar soap = require('soap');\nvar parseString = require('xml2js').parseString;\n\nvar url = 'https://sandbox.ibxpays.com/vt/ws/trxdetail.asmx';\nvar wsdlurl = url + '?wsdl';\n\nvar soap_client_options = {};\n\nvar CardTrxSummaryParameters =   {\n 'UserName': \"username\",\n 'Password': \"password\",\n 'RPNum': \"5\",\n 'BeginDt': \"7/11/2016\",\n 'EndDt': \"7/11/2016\",\n 'ApprovalCode': \"\",\n 'Register': \"\",\n 'NameOnCard': \"\",\n 'CardNum': \"\",\n 'CardType': \"\",\n 'ExcludeVoid': \"true\",\n 'User': \"\",\n 'SettleFlag': \"\",\n 'SettleMsg': \"\",\n 'SettleDt': \"\",\n 'TransformType': \"\",\n 'Xsl': \"\",\n 'ColDelim': \"\",\n 'RowDelim': \"\",\n 'IncludeHeader': \"true\",\n 'ExtData': \"\"\n}\n\n// Give the createClient Method the WSDL as the first argument   \nsoap.createClient(wsdlurl, soap_client_options, function(err, client){\n    // We use SSL accelerator so make sure the right url is set manually if you find you're hitting non-secure site which isn't listening\n    // client.setEndpoint(url);\n\n    // The Client now has all the methods of the WSDL. Use it to get cardtrxsummary feeding it the JSON Payload\n    client.GetCardTrxSummary(CardTrxSummaryParameters, function(err, result, body) {\n\n    console.log('Result:');\n    console.log(result);\n    console.log('\\n');\n\n    parseString(result.GetCardTrxSummaryResult, function(err, result){\n  console.log('ParsedResult:');\n  console.log(result);\n        console.log('\\n');\n  console.log('Count is:');\n        console.log(result.CardTrxSummary.PaymentMethod[0].Cnt[0]);\n        console.log('\\n');\n    });\n  });\n});\n```\nHow to execute the code:\n\n```\nnode ibx-example.js\n```\n\nSample Results:\n```\n{ GetCardTrxSummaryResult: '<CardTrxSummary>\\r\\n  <PaymentMethod>\\r\\n    <Payment_Type_ID>VISA      </Payment_Type_ID>\\r\\n    <Authorization>0.0000</Authorization>\\r\\n    <Capture>0.0000</Capture>\\r\\n    <ForceCapture>0.0000</ForceCapture>\\r\\n    <PostAuth>0.0000</PostAuth>\\r\\n    <Return>0.0000</Return>\\r\\n    <Sale>11564.0000</Sale>\\r\\n    <Receipt>0.0000</Receipt>\\r\\n    <RepeatSale>0.0000</RepeatSale>\\r\\n    <Activate>0.0000</Activate>\\r\\n    <Deactivate>0.0000</Deactivate>\\r\\n    <Reload>0.0000</Reload>\\r\\n    <Authorization_Cnt>0</Authorization_Cnt>\\r\\n    <Capture_Cnt>0</Capture_Cnt>\\r\\n    <ForceCapture_Cnt>0</ForceCapture_Cnt>\\r\\n    <PostAuth_Cnt>0</PostAuth_Cnt>\\r\\n    <Return_Cnt>0</Return_Cnt>\\r\\n    <Sale_Cnt>3</Sale_Cnt>\\r\\n    <Receipt_Cnt>0</Receipt_Cnt>\\r\\n    <RepeatSale_Cnt>0</RepeatSale_Cnt>\\r\\n    <Activate_Cnt>0</Activate_Cnt>\\r\\n    <Deactivate_Cnt>0</Deactivate_Cnt>\\r\\n    <Reload_Cnt>0</Reload_Cnt>\\r\\n    <Cnt>3</Cnt>\\r\\n  </PaymentMethod>\\r\\n</CardTrxSummary>' }\n\n  ParsedResult:\n  { CardTrxSummary: { PaymentMethod: [ [Object] ] } }\n  \n  Count is:\n  3\n```\n\n## Ruby\nRuby w/SOAP:\nHow to execute the code:\n\n```\nruby ibx-example.rb\n```\n\nSample Results:\n\n```\n\"[:get_open_batch_summary, :get_card_trx, :get_card_trx_summary, :get_check_trx]\"\n#(Element:0x2ad888d14724 {\n  name = \"CardTrxSummary\",\n  children = [\n    #(Text \"\\n  \"),\n    #(Element:0x2ad888d13bd0 {\n      name = \"PaymentMethod\",\n      children = [\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888d12f8c {\n          name = \"Payment_Type_ID\",\n          children = [ #(Text \"VISA      \")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888d1217c {\n          name = \"Authorization\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888d0d370 {\n          name = \"Capture\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888d0c650 {\n          name = \"ForceCapture\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888d07984 {\n          name = \"PostAuth\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888d06890 {\n          name = \"Return\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888cfb8dc {\n          name = \"Sale\",\n          children = [ #(Text \"11564.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888cfa25c {\n          name = \"Receipt\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888cf9528 {\n          name = \"RepeatSale\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888cf87e0 {\n          name = \"Activate\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888cf7a48 {\n          name = \"Deactivate\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888cf6c9c {\n          name = \"Reload\",\n          children = [ #(Text \"0.0000\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888cf7994 {\n          name = \"Authorization_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b3e5bc {\n          name = \"Capture_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b2b78c {\n          name = \"ForceCapture_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b2781c {\n          name = \"PostAuth_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b26750 {\n          name = \"Return_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b25620 {\n          name = \"Sale_Cnt\",\n          children = [ #(Text \"3\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b246a8 {\n          name = \"Receipt_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b237f8 {\n          name = \"RepeatSale_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b2295c {\n          name = \"Activate_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b1f324 {\n          name = \"Deactivate_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b1e410 {\n          name = \"Reload_Cnt\",\n          children = [ #(Text \"0\")]\n          }),\n        #(Text \"\\n    \"),\n        #(Element:0x2ad888b18f24 { name = \"Cnt\", children = [ #(Text \"3\")] }),\n        #(Text \"\\n  \")]\n      }),\n    #(Text \"\\n\")]\n  })\n\"3\"\n```\n\n## Installation for Examples\n\nThese are the basic steps you will need to install and run the examples on an Ubuntu 16.04 base install.\n\n## For cURL:\n\nThe curl is already installed by default.\n\nCurl command has two piped commands at the end that turn the XML into a non-escaped more readable format. (this bit: | sed -e “s/&gt;/>/g” | sed -e “s/&lt;/</g”)\n\n## For Node.js:\n\nTested with standard Node.js. Installed via:\nsudo apt-get install -y nodejs\n\nAlso need to install the soap and xml packages needed:\nnpm install soap\nnpm install xml2js\n\nNode.js code:\n\n## For PHP:\n\nTested w/nginx web server and standalone. Installed via:\n\nsudo apt-get install php-fpm php-mysql php7.0-fpm php7.0-mysql php7.0-curl php7.0-gd php7.0-json php7.0-mcrypt php7.0-xml\n\n## For Ruby:\n\nTested w/Ruby installed using instructions found here for rbenv (the recommended method): https://gorails.com/setup/ubuntu/16.04. Note this example assumes only the ruby install and doesn’t require MySQL or Rails.\n\nAfter the base install (installing the bundler) run:\n\ngem install savon\n\nwhich at the time of this writing install version 2.11.1.\n\n# 10. Payment Integration \n\n# 10.1. JavaScript Tokenization  \n\n## Introduction\nJavaScript Tokenization enables you to create a form to securely capture your client’s credit card or check on your website without the need to store the data on your system. The JavaScript connects directly with our IBX system, which tokenizes the data and returns a token assigned to the credit card or check on file.\n\nThe JavaScript Tokenization Library (JTL) is a pure JavaScript only library. There are no dependencies on other libraries such as jQuery, Angular, or anything else.\n\nThe purpose of the JTL is to allow you to have more control over your UI display than with a hosted page. You can create and style the forms any way you like while needing to only follow some very simple guidelines. Then you simply insert the JavaScript library to make some simple calls to have the card or check information securely sent to our IBX server. A token representing the payment is sent back to your page and final payment is made when the form – which contains only the tokens – is ultimately submitted.\n\n## Merchant Token\n\nEach merchant has a merchant token created in the gateway that is a publicly presentable piece of information. The merchant token is passed in to the IBX library to identify which merchant provided the card information so a payment token can be created for it. Your merchant token can be found in your Integrity Gateway Merchant account. After you log in to your merchant account, select Preferences > Security. In the example below, you can see the Merchant Token is provided at the top of the Security Settings page. (In the example, the token has been blurred out for security purposes.)\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/merchant-token.png)\n  \n## Simple and Advanced Modes\n\n  The JTL can operate in two modes. The Simple mode, which should be usable by the vast majority of developers,  allows for one merchant token to be passed and a single payment token to be returned.  The Advanced mode provides the ability to get back multiple payment tokens for different merchants with a single capture of credit card or check information. In Advanced mode, there is also the ability to force the value of the charge on the server to match the value of the data being sent for single use tokens. Note that the Advanced mode requires some additional JavaScript coding while the simple mode requires just a single JS call to the JTL.\n\n  In Advanced mode you can call IBX.setMerchantToken and IBX.setAmount which takes as parameters either a single value or an array of values for each element. This allows for charging two different merchants on the back end with only a single capture of credit card information (for example, when you have a merchant that handles insurance or shipping but you also have the original charge for merchandise). The array is ordered and the returned paymentTokens (a different token per merchant) will be returned in the order of the merchantTokens supplied. Similarly the amounts, if enforced, will be in order of merchantToken as well.\n  \n## Design a UI Form\n  \n  Below is an example of a simple form designed to collect payment and customer information. You can design a form customized for your purpose.\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/custom-screen.png)\n  \n## Create a Form\n\nWith a design for your form in mind, you can create the form by entering the input elements. Below is example code for the first four fields (refer to the design example above). Note that the form elements must **not** have a “name” attribute – this is what prevents the data from being submitted back to your server. This is **very** important. **Failure to follow the guideline will put your software into PCI scope** as the fields will be returned to your server.  Note that form elements do have a data-ibx attribute with values that denote what that attribute is. This allows the JTL to identify which form element contains what card information.\n\n```\n<form  id=\"payment\" action=\"/isvendpoint.php\" method=\"POST\">\n <input id=\"cardNumber\" type=text value=\"\" size=\"19\" data-ibx=\"cardNumber\" required autocomplete=\"cc-number\">\n <input id=\"nameOnCard\" type=text value=\"\" size=\"19\" data-ibx=\"nameOnCard\" required autocomplete=\"cc-name\">\n <input id=\"expirationDate\" type=text value=\"\" size=\"5\" data-ibx=\"expirationDate\" required autocomplete=\"cc-exp\">\n <input id=\"cvv\" type=text value=\"\" size=\"5\" data-ibx=\"cvv\" required autocomplete=\"cc-csc\">\n```\n\n## JTL Form Parameters\nThe following is the list of parameters that can be used for the form input elements and passed via the data-ibx attribute.\nNote that these input elements can be of type hidden as well as in the example code below.\n\n```\n<input type=hidden value=\"true\" data-ibx=\"validateCard\">\n <input type=hidden value=\"WhatAnAwesomeToken\" data-ibx=\"merchantToken\">\n```\nYou can also use the JSToken for recurring payments. You simply need to set the hidden value to false as in the example code below.\n\n ```\n <input type=hidden value=\"false\" data-ibx=\"singleUse\">\n```\n\n### Credit Card Parameters\n| Attribute  Name| Description \n|-----|-----\n| cardNumber| The number on the card.\n|nameOnCard | The name on the card.\n|expirationDate |The expiration date on the card in MMYY, MM/YY, MM/YYYY format.\n|cvv | The card verification value. This is typically a three or four digit number on the back of the card.\n|street | The street address for the card owner (required for validateCard).\n|zipcode | The zipcode for the card owner (required for validateCard).\n|amount | The amount the token will be charged (enforced if the merchant level setting to enforce token amounts is true).\n|merchantToken |The publicly shareable merchant token that is used as input to the API to determine which merchant to associate this token with.\n|validateCard | Requests both address verification, cvv check, and an auth be attempted against the card to validate it.\n\n### Check Parameters\n| Attribute  Name| Description \n|-----|-----\n|checkNumber|Uniquely identifies an individual’s check.\n|nameOnCheck|Check owner’s name as it appears on the check.\n|routingNumber|Uniquely identifies the bank holding funds. This is also referred to as transit number.\n|accountNumber|Uniquely identifies the check owner’s bank account.\n|driversLicenseNumber|Check owner’s driver’s license number.\n|driversLicenseState|Check owner’s standard U.S. postal service two-character state code or other standard province code.\n|ssn|Check owner’s Social Security number.\n|checkType|Identifies the type of check.\n| |Valid values are:\n| |PERSONAL - Check is made from an individual (personal) checking account\n| |CORPORATE - Check is made from a business checking account\n| |GOVERNMENT - Check is made from a government checking account\n|amount|The amount the token will be charged (enforced if the merchant level setting to enforce token amounts is true).\n|merchantToken|The publicly shareable merchant token that is used as input to the API to determine which merchant to associate this token with.\n\n## Add JavaScript Library Code to Form\n\nAfter you design and create your form, you insert the JavaScript library reference to the <head> of your HTML page.\n\n```\n<script type=\"text/javascript\"\n src=\"https://sandbox.ibxpays.com/api/v1/js/ibx.min.js\">\n </script>\n```\n\nThis creates an object called IBX that you can reference in your page to create the token and for advanced usage set the merchant tokens and amounts to be used (see below for advanced usage)\n\n## Submit a Form\n\nWhen the form is submitted, a call is made to create a token. The form is scanned for those data-ibx attributes and a callback for when the data returns. After the token is created, the results are posted back to the form. The form can be any type of page that you want to create using any technology. The example we provide to signed developers uses php but you could just as easily choose any other web technology such as aspx, node, ruby, etc.\n\nWhen presenting the user with the ability to submit the created form, you first want to call the IBX.createToken method. Typically, you will want to prevent form submission, call createToken, and then handle the response in a callback writing the token values to your form, and finally submitting that form. For example, a jQuery example might look like the following code (ignoring any error handling and user safeguards like preventing double clicks on submission).\n\n```\nfunction() {\n    var $form = $('#payment')\n    $form.submit(function(event) {\n        IBX.createToken($form, ISVIBXResponseHandler);\n         event.preventDefault();\n    });\n });\n```\nHere we use jQuery to find our payment form and create an event handler that calls createToken via the JTL globally created IBX object and prevent the form from actually being submitted. We pass in the jQuery form (or this can be the default JavaScript DOM form object) and a callback for when the createToken call completes.\n\nThe following is a sample of a response that is returned from a call to createToken, the callback takes a single response argument where the response object has the following format.\n\n```\n<pre>{\n form: Object,\n result: true,\n error: Object,\n token: \"WhatAnAwesomeToken\",\n tokens: [\"WhatAnAwesomeToken\"],\n cardData: {\n     cardBrand: \"VISA\",\n     nameOnCard: \"Freddie Flintstone\",\n     expirationDate: \"1218\",\n     lastFour: \"4242\",\n     cardType: \"Credit\"\n     cardCategory: \"Gold\"\n },\n validationData: {\n     avsResponse: \"U - Address Match Unavailable\",\n     cvvResponse: \"M - Match\",\n     authMessage: \"\",\n     authReturnCode: 0\n     }\n }</pre>\n```\n\n## CreateTokenResponse Parameters\n\n| Parameter   Name| Description \n|-----|-----\n|form (object)| The JavaScript form DOM object passed to createToken.\n|token (string) |Unique payment token generated to represent the payment information.\n|tokens (string, array) |In advanced mode this contains the array of unique payment tokens.\n|message (string) | A brief description of the result of the request for a token or tokens.\n|result (boolean) | A boolean which signifies the result of the request for a token or tokens.\n|cardData | See [ResponseCardData.](#section/ResponseCardData)\n|validationData | See [ResponseValidationData.](#section/ResponseValidationData)\n\n## ResponseCardData Parameters\n\n| Parameter   Name| Description \n|-----|-----\n|cardBrand (string)| The brand of  the card being charged, for example VISA, MasterCard, American Express.\n|nameOnCard (string) |Card owner’s name as it appears on the card.\n|expirationDate (string) |Date the card expires as it appears on the card.\n|lastFour (string) |The last four digits of the card number.\n|cardType (string) |The type of card being charged, for example Credit or Debit.\n|cardCategory (string)  | The card category if it has one, for example Gold, Platinum, etc.\n\n## ResponseValidationData Parameters\n| Parameter   Name| Description \n|-----|-----\n|avsResponse (string)| Result of an AVS (Address Verification System) check when the AdminGetToken request  parameter validateCard is set to true/yes.\n||View the [AVS Response Fields.](#section/avs-response-fields) \n|cvvResponse (string) |Result of a CVV check when the AdminGetToken request parameter validateCard is set to true/yes.\n| |View the [CV Response Fields.](#section/cv-response-fields) \n|authMessage (string) |Message indicating the status of the authorization request.\n|authReturnCode (interger) |Code indicating the status of the authorization request.\n\n## Complete the Transaction\n\nThe IBX library only generates a token and you need to finish charging the card on your server. When the token is posted back to your page, you can do what you like with the response data but typically you will want to create named form elements for at least the payment token that was returned and then submit the actual form itself to your endpoint.  For example, your code to capture the payment token in JS could look like the following simple jQuery example where we take the payment token, last four digits of the card, and the name on the card and return it to our endpoint via hidden fields posted via the actual form submit.\n \n ```\n function ISVIBXResponseHandler(response) {\n\n   var $form = $('#payment');\n\n   if (response.result) {\n\n      $form.append($('<input type=\"hidden\" name=\"paymentToken\">').val(response.token));\n      $form.append($('<input type=\"hidden\" name=\"lastFour\">').val(response.cardData.lastFour));\n      $form.append($('<input type=\"hidden\" name=\"nameOnCard\">').val(response.cardData.nameOnCard));\n\n      // Submit the form:\n      $form.get(0).submit();\n      }\n      else {\n          // Show the errors on the form:\n          $form.append($('<input type=\"text\" name=\"paymenterrors\" size=\"50\">').val(response.error.message));\n      }\n };\n ```\n You will then use the existing SOAP API for Card Safe  [processCreditCard](#section/processCreditCard) with the TokenMode “JSTOKEN” to actually use the card. (Refer to Card Safe processCreditCard for more information.).\n \n ```\nsafeResponse = safe.ProcessCreditCard(\"username\", \"password\", \"sale\", \"paymentToken\", \"jstoken\", \"amount\", \"\", \"\", \"\");\n ```\n \n As a final note, be aware that you can and must use your merchant token (which can be shared publicly) for this API however when it comes time to charge the card on your server you must use your private  SOAP API credentials (definitely never share these) to actually charge the card.\n \n # 10.2. Hosted Page \n \n ## Introduction\n \n The Hosted Page is a ‘Cloud Based’ integration solution that dramatically reduces the burden of PCI DSS compliance for merchants, and “de-scopes” POS software solutions from the onerous PA-DSS standard.\n\nThis solution is fully ‘brand able’ and requires minimal programming knowledge/effort to implement.\n\nThere are two primary methods for implementing this page.\n\n- Traditional ‘Redirect/Post Back’ (Simple) Methodology\n\n![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/hosted1.jpg)\n\n- iFrame/Hosted Form (Advanced) Methodology:\n\n![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/hosted2.png)\n\n## Configuration\n\nConfiguration of the Hosted Page was designed to allow for maximized branding capability with little to no advanced programming knowledge. Our Hosted Page application branding is generated dynamically, and can be customized straight out of the Virtual Terminal interface. Simply navigate to ‘Tools’ and then ‘Hosted Page’ from within the Virtual Terminal to access the configuration utility\n\n**Note: If you do not have access to the Hosted Page configuration, please verify that your user account has sufficient privileges to view the configuration utility. If your user account has sufficient privileges, please contact technical support to enable the Hosted Page in your gateway account.\n\nThe Hosted Page Configuration Utility is broken up into 5 tabs listed and explained in the sections below.\n\n## Options\n\nThis tab allows you to activate and name your Hosted Page. Options on this page are as follows:\n\n**_Page Title:_** This field allows you to name the Hosted Page. The name is what will appear at the top of the Card Holder’s browser window if you are utilizing the ‘Redirect Methodology’ when implementing the hosted page.\n\n**_Page is Active:_** This checkbox indicates whether the Hosted Page has been activated. This check box must be enabled prior to moving forward with additional configuration of the Hosted Page.\n\n**_Restrict Referring Host:_** This checkbox indicates that whether or not the Hosted Page will be IP Limited.**Important: If you are using the Hosted Page for anything other than collecting donations, it is STRONGLY recommended that you enable this option to ensure that you are protected against ‘man in the middle’ type attacks.\n\n**_Allowed Host:_** This field indicates the IP address of the web page that will be initiating requests against your Hosted Page. If ‘Restrict Referring Host’ is selected, and no valid value is entered in this field, the Hosted Page will not be accessible from any external page.\n\n**_Email Pay Notification:_** This checkbox indicates whether or not you would like email notifications of payments collected on your Hosted Page sent to members of your staff. This is necessary if utilizing the Hosted Receipt page, or if you cannot programmatically interpret response values generated by the Hosted Page. If selected, a new field will appear allowing you to add the email addresses at which you would like to receive notifications that payments have been collected. Simply enter the desired email address and select ‘Add.’ You can add as many email addresses as you like.\n\n## Fields\n\nThis tab allows you to dictate what fields display on your hosted page, as well as control what URL’s you want the hosted page to interact with.\n\n**_Customer Specifies Amount:_** This checkbox indicates whether or not you will allow the cardholder to enter the amount or if you will pass the amount value for the transaction in the request to load the page. Do not select this option unless you are allowing the cardholder to designate the amount of the transaction they are going to run.\n\n**_Submit Button URL:_** This field indicates the URL that the ‘Submit’ button on the Hosted Page will point to. This option is ignored if you select ‘Use Hosted Receipt.’\n\n**_Use Hosted Receipt:_** This checkbox indicates whether or not you would like the response values displayed on our Hosted Receipt page.\n\n**_Error URL:_** This field indicates the URL you would like the Hosted Page to redirect to should an unexpected error arise.\n\n**_Continue URL:_** This field indicates the URL you would like the Hosted Page to redirect to when the continue button is selected on the Hosted Receipt Page.\n\n**_Field Visibility:_** This series of checkboxes indicates what panels – outside of the credit card panel – and what fields contained within those panels are to be displayed. This will change considerably if you have custom fields enabled and configured in your hosted page, but the configuration of these options is very straight forward. Simply check the box of the panel which contains the fields you want to display, and then select the fields you want to display within that panel.\n\n**_Show Donation Amounts:_** This checkbox indicates whether or not your Hosted Page will display suggested donation amounts.\n\n**_Amount Options:_** This field allows you to set suggested donation amounts on your Hosted Page. See the following example:\n\nThis configuration:\n\n![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/hosted-page-donation-amount-1.png)\n\nYields the following in the Hosted Page:\n\n![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/hosted4-300x89.png)\n\nSimply enter an amount in the ‘Amount Options’ field and then select ‘Add Option’, and the amount that you enter will be reflected as an option on the hosted page. If you would like to remove an option, select it from the list and select the \n\n![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/hosted5.png)\nand the amount will be removed from the list.\n\n## Appearance\n\nThis tab allows you to alter the look and feel of the Hosted Page to have it match your web site or POS application.\n\n**_Font Color:_** This dropdown indicates the color that the primary text of the page will be displayed in.\n\n**_Page Background Color:_** This dropdown indicates the color of the background of the page.\n\n**_Panel Background Color:_** This dropdown indicates the background color of each panel.\n\n**_Font:_** This dropdown allows you to set the type face that the primary text of the page will be displayed in.\n\n**_Font Size:_** This slide bar allows you to set the size of the type face that the primary text of the page will be displayed in.\n\n**_Header Background Color:_** This dropdown indicates the color of the panel header.\n\n**_Header Font:_** This dropdown indicates the type face that the panel header text will be displayed in.\n\n**_Header Font Size:_** This slide bar indicates the size of the type face that the panel header text will be displayed in.\n\n**_Header Font Color:_** This dropdown indicates the color of the type face that the panel header text will be displayed in.\n\n**_Panel Width Configuration:_** The options shown below will allow you to control the width of each panel by either pixel count or percentage of the total size of the page. See below:\n\n![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/hosted-page-panel-width-300x150.png)\n\nIf you select ‘Panel Width = Header Width’ the panel width will be set to equal the width of any banner that has been uploaded for the page.\n\n**_Control Skin:_** This dropdown allows you to configure the way the form decorator will display text boxes and buttons on the hosted page.\n\n**_The Page Banner:_** Hit select to open the image uploader. Select a ‘.jpg’ file of the banner you would like to display and select ‘Open.’ Currently the Hosted Page only supports ‘.jpg’ format images.\n\n**_Hide Banner:_** This checkbox allows you to hide a banner if one has been uploaded, but you do not wish to display a banner on the hosted page.\n\n**_Preview:_** The ‘Preview’ button allows you generate a preview of how the Hosted Page will appear.\n\n## Security\n\nThis tab holds the button that will generate Hosted Page credentials. This will generate a new secure username and password combo each time you select the button, so only select this if you have reason to believe that your credentials were compromised. This token will allow you to access your hosted page programmatically, but are only useful within the context of the Hosted Page. This secure token will not allow access through our web services API, and will not allow access to the virtual terminal. The credentials that are generated are required to properly generate the hosted page.\n\n## Button\n\nThis tab allows you to generate a button that will display the Hosted Page preconfigured with a given amount. Simply enter an amount in the ‘Amount’ field, and select ‘Generate HTML.’ This will create the HTML necessary to load your hosted page and is helpful for processing static single transactions for a given amount. This HTML can be copied and pasted into your web site, and will allow you to process a simple transaction with virtually no knowledge of HTML or web programming.\n\n## Field Definitions\n## Service Location\n\nhttps://gateway.ibxpays.com/ws/hosted.aspx\n\n\n## Hosted Page Input Parameters\n\nThese values must all be separated by the ‘&’ character and appended to the service location of the hosted page.\n\n_Example (to be used as a formatting reference only):_\n\n**https://gateway.ibxpays.com/ws/hosted.aspx?\nUsername=tUhbZ8%2bhVy2pvrHUvXA%3d%3d&Password=76%2fP0EP7La9Go6dn4OgLH9lI5zT0fykgUKAyTi3KbNlhGAf%2fLsNpimtPqqN9&MerchantKey=11111**\n\nUnless noted otherwise, the parameter is **required.**\n\n| Parameter Name| Description \n|-----|-----\n| UserName| The Username parameter generated in the security tab of the Hosted Page configuration utility.\n|Password | The Password parameter generated in the security tab of the Hosted Page configuration utility.\n|MerchantKey | This is the Gateway ID of the gateway account you are trying to connect to. This value is also referred to as the Vendor Key or RPNumber.\n| CustomerName| This is the card holder name value.\n|Optional |\n|ShippingAddress1 | Identifies the first line of the card holder’s shipping address.\n|Optional |\n|ShippingAddress2 |Identifies the second line of the card holder’s shipping address.\n|Optional |\n| ShippingState| Identifies the State of the card holder’s shipping address.\n|Optional |\n|ShippingCity |Identifies the City of the card holder’s shipping address.\n|Optional | \n|ShippingZip | Identifies the Zip code of the card holder’s shipping address.\n|Optional |\n|ShippingIsBilling Optional | A Boolean field which allows the integrator to specify that the shipping address and billing address are equivalent. If this field is passed in and set to ‘True’, all billing address information passed to the hosted page will be ignored.\n|BillingAddress1 | Identifies the first line of the card holder’s billing address.\n|Optional |\n|BillingAddress2 | Identifies the second line of the card holder’s billing address.\n|Optional |\n|BillingState | Identifies the State of the card holder’s billing address.\n|Optional |\n|BillingCity | Identifies the City of the card holder’s billing address.\n|Optional |\n|BillingZip | Identifies the Zip code of the card holder’s billing address.\n|Optional |\n|Amount | Amount of the transaction you are trying to run. This value is required if you are not allowing the customer to specify the amount.\n|Required if not allowing customer to specify amount |\n|InvNum | Invoice Number to be associated with the current transaction.\n|Optional |\n|CustomerID | The Customer ID value to be associated with the current transaction.\n|Optional |\n|TaxAmount | The Tax Amount to be associated with the current transaction.\n|Optional |\n|ShippingAmount | The Shipping Amount to be associated with the current transaction.\n|Optional |\n\n## Hosted Page Response Fields\n\nAll response fields will match the existing response field definitions. The following additional information will be returned with the authorization response to allow you to accurately store and handle the token response from the gateway\n\n| Parameter Name| Description \n|-----|-----\n| LastFour| The last four digits of the credit card number that was collected on the Hosted Page.\n|ExpDate |    The expiration date of the credit card number that was collected on the Hosted Page.\n|InvNum | The invoice number of the transaction for reconciliation purposes.\n\n# 11. Gateway Emulator \n\n## Introduction\n\nThe Gateway Emulator is a translation layer API that allows an integrator to leverage existing development work against another Payment Gateway application and communicate with our web services API. The utility is fairly simple, and functions as a field mapping utility that translates from one message format to another.\n\nThis utility is designed to accommodate any HTTP POST or GET format quickly and easily, and can be used with any Open Source shopping cart to quickly allow a merchant to adapt the shopping cart integration to our gateway.\n\nSend all requests from your existing integration to the following URL:\n\n**_https://gateway.ibxpays.com/emulator/handler.ashx?EmulatorID=nn_**\n\nThe emulator ID “nn” should match the Emulator ID that has been assigned by the Emulator Configuration Utility.\n\n## Configuration\n\nConfiguration of the emulator is very simple, and allows the integrator to map the fields from one request format to those of our standard API, and map the responses generated by the gateway to a format that the integrator is already expecting.\n\nSimply navigate to ‘Tools’ and then ‘Emulator’ from within the Virtual Terminal to access the configuration utility.\n\n**Note: If you do not have access to the Emulator configuration, please verify that your user account has sufficient privileges to view the configuration utility. If your user account has sufficient privileges, please contact technical support to enable the Emulator in your gateway account.\n\nThe Emulator Configuration Utility is explained below.\n\n## Adding a New Emulator\n\nTo add a new emulator click ‘Add New’ in the top left hand corner of the grid on the ‘Emulator’ page. From here you will be brought to the ‘Global Settings’ tab. These settings must be completed in order to add a new emulator.\n\n**_Method:_** This radio button selects the HTTP method that the new emulator will accept requests in. You can select from HTTP GET, or HTTP POST\n\n**_Description:_** This is the name of the emulator that you are creating. This field is ‘user define’ and can be whatever the integrator chooses it to be. It is best to choose a name that accurately reflects the gateway/integration method that you are emulating\n\n**_Source IP:_** The source IP address should be set to the IP address that you will be accessing the emulator from. This field is critical if you are not able to pass an emulator ID into the url of the request. It is recommended for security purposes that you add the source IP to ensure that you are restricting access to the API to trusted sources only.\n\nClick ‘Save’ once you have properly configured this tab.\n\n## Field Mapping Configuration\n\n**_Template:_** The template drop down allows you to select from ‘pre-populated’ emulation templates. If you do not see the template that you are looking for, please contact technical support. Click ‘Load’ to generate the fields of a pre-configured emulation\n\n## Add Field Mapping\n\nTo add a new request field, simply click the ‘Add field mapping’ button, and follow the steps below:\n\n 1. Enter the name of the Source Field. The source field should match the name of the field that you are sending in your current integration.\n \n 2. Then select the corresponding field that you would like the emulator to map to from the ‘Destination Field’ drop down menu.\n \n 3. Click ‘Insert’ to save the field or click ‘Cancel’ to remove the field.\n \n 4. Repeat these steps until all fields from your existing integration have been mapped. Any fields that do not have a corresponding field in our Gateway API can be disregarded as the Emulator will simply ignore any additional fields that have not been declared in the ‘Add Field Mapping utility.\n\nRepeat these same steps for the ‘Response Field Mapping’ to map out the response fields returned by the gateway. The order will be reversed, however. Here you will first select the response field generated by the gateway, and map it to a field that your integration is expecting. Continue this process until all response fields that are expected by your existing integration are being generated by the emulator.\n\n## Prebuilt Templates\n## Configuring Magento for The Gateway Using the Emulator\n\n1. With a working install of Magento, enable the Authorize.net (AIM) payment module. There are 4 settings in the module configuration that will be relevant to enabling traffic to the emulator\n    a. Enabled: Enables/disables the module in Magento. This must be True for the module to work.\n    \n    b. API Login ID: This will be a username (must be an API user) in The Gateway.\n    \n    c. Transaction Key: This is the password for the user entered in the Login ID field.\n    \n    d. Gateway URL: This is directly configurable in the Magento UI and will point to the emulator on the The Gateway servers.\n    https://gateway.ibxpays.com/Emulator/handler.ashx?EmulatorID=<ID OF THE EMULATOR YOU WILL ADD IN THE FOLLOWING STEP>\n    magento payment method\n    \n     ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/magento-payment-method.png)\n     \n2. Create an emulator in The Gateway that will be used for this integration. Save the values on the first screen, which will enable the fields tab.\n\n    a. Method: Authorize.net AIM for Magento uses Post\n    \n    b. Description: Any value recognizable to the user\n    \n    c. Source IP: An advanced option, allowing The Gateway to determine which Emulator profile to load based on the client ip address, as opposed to supplying an Emulator ID in the request\n    \n     ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/magento-global-settings-2.png)\n  \n  3. Load the Authorize.net (Magento/OSCommerce) template. This will create a number of pre-mapped request and response fields needed to match the Authorize.net response and request to the The Gateway request and response.\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/authorize-net-request-field-mapping.png)\n  \n  4. Finally, several of the Authorize.net fields do not have a direct value conversion to The Gateway. For example, an approval on The Gateway will have a Result Code of 0. On Authorize.net, an approval will have a Response Code of 1. It is not enough to simply map the Result Code of The Gateway to the Response Code of Authorize.net – 0 has no meaning for this field on Authorize.net. In addition to mapping the field, The Gateway’s Emulator will also use a Value Map to properly handle this field (found under Advanced properties of a field mapping)\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-result-code.png)\n  \n  This particular map will convert a result of 0 from The Gateway to a 1 for Authorize.net. Additionally, it will convert a value of 12 (decline) from The Gateway to a 2 for Authorize.net. Additional value maps can be added as needed.\n\n  Value Maps are also important for the Transaction Type field in the request. Similar to the Response Code, the conversion is not straight across.\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-response-code-300x114.png)\n  \n  These values are preloaded with the Authorize.net template.\n  \n  ## Configuring OSCommerce for The Gateway Using the Emulator\n\n  1. With a working install of OSCommerce, enable the Authorize.net (AIM) payment module. There are 4 settings in the module configuration that will be relevant to enabling traffic to the emulator.\n      a. Enable Authorize.Net (AIM) Module: Enables/disables the module in OSCommerce. This must be True for the module to work.\n      \n      b. Login ID: This will be a username (must be an API user) in The Gateway.\n      \n      c. Transaction Key: This is the password for the user entered in the Login ID field.\n      \n      d. MD5 Hash: This can be a value of the user’s choice, but it must match exactly (case-sensitive) the value entered in The Gateway (see below).\n      \n      ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/authorize-net.jpg)\n      \n       ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/authorize-net-AIM.png)\n       \n       e. You may need to edit the includes/modules/payment/authorizenet2.php file that exists in the installation directory of OS Commerce. You can access the installation files on the server where OS Commerce was installed. Then locate the directory for the Auth.net plugin and do a search of the files in that directory for anything containing secure.authorize.net and replace those URLs with the gateway’s emulator URL.\n    \n  2. Create an emulator in The Gateway that will be used for this integration. Save the values on the first screen, which will enable the fields tab.\n\n      a. Method: Authorize.net AIM for OSCommerce uses Post\n      \n      b. Description: Any value recognizable to the user\n      \n      c. Source IP: An advanced option, allowing The Gateway to determine which Emulator profile to load based on the client ip address, as opposed to supplying an Emulator ID in the request\n      \n      d. Hash value: This corresponds to the Hash Value entered in Authorize.net (AIM) payment module\n      \n      ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/emulator-oscommerce-global-settings-1.png)\n      \n  3. Load the Authorize.net (Magento/OSCommerce) template. This will create a number of pre-mapped request and response fields needed to match the Authorize.net response and request to the The Gateway request and response.\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/authorize-net-ZEN-request-code-1.png)\n  \n  4. The Authorize.net AIM spec has several features which, although optional to Authorize.net, are required by OSCommerce. \n    a. MD5 hash in the response: Authorize.net supports a hash of a pre-defined hash value, username, transaction id and amount returned in the response. OSCommerce will calculate this value and expect a match in the response from the The Gateway emulator. This is accomplished via the Field Formula in the Advanced Options of the Response field. As the screenshot below shows, the fields HashValue, Username, Transaction ID and Amount are included in a call to a MD5 function (all surrounded in parenthesis). Each value enclosed in square brackets is intended to be replaced with the actual value from that field. For example, [HashValue] will be replaced with the value specified in the previous steps (abcd in this example). This allows the return value of a given field to be dynamic, depending on the actual request and response values of a given transaction.\n    \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/adv-field-mapping-MD5.png)\n  \n  b. Amount in the response:  Similar to MD5 this value depends on a FieldFormula, but it is very simple. This formula will simply be replaced with the Amount value passed in the request. No other modifications will be made.\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/oscomm-field-code-1.png)\n  \n  5. Finally, several of the Authorize.net fields do not have a direct value conversion to The Gateway. For example, an approval on The Gateway will have a Result Code of 0. On Authorize.net, an approval will have a Response Code of 1. It is not enough to simply map the Result Code of The Gateway to the Response Code of Authorize.net – 0 has no meaning for this field on Authorize.net. In addition to mapping the field, The Gateway’s Emulator will also use a Value Map to properly handle this field (found under Advanced properties of a field mapping)\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-result-code.png)\n  \n  This particular map will convert a result of 0 from The Gateway to a 1 for Authorize.net. Additionally, it will convert a value of 12 (decline) from The Gateway to a 2 for Authorize.net. Additional value maps can be added as needed.\n\n  Value Maps are also important for the Transaction Type field in the request. Similar to the Response Code, the conversion is not straight across.\n  \n   ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-response-code.png)\n   \n   These values are preloaded with the Authorize.net template.\n   \n   ## Configuring ShopSite for The Gateway Using the Emulator\n\n  1. ShopSite provides a custom payment provider called Gateway Emulator. Select this in the payment configuration of the store, and click Configure Processor. There will be 5 settings to configure to enable the ShopSite store to process with The Gateway.\n      a. Host: This is simply the domain name of the gateway\n      \n      b. Port: 443, for SSL\n      \n      c. Authorize Script: /emulator/handler.ashx?EmulatorID=<EmulatorID> where <EmulatorID> is the identifier from the The Gateway UI after an Emulator Profile is created (see below)\n      \n      d. API Login ID: This will be a username (must be an API user) in The Gateway.\n      \n      e. Transaction Key: This is the password for the user entered in the Login ID field.\n      \n      ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/select-processor.png)\n      \n       ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/gateway-emulator-settings.png)\n       \n       \n  2. Create an emulator in The Gateway that will be used for this integration. Save the values on the first screen, which will enable the fields tab.\n      a. Method: Authorize.net AIM for ShopSite uses Post\n      \n      b. Description: Any value recognizable to the user\n      \n      c. Source IP: An advanced option, allowing The Gateway to determine which Emulator profile to load based on the client ip address, as opposed to supplying an Emulator ID in the request\n      \n      ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/emulator-shopsite-global-settings.png)\n  \n  3. Load the Authorize.net (Magento/OSCommerce) template. This will create a number of pre-mapped request and response fields needed to match the Authorize.net response and request to the The Gateway request and response.\n  \n   ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/authorize-net-request-field-mapping-1.png)\n   \n  4. Finally, several of the Authorize.net fields do not have a direct value conversion to The Gateway. For example, an approval on The Gateway will have a Result Code of 0. On Authorize.net, an approval will have a Response Code of 1. It is not enough to simply map the Result Code of The Gateway to the Response Code of Authorize.net – 0 has no meaning for this field on Authorize.net. In addition to mapping the field, The Gateway’s Emulator will also use a Value Map to properly handle this field (found under Advanced properties of a field mapping)\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-result-code.png)\n  \n  This particular map will convert a result of 0 from The Gateway to a 1 for Authorize.net. Additionally, it will convert a value of 12 (decline) from The Gateway to a 2 for Authorize.net. Additional value maps can be added as needed.\n\n  Value Maps are also important for the Transaction Type field in the request. Similar to the Response Code, the conversion is not straight across.\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-response-code.png)\n  \n  These values are preloaded with the Authorize.net template.\n  \n  ## Configuring VirtueMart for The Gateway Using the Emulator\n  \n  1. With a working install of VirtueMart, enable the Authorize.net (AIM) payment module. There are 3 settings in the module configuration that will be relevant to enabling traffic to the emulator\n  \n      a. Enable Authorize.Net (AIM) Module: Enables/disables the module in VirtueMart. This must be True for the module to work. \n      \n      b. Login ID: This will be a username (must be an API user) in The Gateway.\n      \n      c. Transaction Key: This is the password for the user entered in the Login ID field.\n      \n      ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/virtuemart-config-tab.png)\n  \n  \n 2. Create an emulator in The Gateway that will be used for this integration. Save the values on the first screen, this will enable the fields tab.\n      a. Method: Authorize.net AIM for VirtueMart uses Post\n      \n      b. Description: Any value recognizable to the user\n      \n      c. Source IP: An advanced option, allowing The Gateway to determine which Emulator profile to load based on the client IP address, as opposed to supplying an Emulator ID in the request\n      \n       ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/virtuemart-global-settings-1.png)\n  \n  3. Load the Authorize.net (VirtueMart) template. This will create a number of pre-mapped request and response fields needed to match the Authorize.net response and request to the The Gateway request and response.\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/authorize-net-virtuemart-global-settings-1.png)\n  \n  \n  4. Several of the Authorize.net fields do not have a direct value conversion to The Gateway. For example, an approval on The Gateway will have a Result Code of 0. On Authorize.net, an approval will have a Response Code of 1. It is not enough to simply map the Result Code of The Gateway to the Response Code of Authorize.net – 0 has no meaning for this field on Authorize.net. In addition to mapping the field, The Gateway’s Emulator will also use a Value Map to properly handle this field (found under Advanced properties of a field mapping)\n  \n        ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-result-code.png)\n        \n  This particular map will convert a result of 0 from The Gateway to a 1 for Authorize.net. Additionally, it will convert a value of 12 (decline) from The Gateway to a 2 for Authorize.net. Additional value maps can be added as needed.\n  \n  Value Maps are also important for the Transaction Type field in the request. Similar to the Response Code, the conversion is not straight across.\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-response-code.png)\n  \n  These values are preloaded with the Authorize.net template.\n  \n  ## Configuring Zencart for The Gateway Using the Emulator\n  \n  1. With a working install of Zencart, enabled the Authorize.net (AIM) payment module. There are 4 settings in the module configuration that will be relevant to enabling traffic to the emulator\n\n      a. Enable Authorize.Net (AIM) Module: Enables/disables the module in Zencart. This must be True for the module to work.\n      \n      b. Login ID: This will be a username (must be an API user) in The Gateway.\n      \n      c. Transaction Key: This is the password for the user entered in the Login ID field.\n      \n      d. MD5 Hash: This can be a value of the user’s choice, but it must match exactly (case-sensitive) the value entered in The Gateway (see below).\n      \n      ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/zencart-auth-net.png)\n      \n  2. Create an emulator in The Gateway that will be used for this integration. Save the values on the first screen, this will enable the fields tab.\n\n      a. Method: Authorize.net AIM for Zencart uses Post\n      \n      b. Description: Any value recognizable to the user\n      \n      c. Source IP: An advanced option, allowing The Gateway to determine which Emulator profile to load based on the client IP address, as opposed to supplying an Emulator ID in the request\n      \n      d. Hash value: This corresponds to the Hash Value entered in the Authorize.net (AIM) payment module.\n      \n      ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/zencart-global-settings-3.png)\n      \n    3. Load the Authorize.net (Zencart) template. This will create a number of pre-mapped request and response fields needed to match the Authorize.net response and request to the The Gateway request and response.\n    \n          ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/zencart-request-fields-1.png)\n    \n  4. The Authorize.net AIM spec has several features which, although optional to Authorize.net, are required by Zencart. \n  a. MD5 hash in the response: Authorize.net supports a hash of a pre-defined hash value, username, transaction id and amount returned in the response. Zencart will calculate this value and expect a match in the response from the The Gateway emulator. This is accomplished via the Field Formula in the Advanced Options of the Response field. As the screenshot below shows, the fields HashValue, Username, Transaction ID and Amount are included in a call to a MD5 function (all surrounded in parenthesis). Each value enclosed in square brackets is intended to be replaced with the actual value from that field. For example, [HashValue] will be replaced with the value specified in the previous steps (abcd in this example). This allows the return value of a given field to be dynamic, depending on the actual request and response values of a given transaction.\n        \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/zencart-adv-field-map-1.png)\n         \n  b. Amount in the response:  Similar to MD5 this value depends on a FieldFormula, but it is very simple. This formula will simply be replaced with the Amount value passed in the request. No other modifications will be made.\n        \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/zencart-field-formula-1.png)\n      \n  5. Finally, several of the Authorize.net fields do not have a direct value conversion to The Gateway. For example, an approval on The Gateway will have a Result Code of 0. On Authorize.net, an approval will have a Response Code of 1. It is not enough to simply map the Result Code of The Gateway to the Response Code of Authorize.net – 0 has no meaning for this field on Authorize.net. In addition to mapping the field, The Gateway’s Emulator will also use a Value Map to properly handle this field (found under Advanced properties of a field mapping)\n  \n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-result-code.png)\n  \n  This particular map will convert a result of 0 from The Gateway to a 1 for Authorize.net. Additionally, it will convert a value of 12 (decline) from The Gateway to a 2 for Authorize.net. Additional value maps can be added as needed.\n  \n  Value Maps are also important for the Transaction Type field in the request. Similar to the Response Code, the conversion is not straight across.\n\n  ![alt sample](https://www.payroc.com/Common/Images/Custom/5982/api-docs/value-map-response-code.png)\n  \n  These values are preloaded with the Authorize.net template.\n",
    "version": "1.0.0",
    "title": "SOAP APIs",
    "termsOfService": "https://www.payroc.com/privacy-policy",
    "contact": {
      "url": "https://www.integritypays.com/contact/"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://www.payroc.com/Common/Images/Custom/5982/Payroc_LOGO_Orange.png"
    }
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/GetCardTrxSummary": {
      "get": {
        "tags": [
          "Endpoints"
        ],
        "summary": "GetCardTrxSummary",
        "description": "The following examples (cURL, PHP, Node.js, and Ruby) can be used when you are not using a SOAP based, .NET service. The examples show similar ways of doing the same thing in each environment. Note that we also have a postman collection that can quickly bring you up to speed for basic transaction processing using our easy HTTP GET/POST wrapper for our SOAP API as well as REST APIs. Once you open the link below look for the “IBX Beginner Collection”.\n\n [![Run in Postman](https://run.pstmn.io/button.svg)](https://www.getpostman.com/run-collection/dd06f5a44925cb0e1b3a)        \n",
        "operationId": "PaymentMethod",
        "parameters": [
          {
            "name": "UserName",
            "in": "query",
            "description": "User name",
            "type": "string",
            "required": true
          },
          {
            "name": "Password",
            "in": "query",
            "description": "Password",
            "type": "string",
            "required": true
          },
          {
            "name": "RPNum",
            "in": "query",
            "description": "RPNum",
            "type": "integer",
            "required": true
          },
          {
            "name": "BeginDt",
            "in": "query",
            "description": "BeginDt",
            "type": "string",
            "required": true
          },
          {
            "name": "EndDt",
            "in": "query",
            "description": "EndDt",
            "type": "string",
            "required": true
          },
          {
            "name": "ApprovalCode",
            "in": "query",
            "description": "Approval Code",
            "type": "integer",
            "required": false
          },
          {
            "name": "Register",
            "in": "query",
            "description": "Register",
            "type": "integer",
            "required": true
          },
          {
            "name": "NameOnCard",
            "in": "query",
            "description": "Name On Card",
            "type": "integer",
            "required": false
          },
          {
            "name": "CardNum",
            "in": "query",
            "description": "Card Num",
            "type": "integer",
            "required": false
          },
          {
            "name": "Card Type",
            "in": "query",
            "description": "Card Type",
            "type": "string",
            "required": false
          },
          {
            "name": "ExcludeVoid",
            "in": "query",
            "description": "Exclude Void",
            "type": "boolean",
            "required": true
          },
          {
            "name": "User",
            "in": "query",
            "description": "User",
            "type": "string",
            "required": true
          },
          {
            "name": "invoiceId",
            "in": "query",
            "description": "invoice Id",
            "type": "integer",
            "required": false
          },
          {
            "name": "SettleFlag",
            "in": "query",
            "description": "Settle Flag",
            "type": "integer",
            "required": false
          },
          {
            "name": "SettleMsg",
            "in": "query",
            "description": "Settle Msg",
            "type": "string",
            "required": false
          },
          {
            "name": "SettleDt",
            "in": "query",
            "description": "Settle Dt",
            "type": "string",
            "required": false
          },
          {
            "name": "TransformType",
            "in": "query",
            "description": "Transform Type",
            "type": "string",
            "required": false
          },
          {
            "name": "Xsl",
            "in": "query",
            "description": "Xsl",
            "type": "string",
            "required": false
          },
          {
            "name": "ColDelim",
            "in": "query",
            "description": "Col Delim",
            "type": "string",
            "required": false
          },
          {
            "name": "RowDelim",
            "in": "query",
            "description": "Row Delim",
            "type": "string",
            "required": false
          },
          {
            "name": "IncludeHeader",
            "in": "query",
            "description": "Include Header",
            "type": "boolean",
            "required": true
          },
          {
            "name": "ExtData",
            "in": "query",
            "description": "ExtData",
            "type": "string",
            "required": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/paymentMethod"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "paymentMethod": {
      "type": "object",
      "description": "standard transaction response fields",
      "properties": {
        "Payment_Type_ID": {
          "type": "string"
        },
        "Authorization": {
          "type": "number"
        },
        "Capture": {
          "type": "number"
        },
        "ForceCapture": {
          "type": "number"
        },
        "PostAuth": {
          "type": "number"
        },
        "Return": {
          "type": "number"
        },
        "Sale": {
          "type": "number"
        },
        "Receipt": {
          "type": "number"
        },
        "RepeatSale": {
          "type": "number"
        },
        "Activate": {
          "type": "number"
        },
        "Deactivate": {
          "type": "number"
        },
        "Reload": {
          "type": "number"
        },
        "Authorization_Cnt": {
          "type": "number"
        },
        "Capture_Cnt": {
          "type": "number"
        },
        "ForceCapture_Cnt": {
          "type": "number"
        },
        "PostAuth_Cnt": {
          "type": "number"
        },
        "Return_Cnt": {
          "type": "number"
        },
        "Sale_Cnt": {
          "type": "number"
        },
        "Receipt_Cnt": {
          "type": "number"
        },
        "RepeatSale_Cnt": {
          "type": "number"
        },
        "Activate_Cnt": {
          "type": "number"
        },
        "Deactivate_Cnt": {
          "type": "number"
        },
        "Reload_Cnt": {
          "type": "number"
        },
        "Cnt": {
          "type": "number"
        }
      }
    }
  }
}
